
THIRDPARTY_LWIP_RAW_BASIC_HTTP_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b370  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b370  0040b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e0  20400000  0040b378  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004018  204009e0  0040bd58  000209e0  2**3
                  ALLOC
  4 .stack        00000400  204049f8  0040fd70  000209e0  2**0
                  ALLOC
  5 .heap         00000200  20404df8  00410170  000209e0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a0e  2**0
                  CONTENTS, READONLY
  8 .debug_info   000401d2  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008055  00000000  00000000  00060c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000121ca  00000000  00000000  00068c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001380  00000000  00000000  0007ae58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018d8  00000000  00000000  0007c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f1a7  00000000  00000000  0007dab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022b55  00000000  00000000  000acc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009f0ca  00000000  00000000  000cf7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003f4c  00000000  00000000  0016e878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 4d 40 20 a9 0d 40 00 a7 0d 40 00 a7 0d 40 00     .M@ ..@...@...@.
  400010:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a7 0d 40 00 a7 0d 40 00 00 00 00 00 a7 0d 40 00     ..@...@.......@.
  40003c:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  40004c:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  40005c:	a7 0d 40 00 a7 0d 40 00 00 00 00 00 29 0a 40 00     ..@...@.....).@.
  40006c:	3d 0a 40 00 51 0a 40 00 a7 0d 40 00 a7 0d 40 00     =.@.Q.@...@...@.
  40007c:	a7 0d 40 00 65 0a 40 00 79 0a 40 00 a7 0d 40 00     ..@.e.@.y.@...@.
  40008c:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  40009c:	9d 6b 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     .k@...@...@...@.
  4000ac:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  4000bc:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  4000cc:	a7 0d 40 00 00 00 00 00 a7 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	9d 64 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     .d@...@...@...@.
  4000ec:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  4000fc:	a7 0d 40 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ..@...@...@...@.
  40010c:	a7 0d 40 00 a7 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ......@...@...@.
  40012c:	a7 0d 40 00 a7 0d 40 00 00 00 00 00 a7 0d 40 00     ..@...@.......@.
  40013c:	a7 0d 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  40014c:	00 00 00 00 a7 0d 40 00 a7 0d 40 00 a7 0d 40 00     ......@...@...@.

0040015c <__do_global_dtors_aux>:
  40015c:	b510      	push	{r4, lr}
  40015e:	4c05      	ldr	r4, [pc, #20]	; (400174 <__do_global_dtors_aux+0x18>)
  400160:	7823      	ldrb	r3, [r4, #0]
  400162:	b933      	cbnz	r3, 400172 <__do_global_dtors_aux+0x16>
  400164:	4b04      	ldr	r3, [pc, #16]	; (400178 <__do_global_dtors_aux+0x1c>)
  400166:	b113      	cbz	r3, 40016e <__do_global_dtors_aux+0x12>
  400168:	4804      	ldr	r0, [pc, #16]	; (40017c <__do_global_dtors_aux+0x20>)
  40016a:	f3af 8000 	nop.w
  40016e:	2301      	movs	r3, #1
  400170:	7023      	strb	r3, [r4, #0]
  400172:	bd10      	pop	{r4, pc}
  400174:	204009e0 	.word	0x204009e0
  400178:	00000000 	.word	0x00000000
  40017c:	0040b378 	.word	0x0040b378

00400180 <frame_dummy>:
  400180:	4b0c      	ldr	r3, [pc, #48]	; (4001b4 <frame_dummy+0x34>)
  400182:	b143      	cbz	r3, 400196 <frame_dummy+0x16>
  400184:	480c      	ldr	r0, [pc, #48]	; (4001b8 <frame_dummy+0x38>)
  400186:	490d      	ldr	r1, [pc, #52]	; (4001bc <frame_dummy+0x3c>)
  400188:	b510      	push	{r4, lr}
  40018a:	f3af 8000 	nop.w
  40018e:	480c      	ldr	r0, [pc, #48]	; (4001c0 <frame_dummy+0x40>)
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	b923      	cbnz	r3, 40019e <frame_dummy+0x1e>
  400194:	bd10      	pop	{r4, pc}
  400196:	480a      	ldr	r0, [pc, #40]	; (4001c0 <frame_dummy+0x40>)
  400198:	6803      	ldr	r3, [r0, #0]
  40019a:	b933      	cbnz	r3, 4001aa <frame_dummy+0x2a>
  40019c:	4770      	bx	lr
  40019e:	4b09      	ldr	r3, [pc, #36]	; (4001c4 <frame_dummy+0x44>)
  4001a0:	2b00      	cmp	r3, #0
  4001a2:	d0f7      	beq.n	400194 <frame_dummy+0x14>
  4001a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a8:	4718      	bx	r3
  4001aa:	4b06      	ldr	r3, [pc, #24]	; (4001c4 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f5      	beq.n	40019c <frame_dummy+0x1c>
  4001b0:	4718      	bx	r3
  4001b2:	bf00      	nop
  4001b4:	00000000 	.word	0x00000000
  4001b8:	0040b378 	.word	0x0040b378
  4001bc:	204009e4 	.word	0x204009e4
  4001c0:	0040b378 	.word	0x0040b378
  4001c4:	00000000 	.word	0x00000000

004001c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001c8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ca:	4810      	ldr	r0, [pc, #64]	; (40020c <sysclk_init+0x44>)
  4001cc:	4b10      	ldr	r3, [pc, #64]	; (400210 <sysclk_init+0x48>)
  4001ce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001d0:	213e      	movs	r1, #62	; 0x3e
  4001d2:	2000      	movs	r0, #0
  4001d4:	4b0f      	ldr	r3, [pc, #60]	; (400214 <sysclk_init+0x4c>)
  4001d6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001d8:	4c0f      	ldr	r4, [pc, #60]	; (400218 <sysclk_init+0x50>)
  4001da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001dc:	2800      	cmp	r0, #0
  4001de:	d0fc      	beq.n	4001da <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001e0:	4b0e      	ldr	r3, [pc, #56]	; (40021c <sysclk_init+0x54>)
  4001e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001e4:	4a0e      	ldr	r2, [pc, #56]	; (400220 <sysclk_init+0x58>)
  4001e6:	4b0f      	ldr	r3, [pc, #60]	; (400224 <sysclk_init+0x5c>)
  4001e8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ea:	4c0f      	ldr	r4, [pc, #60]	; (400228 <sysclk_init+0x60>)
  4001ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001ee:	2800      	cmp	r0, #0
  4001f0:	d0fc      	beq.n	4001ec <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001f2:	2002      	movs	r0, #2
  4001f4:	4b0d      	ldr	r3, [pc, #52]	; (40022c <sysclk_init+0x64>)
  4001f6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0d      	ldr	r3, [pc, #52]	; (400230 <sysclk_init+0x68>)
  4001fc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001fe:	4b0d      	ldr	r3, [pc, #52]	; (400234 <sysclk_init+0x6c>)
  400200:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400202:	480d      	ldr	r0, [pc, #52]	; (400238 <sysclk_init+0x70>)
  400204:	4b02      	ldr	r3, [pc, #8]	; (400210 <sysclk_init+0x48>)
  400206:	4798      	blx	r3
  400208:	bd10      	pop	{r4, pc}
  40020a:	bf00      	nop
  40020c:	07270e00 	.word	0x07270e00
  400210:	00400f7d 	.word	0x00400f7d
  400214:	00400b29 	.word	0x00400b29
  400218:	00400b7d 	.word	0x00400b7d
  40021c:	00400b8d 	.word	0x00400b8d
  400220:	20183f01 	.word	0x20183f01
  400224:	400e0600 	.word	0x400e0600
  400228:	00400b9d 	.word	0x00400b9d
  40022c:	00400a8d 	.word	0x00400a8d
  400230:	00400ac5 	.word	0x00400ac5
  400234:	00400e71 	.word	0x00400e71
  400238:	08f0d180 	.word	0x08f0d180

0040023c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400240:	b980      	cbnz	r0, 400264 <_read+0x28>
  400242:	460c      	mov	r4, r1
  400244:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400246:	2a00      	cmp	r2, #0
  400248:	dd0f      	ble.n	40026a <_read+0x2e>
  40024a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40024c:	4e08      	ldr	r6, [pc, #32]	; (400270 <_read+0x34>)
  40024e:	4d09      	ldr	r5, [pc, #36]	; (400274 <_read+0x38>)
  400250:	6830      	ldr	r0, [r6, #0]
  400252:	4621      	mov	r1, r4
  400254:	682b      	ldr	r3, [r5, #0]
  400256:	4798      	blx	r3
		ptr++;
  400258:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40025a:	42bc      	cmp	r4, r7
  40025c:	d1f8      	bne.n	400250 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40025e:	4640      	mov	r0, r8
  400260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400264:	f04f 38ff 	mov.w	r8, #4294967295
  400268:	e7f9      	b.n	40025e <_read+0x22>
	for (; len > 0; --len) {
  40026a:	4680      	mov	r8, r0
  40026c:	e7f7      	b.n	40025e <_read+0x22>
  40026e:	bf00      	nop
  400270:	20401e64 	.word	0x20401e64
  400274:	20401e5c 	.word	0x20401e5c

00400278 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400278:	3801      	subs	r0, #1
  40027a:	2802      	cmp	r0, #2
  40027c:	d815      	bhi.n	4002aa <_write+0x32>
{
  40027e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400282:	460e      	mov	r6, r1
  400284:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400286:	b19a      	cbz	r2, 4002b0 <_write+0x38>
  400288:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40028a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002c4 <_write+0x4c>
  40028e:	4f0c      	ldr	r7, [pc, #48]	; (4002c0 <_write+0x48>)
  400290:	f8d8 0000 	ldr.w	r0, [r8]
  400294:	f815 1b01 	ldrb.w	r1, [r5], #1
  400298:	683b      	ldr	r3, [r7, #0]
  40029a:	4798      	blx	r3
  40029c:	2800      	cmp	r0, #0
  40029e:	db0a      	blt.n	4002b6 <_write+0x3e>
  4002a0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002a2:	3c01      	subs	r4, #1
  4002a4:	d1f4      	bne.n	400290 <_write+0x18>
  4002a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002aa:	f04f 30ff 	mov.w	r0, #4294967295
  4002ae:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b0:	4610      	mov	r0, r2
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002b6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002be:	bf00      	nop
  4002c0:	20401e60 	.word	0x20401e60
  4002c4:	20401e64 	.word	0x20401e64

004002c8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002c8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002ce:	4b3b      	ldr	r3, [pc, #236]	; (4003bc <board_init+0xf4>)
  4002d0:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002d2:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4002d6:	4a3a      	ldr	r2, [pc, #232]	; (4003c0 <board_init+0xf8>)
  4002d8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002da:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4002de:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002e8:	4b36      	ldr	r3, [pc, #216]	; (4003c4 <board_init+0xfc>)
  4002ea:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002ee:	f022 0201 	bic.w	r2, r2, #1
  4002f2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002f6:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4002fa:	f022 0201 	bic.w	r2, r2, #1
  4002fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400306:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40030a:	200a      	movs	r0, #10
  40030c:	4c2e      	ldr	r4, [pc, #184]	; (4003c8 <board_init+0x100>)
  40030e:	47a0      	blx	r4
  400310:	200b      	movs	r0, #11
  400312:	47a0      	blx	r4
  400314:	200c      	movs	r0, #12
  400316:	47a0      	blx	r4
  400318:	2010      	movs	r0, #16
  40031a:	47a0      	blx	r4
  40031c:	2011      	movs	r0, #17
  40031e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400320:	4b2a      	ldr	r3, [pc, #168]	; (4003cc <board_init+0x104>)
  400322:	f44f 7280 	mov.w	r2, #256	; 0x100
  400326:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40032c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40032e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400332:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400336:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400338:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40033c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40033e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400342:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400344:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40034a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40034c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400350:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400352:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400354:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400358:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40035a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40035e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400362:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400366:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40036a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40036c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400370:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400372:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400378:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40037a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40037e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400380:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400382:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400386:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400388:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40038a:	4a11      	ldr	r2, [pc, #68]	; (4003d0 <board_init+0x108>)
  40038c:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400390:	f043 0310 	orr.w	r3, r3, #16
  400394:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <board_init+0x10c>)
  40039a:	2210      	movs	r2, #16
  40039c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40039e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003a4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4003aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ac:	4311      	orrs	r1, r2
  4003ae:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4003b0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003b2:	4311      	orrs	r1, r2
  4003b4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003b6:	605a      	str	r2, [r3, #4]
  4003b8:	bd10      	pop	{r4, pc}
  4003ba:	bf00      	nop
  4003bc:	400e1850 	.word	0x400e1850
  4003c0:	5a00080c 	.word	0x5a00080c
  4003c4:	e000ed00 	.word	0xe000ed00
  4003c8:	00400bad 	.word	0x00400bad
  4003cc:	400e1200 	.word	0x400e1200
  4003d0:	40088000 	.word	0x40088000
  4003d4:	400e1000 	.word	0x400e1000

004003d8 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003da:	b083      	sub	sp, #12
  4003dc:	4604      	mov	r4, r0
  4003de:	460f      	mov	r7, r1
  4003e0:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4003e2:	6803      	ldr	r3, [r0, #0]
  4003e4:	f043 0310 	orr.w	r3, r3, #16
  4003e8:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  4003ea:	ab01      	add	r3, sp, #4
  4003ec:	2201      	movs	r2, #1
  4003ee:	4d36      	ldr	r5, [pc, #216]	; (4004c8 <ethernet_phy_set_link+0xf0>)
  4003f0:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4003f2:	b958      	cbnz	r0, 40040c <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  4003f4:	9b01      	ldr	r3, [sp, #4]
  4003f6:	f013 0f04 	tst.w	r3, #4
  4003fa:	d10d      	bne.n	400418 <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4003fc:	6823      	ldr	r3, [r4, #0]
  4003fe:	f023 0310 	bic.w	r3, r3, #16
  400402:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  400404:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  400406:	4618      	mov	r0, r3
  400408:	b003      	add	sp, #12
  40040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40040c:	4603      	mov	r3, r0
  40040e:	6822      	ldr	r2, [r4, #0]
  400410:	f022 0210 	bic.w	r2, r2, #16
  400414:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400416:	e7f6      	b.n	400406 <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  400418:	b92e      	cbnz	r6, 400426 <ethernet_phy_set_link+0x4e>
  40041a:	6823      	ldr	r3, [r4, #0]
  40041c:	f023 0310 	bic.w	r3, r3, #16
  400420:	6023      	str	r3, [r4, #0]
		return uc_rc;
  400422:	4633      	mov	r3, r6
  400424:	e7ef      	b.n	400406 <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400426:	466b      	mov	r3, sp
  400428:	221e      	movs	r2, #30
  40042a:	4639      	mov	r1, r7
  40042c:	4620      	mov	r0, r4
  40042e:	4d26      	ldr	r5, [pc, #152]	; (4004c8 <ethernet_phy_set_link+0xf0>)
  400430:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  400432:	4603      	mov	r3, r0
  400434:	b950      	cbnz	r0, 40044c <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400436:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400438:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  40043c:	d00b      	beq.n	400456 <ethernet_phy_set_link+0x7e>
  40043e:	9900      	ldr	r1, [sp, #0]
  400440:	f011 0f05 	tst.w	r1, #5
  400444:	bf0c      	ite	eq
  400446:	2101      	moveq	r1, #1
  400448:	2100      	movne	r1, #0
  40044a:	e005      	b.n	400458 <ethernet_phy_set_link+0x80>
  40044c:	6822      	ldr	r2, [r4, #0]
  40044e:	f022 0210 	bic.w	r2, r2, #16
  400452:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400454:	e7d7      	b.n	400406 <ethernet_phy_set_link+0x2e>
  400456:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400458:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  40045c:	d003      	beq.n	400466 <ethernet_phy_set_link+0x8e>
  40045e:	9800      	ldr	r0, [sp, #0]
  400460:	f010 0f02 	tst.w	r0, #2
  400464:	d127      	bne.n	4004b6 <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400466:	f412 6f00 	tst.w	r2, #2048	; 0x800
  40046a:	d003      	beq.n	400474 <ethernet_phy_set_link+0x9c>
  40046c:	9a00      	ldr	r2, [sp, #0]
  40046e:	f012 0f01 	tst.w	r2, #1
  400472:	d111      	bne.n	400498 <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400474:	b191      	cbz	r1, 40049c <ethernet_phy_set_link+0xc4>
  400476:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400478:	6861      	ldr	r1, [r4, #4]
  40047a:	f041 0101 	orr.w	r1, r1, #1
  40047e:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  400480:	b1a2      	cbz	r2, 4004ac <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400482:	6862      	ldr	r2, [r4, #4]
  400484:	f042 0202 	orr.w	r2, r2, #2
  400488:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40048a:	6822      	ldr	r2, [r4, #0]
  40048c:	f022 0210 	bic.w	r2, r2, #16
  400490:	6022      	str	r2, [r4, #0]
	return uc_rc;
  400492:	e7b8      	b.n	400406 <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  400494:	461a      	mov	r2, r3
  400496:	e7ef      	b.n	400478 <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  400498:	461a      	mov	r2, r3
  40049a:	e000      	b.n	40049e <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  40049c:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  40049e:	6861      	ldr	r1, [r4, #4]
  4004a0:	f021 0101 	bic.w	r1, r1, #1
  4004a4:	6061      	str	r1, [r4, #4]
  4004a6:	e7eb      	b.n	400480 <ethernet_phy_set_link+0xa8>
  4004a8:	461a      	mov	r2, r3
  4004aa:	e7f8      	b.n	40049e <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4004ac:	6862      	ldr	r2, [r4, #4]
  4004ae:	f022 0202 	bic.w	r2, r2, #2
  4004b2:	6062      	str	r2, [r4, #4]
  4004b4:	e7e9      	b.n	40048a <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4004b6:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4004ba:	d0eb      	beq.n	400494 <ethernet_phy_set_link+0xbc>
  4004bc:	9a00      	ldr	r2, [sp, #0]
  4004be:	f012 0f01 	tst.w	r2, #1
  4004c2:	d1f1      	bne.n	4004a8 <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4004c4:	461a      	mov	r2, r3
  4004c6:	e7d7      	b.n	400478 <ethernet_phy_set_link+0xa0>
  4004c8:	0040082d 	.word	0x0040082d

004004cc <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4004cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004d0:	b082      	sub	sp, #8
  4004d2:	4604      	mov	r4, r0
  4004d4:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4004d6:	6803      	ldr	r3, [r0, #0]
  4004d8:	f043 0310 	orr.w	r3, r3, #16
  4004dc:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4004de:	ab01      	add	r3, sp, #4
  4004e0:	2200      	movs	r2, #0
  4004e2:	4e5d      	ldr	r6, [pc, #372]	; (400658 <ethernet_phy_auto_negotiate+0x18c>)
  4004e4:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4004e6:	b140      	cbz	r0, 4004fa <ethernet_phy_auto_negotiate+0x2e>
  4004e8:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4004ea:	6822      	ldr	r2, [r4, #0]
  4004ec:	f022 0210 	bic.w	r2, r2, #16
  4004f0:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  4004f2:	4618      	mov	r0, r3
  4004f4:	b002      	add	sp, #8
  4004f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  4004fa:	9b01      	ldr	r3, [sp, #4]
  4004fc:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400504:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400506:	2200      	movs	r2, #0
  400508:	4629      	mov	r1, r5
  40050a:	4620      	mov	r0, r4
  40050c:	4e53      	ldr	r6, [pc, #332]	; (40065c <ethernet_phy_auto_negotiate+0x190>)
  40050e:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400510:	4603      	mov	r3, r0
  400512:	b120      	cbz	r0, 40051e <ethernet_phy_auto_negotiate+0x52>
  400514:	6822      	ldr	r2, [r4, #0]
  400516:	f022 0210 	bic.w	r2, r2, #16
  40051a:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40051c:	e7e9      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  40051e:	f240 13e1 	movw	r3, #481	; 0x1e1
  400522:	2204      	movs	r2, #4
  400524:	4629      	mov	r1, r5
  400526:	4620      	mov	r0, r4
  400528:	4e4c      	ldr	r6, [pc, #304]	; (40065c <ethernet_phy_auto_negotiate+0x190>)
  40052a:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40052c:	4603      	mov	r3, r0
  40052e:	b120      	cbz	r0, 40053a <ethernet_phy_auto_negotiate+0x6e>
  400530:	6822      	ldr	r2, [r4, #0]
  400532:	f022 0210 	bic.w	r2, r2, #16
  400536:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400538:	e7db      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  40053a:	ab01      	add	r3, sp, #4
  40053c:	2200      	movs	r2, #0
  40053e:	4629      	mov	r1, r5
  400540:	4620      	mov	r0, r4
  400542:	4e45      	ldr	r6, [pc, #276]	; (400658 <ethernet_phy_auto_negotiate+0x18c>)
  400544:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400546:	4603      	mov	r3, r0
  400548:	b120      	cbz	r0, 400554 <ethernet_phy_auto_negotiate+0x88>
  40054a:	6822      	ldr	r2, [r4, #0]
  40054c:	f022 0210 	bic.w	r2, r2, #16
  400550:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400552:	e7ce      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400554:	9b01      	ldr	r3, [sp, #4]
  400556:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  40055a:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40055c:	2200      	movs	r2, #0
  40055e:	4629      	mov	r1, r5
  400560:	4620      	mov	r0, r4
  400562:	4e3e      	ldr	r6, [pc, #248]	; (40065c <ethernet_phy_auto_negotiate+0x190>)
  400564:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400566:	4603      	mov	r3, r0
  400568:	b120      	cbz	r0, 400574 <ethernet_phy_auto_negotiate+0xa8>
  40056a:	6822      	ldr	r2, [r4, #0]
  40056c:	f022 0210 	bic.w	r2, r2, #16
  400570:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400572:	e7be      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400574:	9b01      	ldr	r3, [sp, #4]
  400576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40057e:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400580:	2200      	movs	r2, #0
  400582:	4629      	mov	r1, r5
  400584:	4620      	mov	r0, r4
  400586:	4e35      	ldr	r6, [pc, #212]	; (40065c <ethernet_phy_auto_negotiate+0x190>)
  400588:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40058a:	4603      	mov	r3, r0
  40058c:	b9b0      	cbnz	r0, 4005bc <ethernet_phy_auto_negotiate+0xf0>
  40058e:	4e34      	ldr	r6, [pc, #208]	; (400660 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  400590:	f04f 0801 	mov.w	r8, #1
  400594:	4f30      	ldr	r7, [pc, #192]	; (400658 <ethernet_phy_auto_negotiate+0x18c>)
  400596:	ab01      	add	r3, sp, #4
  400598:	4642      	mov	r2, r8
  40059a:	4629      	mov	r1, r5
  40059c:	4620      	mov	r0, r4
  40059e:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4005a0:	4603      	mov	r3, r0
  4005a2:	b980      	cbnz	r0, 4005c6 <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4005a4:	9b01      	ldr	r3, [sp, #4]
  4005a6:	f013 0f20 	tst.w	r3, #32
  4005aa:	d111      	bne.n	4005d0 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4005ac:	3e01      	subs	r6, #1
  4005ae:	d1f2      	bne.n	400596 <ethernet_phy_auto_negotiate+0xca>
  4005b0:	6823      	ldr	r3, [r4, #0]
  4005b2:	f023 0310 	bic.w	r3, r3, #16
  4005b6:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4005b8:	2301      	movs	r3, #1
  4005ba:	e79a      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
  4005bc:	6822      	ldr	r2, [r4, #0]
  4005be:	f022 0210 	bic.w	r2, r2, #16
  4005c2:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4005c4:	e795      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
  4005c6:	6822      	ldr	r2, [r4, #0]
  4005c8:	f022 0210 	bic.w	r2, r2, #16
  4005cc:	6022      	str	r2, [r4, #0]
			return uc_rc;
  4005ce:	e790      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  4005d0:	466b      	mov	r3, sp
  4005d2:	2205      	movs	r2, #5
  4005d4:	4629      	mov	r1, r5
  4005d6:	4620      	mov	r0, r4
  4005d8:	4d1f      	ldr	r5, [pc, #124]	; (400658 <ethernet_phy_auto_negotiate+0x18c>)
  4005da:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4005dc:	4603      	mov	r3, r0
  4005de:	b980      	cbnz	r0, 400602 <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4005e0:	9a00      	ldr	r2, [sp, #0]
  4005e2:	f412 7f80 	tst.w	r2, #256	; 0x100
  4005e6:	d113      	bne.n	400610 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4005e8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4005ec:	d12c      	bne.n	400648 <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  4005ee:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  4005f2:	bf08      	it	eq
  4005f4:	4602      	moveq	r2, r0
  4005f6:	d109      	bne.n	40060c <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4005f8:	6861      	ldr	r1, [r4, #4]
  4005fa:	f021 0101 	bic.w	r1, r1, #1
  4005fe:	6061      	str	r1, [r4, #4]
  400600:	e00b      	b.n	40061a <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400602:	6822      	ldr	r2, [r4, #0]
  400604:	f022 0210 	bic.w	r2, r2, #16
  400608:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40060a:	e772      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  40060c:	4602      	mov	r2, r0
  40060e:	e000      	b.n	400612 <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  400610:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400612:	6861      	ldr	r1, [r4, #4]
  400614:	f041 0101 	orr.w	r1, r1, #1
  400618:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  40061a:	b1ba      	cbz	r2, 40064c <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  40061c:	6862      	ldr	r2, [r4, #4]
  40061e:	f042 0202 	orr.w	r2, r2, #2
  400622:	6062      	str	r2, [r4, #4]
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
			break;

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  400624:	68e2      	ldr	r2, [r4, #12]
  400626:	f022 0201 	bic.w	r2, r2, #1
  40062a:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  40062c:	4a0d      	ldr	r2, [pc, #52]	; (400664 <ethernet_phy_auto_negotiate+0x198>)
  40062e:	6811      	ldr	r1, [r2, #0]
  400630:	f041 0108 	orr.w	r1, r1, #8
  400634:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400636:	6811      	ldr	r1, [r2, #0]
  400638:	f041 0104 	orr.w	r1, r1, #4
  40063c:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40063e:	6822      	ldr	r2, [r4, #0]
  400640:	f022 0210 	bic.w	r2, r2, #16
  400644:	6022      	str	r2, [r4, #0]
	return uc_rc;
  400646:	e754      	b.n	4004f2 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  400648:	2201      	movs	r2, #1
  40064a:	e7d5      	b.n	4005f8 <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  40064c:	6862      	ldr	r2, [r4, #4]
  40064e:	f022 0202 	bic.w	r2, r2, #2
  400652:	6062      	str	r2, [r4, #4]
  400654:	e7e6      	b.n	400624 <ethernet_phy_auto_negotiate+0x158>
  400656:	bf00      	nop
  400658:	0040082d 	.word	0x0040082d
  40065c:	0040088d 	.word	0x0040088d
  400660:	000f4240 	.word	0x000f4240
  400664:	40050000 	.word	0x40050000

00400668 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40066c:	b083      	sub	sp, #12
  40066e:	4605      	mov	r5, r0
  400670:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400672:	6803      	ldr	r3, [r0, #0]
  400674:	f043 0310 	orr.w	r3, r3, #16
  400678:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  40067a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40067e:	ae02      	add	r6, sp, #8
  400680:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  400684:	2200      	movs	r2, #0
  400686:	4c0e      	ldr	r4, [pc, #56]	; (4006c0 <ethernet_phy_reset+0x58>)
  400688:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  40068a:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  40068c:	f04f 0800 	mov.w	r8, #0
  400690:	4f0c      	ldr	r7, [pc, #48]	; (4006c4 <ethernet_phy_reset+0x5c>)
  400692:	4633      	mov	r3, r6
  400694:	4642      	mov	r2, r8
  400696:	4649      	mov	r1, r9
  400698:	4628      	mov	r0, r5
  40069a:	47b8      	blx	r7
		ul_timeout--;
  40069c:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  40069e:	9b01      	ldr	r3, [sp, #4]
  4006a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4006a4:	d001      	beq.n	4006aa <ethernet_phy_reset+0x42>
  4006a6:	2c00      	cmp	r4, #0
  4006a8:	d1f3      	bne.n	400692 <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4006aa:	682b      	ldr	r3, [r5, #0]
  4006ac:	f023 0310 	bic.w	r3, r3, #16
  4006b0:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4006b2:	fab4 f084 	clz	r0, r4
  4006b6:	0940      	lsrs	r0, r0, #5
  4006b8:	b003      	add	sp, #12
  4006ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4006be:	bf00      	nop
  4006c0:	0040088d 	.word	0x0040088d
  4006c4:	0040082d 	.word	0x0040082d

004006c8 <ethernet_phy_init>:
{
  4006c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4006cc:	b085      	sub	sp, #20
  4006ce:	4606      	mov	r6, r0
  4006d0:	4688      	mov	r8, r1
  4006d2:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  4006d4:	2401      	movs	r4, #1
  4006d6:	9400      	str	r4, [sp, #0]
  4006d8:	2300      	movs	r3, #0
  4006da:	4622      	mov	r2, r4
  4006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4006e0:	4843      	ldr	r0, [pc, #268]	; (4007f0 <ethernet_phy_init+0x128>)
  4006e2:	4f44      	ldr	r7, [pc, #272]	; (4007f4 <ethernet_phy_init+0x12c>)
  4006e4:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4006e6:	4622      	mov	r2, r4
  4006e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4006ec:	4842      	ldr	r0, [pc, #264]	; (4007f8 <ethernet_phy_init+0x130>)
  4006ee:	4b43      	ldr	r3, [pc, #268]	; (4007fc <ethernet_phy_init+0x134>)
  4006f0:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  4006f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4006f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006fa:	4841      	ldr	r0, [pc, #260]	; (400800 <ethernet_phy_init+0x138>)
  4006fc:	4b41      	ldr	r3, [pc, #260]	; (400804 <ethernet_phy_init+0x13c>)
  4006fe:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  400700:	4641      	mov	r1, r8
  400702:	4841      	ldr	r0, [pc, #260]	; (400808 <ethernet_phy_init+0x140>)
  400704:	4b41      	ldr	r3, [pc, #260]	; (40080c <ethernet_phy_init+0x144>)
  400706:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400708:	4b41      	ldr	r3, [pc, #260]	; (400810 <ethernet_phy_init+0x148>)
  40070a:	429d      	cmp	r5, r3
  40070c:	d85d      	bhi.n	4007ca <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  40070e:	4b41      	ldr	r3, [pc, #260]	; (400814 <ethernet_phy_init+0x14c>)
  400710:	429d      	cmp	r5, r3
  400712:	d80f      	bhi.n	400734 <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400714:	4b40      	ldr	r3, [pc, #256]	; (400818 <ethernet_phy_init+0x150>)
  400716:	429d      	cmp	r5, r3
  400718:	d83e      	bhi.n	400798 <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  40071a:	4b40      	ldr	r3, [pc, #256]	; (40081c <ethernet_phy_init+0x154>)
  40071c:	429d      	cmp	r5, r3
  40071e:	d83e      	bhi.n	40079e <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400720:	4b3f      	ldr	r3, [pc, #252]	; (400820 <ethernet_phy_init+0x158>)
  400722:	429d      	cmp	r5, r3
  400724:	d83e      	bhi.n	4007a4 <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400726:	4b3f      	ldr	r3, [pc, #252]	; (400824 <ethernet_phy_init+0x15c>)
  400728:	429d      	cmp	r5, r3
  40072a:	bf8c      	ite	hi
  40072c:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  400730:	2300      	movls	r3, #0
  400732:	e001      	b.n	400738 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400734:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400738:	6872      	ldr	r2, [r6, #4]
  40073a:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  40073e:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400740:	6875      	ldr	r5, [r6, #4]
  400742:	431d      	orrs	r5, r3
  400744:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  400746:	ab04      	add	r3, sp, #16
  400748:	2200      	movs	r2, #0
  40074a:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40074e:	6832      	ldr	r2, [r6, #0]
  400750:	f042 0210 	orr.w	r2, r2, #16
  400754:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400756:	2202      	movs	r2, #2
  400758:	4641      	mov	r1, r8
  40075a:	4630      	mov	r0, r6
  40075c:	4c32      	ldr	r4, [pc, #200]	; (400828 <ethernet_phy_init+0x160>)
  40075e:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  400760:	9b03      	ldr	r3, [sp, #12]
  400762:	2b22      	cmp	r3, #34	; 0x22
  400764:	d035      	beq.n	4007d2 <ethernet_phy_init+0x10a>
  400766:	4644      	mov	r4, r8
  400768:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  40076a:	f04f 0902 	mov.w	r9, #2
  40076e:	4f2e      	ldr	r7, [pc, #184]	; (400828 <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400770:	3401      	adds	r4, #1
  400772:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400776:	ab03      	add	r3, sp, #12
  400778:	464a      	mov	r2, r9
  40077a:	4621      	mov	r1, r4
  40077c:	4630      	mov	r0, r6
  40077e:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  400780:	9b03      	ldr	r3, [sp, #12]
  400782:	2b22      	cmp	r3, #34	; 0x22
  400784:	d011      	beq.n	4007aa <ethernet_phy_init+0xe2>
  400786:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400788:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  40078c:	d1f0      	bne.n	400770 <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40078e:	6833      	ldr	r3, [r6, #0]
  400790:	f023 0310 	bic.w	r3, r3, #16
  400794:	6033      	str	r3, [r6, #0]
  400796:	e018      	b.n	4007ca <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  400798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40079c:	e7cc      	b.n	400738 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  40079e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4007a2:	e7c9      	b.n	400738 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  4007a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4007a8:	e7c6      	b.n	400738 <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4007aa:	6833      	ldr	r3, [r6, #0]
  4007ac:	f023 0310 	bic.w	r3, r3, #16
  4007b0:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4007b2:	ab03      	add	r3, sp, #12
  4007b4:	2201      	movs	r2, #1
  4007b6:	4621      	mov	r1, r4
  4007b8:	4630      	mov	r0, r6
  4007ba:	4d1b      	ldr	r5, [pc, #108]	; (400828 <ethernet_phy_init+0x160>)
  4007bc:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  4007be:	45a0      	cmp	r8, r4
  4007c0:	d003      	beq.n	4007ca <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  4007c2:	4641      	mov	r1, r8
  4007c4:	4630      	mov	r0, r6
  4007c6:	4b11      	ldr	r3, [pc, #68]	; (40080c <ethernet_phy_init+0x144>)
  4007c8:	4798      	blx	r3
}
  4007ca:	2000      	movs	r0, #0
  4007cc:	b005      	add	sp, #20
  4007ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4007d2:	6833      	ldr	r3, [r6, #0]
  4007d4:	f023 0310 	bic.w	r3, r3, #16
  4007d8:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  4007da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4007de:	d0f4      	beq.n	4007ca <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4007e0:	ab03      	add	r3, sp, #12
  4007e2:	2201      	movs	r2, #1
  4007e4:	4641      	mov	r1, r8
  4007e6:	4630      	mov	r0, r6
  4007e8:	4c0f      	ldr	r4, [pc, #60]	; (400828 <ethernet_phy_init+0x160>)
  4007ea:	47a0      	blx	r4
  4007ec:	e7ed      	b.n	4007ca <ethernet_phy_init+0x102>
  4007ee:	bf00      	nop
  4007f0:	400e1200 	.word	0x400e1200
  4007f4:	004009a9 	.word	0x004009a9
  4007f8:	400e0e00 	.word	0x400e0e00
  4007fc:	00400973 	.word	0x00400973
  400800:	400e1400 	.word	0x400e1400
  400804:	004008e1 	.word	0x004008e1
  400808:	40050000 	.word	0x40050000
  40080c:	00400669 	.word	0x00400669
  400810:	0e4e1c00 	.word	0x0e4e1c00
  400814:	09896800 	.word	0x09896800
  400818:	07270e00 	.word	0x07270e00
  40081c:	04c4b400 	.word	0x04c4b400
  400820:	02625a00 	.word	0x02625a00
  400824:	01312d00 	.word	0x01312d00
  400828:	0040082d 	.word	0x0040082d

0040082c <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  40082c:	b410      	push	{r4}
  40082e:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400830:	6884      	ldr	r4, [r0, #8]
  400832:	f014 0f04 	tst.w	r4, #4
  400836:	d0fb      	beq.n	400830 <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  400838:	0492      	lsls	r2, r2, #18
  40083a:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  40083e:	4a11      	ldr	r2, [pc, #68]	; (400884 <gmac_phy_read+0x58>)
  400840:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  400842:	05c9      	lsls	r1, r1, #23
  400844:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  400848:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  40084a:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  40084c:	2200      	movs	r2, #0
  40084e:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  400850:	490d      	ldr	r1, [pc, #52]	; (400888 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  400852:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  400854:	f012 0f04 	tst.w	r2, #4
  400858:	d107      	bne.n	40086a <gmac_phy_read+0x3e>
		ul_retry_count++;
  40085a:	9a01      	ldr	r2, [sp, #4]
  40085c:	3201      	adds	r2, #1
  40085e:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  400860:	9a01      	ldr	r2, [sp, #4]
  400862:	428a      	cmp	r2, r1
  400864:	d9f5      	bls.n	400852 <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  400866:	2001      	movs	r0, #1
  400868:	e007      	b.n	40087a <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40086a:	6882      	ldr	r2, [r0, #8]
  40086c:	f012 0f04 	tst.w	r2, #4
  400870:	d0fb      	beq.n	40086a <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  400872:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  400874:	b292      	uxth	r2, r2
  400876:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  400878:	2000      	movs	r0, #0
}
  40087a:	b003      	add	sp, #12
  40087c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400880:	4770      	bx	lr
  400882:	bf00      	nop
  400884:	60020000 	.word	0x60020000
  400888:	000f423f 	.word	0x000f423f

0040088c <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  40088c:	b410      	push	{r4}
  40088e:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400890:	6884      	ldr	r4, [r0, #8]
  400892:	f014 0f04 	tst.w	r4, #4
  400896:	d0fb      	beq.n	400890 <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  400898:	0492      	lsls	r2, r2, #18
  40089a:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  40089e:	4a0e      	ldr	r2, [pc, #56]	; (4008d8 <gmac_phy_write+0x4c>)
  4008a0:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  4008a2:	05c9      	lsls	r1, r1, #23
  4008a4:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  4008a8:	430a      	orrs	r2, r1
  4008aa:	b29b      	uxth	r3, r3
  4008ac:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  4008ae:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  4008b0:	2300      	movs	r3, #0
  4008b2:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  4008b4:	4a09      	ldr	r2, [pc, #36]	; (4008dc <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  4008b6:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  4008b8:	f013 0f04 	tst.w	r3, #4
  4008bc:	d107      	bne.n	4008ce <gmac_phy_write+0x42>
		ul_retry_count++;
  4008be:	9b01      	ldr	r3, [sp, #4]
  4008c0:	3301      	adds	r3, #1
  4008c2:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  4008c4:	9b01      	ldr	r3, [sp, #4]
  4008c6:	4293      	cmp	r3, r2
  4008c8:	d9f5      	bls.n	4008b6 <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  4008ca:	2001      	movs	r0, #1
  4008cc:	e000      	b.n	4008d0 <gmac_phy_write+0x44>
	return GMAC_OK;
  4008ce:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  4008d0:	b003      	add	sp, #12
  4008d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008d6:	4770      	bx	lr
  4008d8:	50020000 	.word	0x50020000
  4008dc:	000f423f 	.word	0x000f423f

004008e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4008e0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008e2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4008e6:	d03a      	beq.n	40095e <pio_set_peripheral+0x7e>
  4008e8:	d813      	bhi.n	400912 <pio_set_peripheral+0x32>
  4008ea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4008ee:	d025      	beq.n	40093c <pio_set_peripheral+0x5c>
  4008f0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4008f4:	d10a      	bne.n	40090c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008f8:	4313      	orrs	r3, r2
  4008fa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4008fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008fe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400900:	400b      	ands	r3, r1
  400902:	ea23 0302 	bic.w	r3, r3, r2
  400906:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400908:	6042      	str	r2, [r0, #4]
  40090a:	4770      	bx	lr
	switch (ul_type) {
  40090c:	2900      	cmp	r1, #0
  40090e:	d1fb      	bne.n	400908 <pio_set_peripheral+0x28>
  400910:	4770      	bx	lr
  400912:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400916:	d021      	beq.n	40095c <pio_set_peripheral+0x7c>
  400918:	d809      	bhi.n	40092e <pio_set_peripheral+0x4e>
  40091a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40091e:	d1f3      	bne.n	400908 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400920:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400922:	4313      	orrs	r3, r2
  400924:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400926:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400928:	4313      	orrs	r3, r2
  40092a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40092c:	e7ec      	b.n	400908 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40092e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400932:	d013      	beq.n	40095c <pio_set_peripheral+0x7c>
  400934:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400938:	d010      	beq.n	40095c <pio_set_peripheral+0x7c>
  40093a:	e7e5      	b.n	400908 <pio_set_peripheral+0x28>
{
  40093c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40093e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400940:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400942:	43d3      	mvns	r3, r2
  400944:	4021      	ands	r1, r4
  400946:	461c      	mov	r4, r3
  400948:	4019      	ands	r1, r3
  40094a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40094c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40094e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400950:	400b      	ands	r3, r1
  400952:	4023      	ands	r3, r4
  400954:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400956:	6042      	str	r2, [r0, #4]
}
  400958:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40095e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400960:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400962:	400b      	ands	r3, r1
  400964:	ea23 0302 	bic.w	r3, r3, r2
  400968:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40096a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40096c:	4313      	orrs	r3, r2
  40096e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400970:	e7ca      	b.n	400908 <pio_set_peripheral+0x28>

00400972 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400972:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400974:	f012 0f01 	tst.w	r2, #1
  400978:	d10d      	bne.n	400996 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40097a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40097c:	f012 0f0a 	tst.w	r2, #10
  400980:	d00b      	beq.n	40099a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400982:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400984:	f012 0f02 	tst.w	r2, #2
  400988:	d109      	bne.n	40099e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40098a:	f012 0f08 	tst.w	r2, #8
  40098e:	d008      	beq.n	4009a2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400990:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400994:	e005      	b.n	4009a2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400996:	6641      	str	r1, [r0, #100]	; 0x64
  400998:	e7f0      	b.n	40097c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40099a:	6241      	str	r1, [r0, #36]	; 0x24
  40099c:	e7f2      	b.n	400984 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40099e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4009a2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4009a4:	6001      	str	r1, [r0, #0]
  4009a6:	4770      	bx	lr

004009a8 <pio_set_output>:
{
  4009a8:	b410      	push	{r4}
  4009aa:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4009ac:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4009ae:	b94c      	cbnz	r4, 4009c4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4009b0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4009b2:	b14b      	cbz	r3, 4009c8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4009b4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4009b6:	b94a      	cbnz	r2, 4009cc <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4009b8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4009ba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4009bc:	6001      	str	r1, [r0, #0]
}
  4009be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009c2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4009c4:	6641      	str	r1, [r0, #100]	; 0x64
  4009c6:	e7f4      	b.n	4009b2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4009c8:	6541      	str	r1, [r0, #84]	; 0x54
  4009ca:	e7f4      	b.n	4009b6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4009cc:	6301      	str	r1, [r0, #48]	; 0x30
  4009ce:	e7f4      	b.n	4009ba <pio_set_output+0x12>

004009d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009d2:	4770      	bx	lr

004009d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009d6:	4770      	bx	lr

004009d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009dc:	4604      	mov	r4, r0
  4009de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009e0:	4b0e      	ldr	r3, [pc, #56]	; (400a1c <pio_handler_process+0x44>)
  4009e2:	4798      	blx	r3
  4009e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4009e6:	4620      	mov	r0, r4
  4009e8:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <pio_handler_process+0x48>)
  4009ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4009ec:	4005      	ands	r5, r0
  4009ee:	d013      	beq.n	400a18 <pio_handler_process+0x40>
  4009f0:	4c0c      	ldr	r4, [pc, #48]	; (400a24 <pio_handler_process+0x4c>)
  4009f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4009f6:	e003      	b.n	400a00 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009f8:	42b4      	cmp	r4, r6
  4009fa:	d00d      	beq.n	400a18 <pio_handler_process+0x40>
  4009fc:	3410      	adds	r4, #16
		while (status != 0) {
  4009fe:	b15d      	cbz	r5, 400a18 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a00:	6820      	ldr	r0, [r4, #0]
  400a02:	4540      	cmp	r0, r8
  400a04:	d1f8      	bne.n	4009f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a06:	6861      	ldr	r1, [r4, #4]
  400a08:	4229      	tst	r1, r5
  400a0a:	d0f5      	beq.n	4009f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a0c:	68e3      	ldr	r3, [r4, #12]
  400a0e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a10:	6863      	ldr	r3, [r4, #4]
  400a12:	ea25 0503 	bic.w	r5, r5, r3
  400a16:	e7ef      	b.n	4009f8 <pio_handler_process+0x20>
  400a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a1c:	004009d1 	.word	0x004009d1
  400a20:	004009d5 	.word	0x004009d5
  400a24:	204009fc 	.word	0x204009fc

00400a28 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a28:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a2a:	210a      	movs	r1, #10
  400a2c:	4801      	ldr	r0, [pc, #4]	; (400a34 <PIOA_Handler+0xc>)
  400a2e:	4b02      	ldr	r3, [pc, #8]	; (400a38 <PIOA_Handler+0x10>)
  400a30:	4798      	blx	r3
  400a32:	bd08      	pop	{r3, pc}
  400a34:	400e0e00 	.word	0x400e0e00
  400a38:	004009d9 	.word	0x004009d9

00400a3c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a3c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400a3e:	210b      	movs	r1, #11
  400a40:	4801      	ldr	r0, [pc, #4]	; (400a48 <PIOB_Handler+0xc>)
  400a42:	4b02      	ldr	r3, [pc, #8]	; (400a4c <PIOB_Handler+0x10>)
  400a44:	4798      	blx	r3
  400a46:	bd08      	pop	{r3, pc}
  400a48:	400e1000 	.word	0x400e1000
  400a4c:	004009d9 	.word	0x004009d9

00400a50 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a50:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a52:	210c      	movs	r1, #12
  400a54:	4801      	ldr	r0, [pc, #4]	; (400a5c <PIOC_Handler+0xc>)
  400a56:	4b02      	ldr	r3, [pc, #8]	; (400a60 <PIOC_Handler+0x10>)
  400a58:	4798      	blx	r3
  400a5a:	bd08      	pop	{r3, pc}
  400a5c:	400e1200 	.word	0x400e1200
  400a60:	004009d9 	.word	0x004009d9

00400a64 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a64:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400a66:	2110      	movs	r1, #16
  400a68:	4801      	ldr	r0, [pc, #4]	; (400a70 <PIOD_Handler+0xc>)
  400a6a:	4b02      	ldr	r3, [pc, #8]	; (400a74 <PIOD_Handler+0x10>)
  400a6c:	4798      	blx	r3
  400a6e:	bd08      	pop	{r3, pc}
  400a70:	400e1400 	.word	0x400e1400
  400a74:	004009d9 	.word	0x004009d9

00400a78 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a78:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400a7a:	2111      	movs	r1, #17
  400a7c:	4801      	ldr	r0, [pc, #4]	; (400a84 <PIOE_Handler+0xc>)
  400a7e:	4b02      	ldr	r3, [pc, #8]	; (400a88 <PIOE_Handler+0x10>)
  400a80:	4798      	blx	r3
  400a82:	bd08      	pop	{r3, pc}
  400a84:	400e1600 	.word	0x400e1600
  400a88:	004009d9 	.word	0x004009d9

00400a8c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400a8c:	2803      	cmp	r0, #3
  400a8e:	d011      	beq.n	400ab4 <pmc_mck_set_division+0x28>
  400a90:	2804      	cmp	r0, #4
  400a92:	d012      	beq.n	400aba <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400a94:	2802      	cmp	r0, #2
  400a96:	bf0c      	ite	eq
  400a98:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400a9c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400a9e:	4a08      	ldr	r2, [pc, #32]	; (400ac0 <pmc_mck_set_division+0x34>)
  400aa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400aa6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400aa8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400aaa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400aac:	f013 0f08 	tst.w	r3, #8
  400ab0:	d0fb      	beq.n	400aaa <pmc_mck_set_division+0x1e>
}
  400ab2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400ab4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400ab8:	e7f1      	b.n	400a9e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400aba:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400abe:	e7ee      	b.n	400a9e <pmc_mck_set_division+0x12>
  400ac0:	400e0600 	.word	0x400e0600

00400ac4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ac4:	4a17      	ldr	r2, [pc, #92]	; (400b24 <pmc_switch_mck_to_pllack+0x60>)
  400ac6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400acc:	4318      	orrs	r0, r3
  400ace:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ad0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ad2:	f013 0f08 	tst.w	r3, #8
  400ad6:	d10a      	bne.n	400aee <pmc_switch_mck_to_pllack+0x2a>
  400ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400adc:	4911      	ldr	r1, [pc, #68]	; (400b24 <pmc_switch_mck_to_pllack+0x60>)
  400ade:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ae0:	f012 0f08 	tst.w	r2, #8
  400ae4:	d103      	bne.n	400aee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ae6:	3b01      	subs	r3, #1
  400ae8:	d1f9      	bne.n	400ade <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400aea:	2001      	movs	r0, #1
  400aec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400aee:	4a0d      	ldr	r2, [pc, #52]	; (400b24 <pmc_switch_mck_to_pllack+0x60>)
  400af0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400af2:	f023 0303 	bic.w	r3, r3, #3
  400af6:	f043 0302 	orr.w	r3, r3, #2
  400afa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400afc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400afe:	f013 0f08 	tst.w	r3, #8
  400b02:	d10a      	bne.n	400b1a <pmc_switch_mck_to_pllack+0x56>
  400b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b08:	4906      	ldr	r1, [pc, #24]	; (400b24 <pmc_switch_mck_to_pllack+0x60>)
  400b0a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b0c:	f012 0f08 	tst.w	r2, #8
  400b10:	d105      	bne.n	400b1e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b12:	3b01      	subs	r3, #1
  400b14:	d1f9      	bne.n	400b0a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400b16:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b18:	4770      	bx	lr
	return 0;
  400b1a:	2000      	movs	r0, #0
  400b1c:	4770      	bx	lr
  400b1e:	2000      	movs	r0, #0
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	400e0600 	.word	0x400e0600

00400b28 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b28:	b9a0      	cbnz	r0, 400b54 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b2a:	480e      	ldr	r0, [pc, #56]	; (400b64 <pmc_switch_mainck_to_xtal+0x3c>)
  400b2c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b2e:	0209      	lsls	r1, r1, #8
  400b30:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b32:	4a0d      	ldr	r2, [pc, #52]	; (400b68 <pmc_switch_mainck_to_xtal+0x40>)
  400b34:	401a      	ands	r2, r3
  400b36:	4b0d      	ldr	r3, [pc, #52]	; (400b6c <pmc_switch_mainck_to_xtal+0x44>)
  400b38:	4313      	orrs	r3, r2
  400b3a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b3c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b3e:	4602      	mov	r2, r0
  400b40:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b42:	f013 0f01 	tst.w	r3, #1
  400b46:	d0fb      	beq.n	400b40 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b48:	4a06      	ldr	r2, [pc, #24]	; (400b64 <pmc_switch_mainck_to_xtal+0x3c>)
  400b4a:	6a11      	ldr	r1, [r2, #32]
  400b4c:	4b08      	ldr	r3, [pc, #32]	; (400b70 <pmc_switch_mainck_to_xtal+0x48>)
  400b4e:	430b      	orrs	r3, r1
  400b50:	6213      	str	r3, [r2, #32]
  400b52:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b54:	4903      	ldr	r1, [pc, #12]	; (400b64 <pmc_switch_mainck_to_xtal+0x3c>)
  400b56:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b58:	4a06      	ldr	r2, [pc, #24]	; (400b74 <pmc_switch_mainck_to_xtal+0x4c>)
  400b5a:	401a      	ands	r2, r3
  400b5c:	4b06      	ldr	r3, [pc, #24]	; (400b78 <pmc_switch_mainck_to_xtal+0x50>)
  400b5e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b60:	620b      	str	r3, [r1, #32]
  400b62:	4770      	bx	lr
  400b64:	400e0600 	.word	0x400e0600
  400b68:	ffc8fffc 	.word	0xffc8fffc
  400b6c:	00370001 	.word	0x00370001
  400b70:	01370000 	.word	0x01370000
  400b74:	fec8fffc 	.word	0xfec8fffc
  400b78:	01370002 	.word	0x01370002

00400b7c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b7c:	4b02      	ldr	r3, [pc, #8]	; (400b88 <pmc_osc_is_ready_mainck+0xc>)
  400b7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b80:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b84:	4770      	bx	lr
  400b86:	bf00      	nop
  400b88:	400e0600 	.word	0x400e0600

00400b8c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b90:	4b01      	ldr	r3, [pc, #4]	; (400b98 <pmc_disable_pllack+0xc>)
  400b92:	629a      	str	r2, [r3, #40]	; 0x28
  400b94:	4770      	bx	lr
  400b96:	bf00      	nop
  400b98:	400e0600 	.word	0x400e0600

00400b9c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b9c:	4b02      	ldr	r3, [pc, #8]	; (400ba8 <pmc_is_locked_pllack+0xc>)
  400b9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ba0:	f000 0002 	and.w	r0, r0, #2
  400ba4:	4770      	bx	lr
  400ba6:	bf00      	nop
  400ba8:	400e0600 	.word	0x400e0600

00400bac <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400bac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400bb0:	4b05      	ldr	r3, [pc, #20]	; (400bc8 <pmc_enable_periph_clk+0x1c>)
  400bb2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400bb6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400bba:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400bbe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400bc2:	2000      	movs	r0, #0
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	400e0600 	.word	0x400e0600

00400bcc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400bcc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bce:	0189      	lsls	r1, r1, #6
  400bd0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400bd2:	2402      	movs	r4, #2
  400bd4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400bd6:	f04f 31ff 	mov.w	r1, #4294967295
  400bda:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400bdc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400bde:	605a      	str	r2, [r3, #4]
}
  400be0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400be4:	4770      	bx	lr

00400be6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400be6:	0189      	lsls	r1, r1, #6
  400be8:	2305      	movs	r3, #5
  400bea:	5043      	str	r3, [r0, r1]
  400bec:	4770      	bx	lr

00400bee <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400bee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400bf2:	61ca      	str	r2, [r1, #28]
  400bf4:	4770      	bx	lr

00400bf6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bf6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400bfa:	624a      	str	r2, [r1, #36]	; 0x24
  400bfc:	4770      	bx	lr

00400bfe <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400bfe:	b4f0      	push	{r4, r5, r6, r7}
  400c00:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c02:	2402      	movs	r4, #2
  400c04:	9401      	str	r4, [sp, #4]
  400c06:	2408      	movs	r4, #8
  400c08:	9402      	str	r4, [sp, #8]
  400c0a:	2420      	movs	r4, #32
  400c0c:	9403      	str	r4, [sp, #12]
  400c0e:	2480      	movs	r4, #128	; 0x80
  400c10:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400c12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c14:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c16:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c18:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c1c:	d814      	bhi.n	400c48 <tc_find_mck_divisor+0x4a>
  400c1e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c20:	42a0      	cmp	r0, r4
  400c22:	d217      	bcs.n	400c54 <tc_find_mck_divisor+0x56>
  400c24:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c26:	af01      	add	r7, sp, #4
  400c28:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400c2c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400c30:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400c32:	4284      	cmp	r4, r0
  400c34:	d30a      	bcc.n	400c4c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400c36:	4286      	cmp	r6, r0
  400c38:	d90d      	bls.n	400c56 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400c3a:	3501      	adds	r5, #1
	for (ul_index = 0;
  400c3c:	2d05      	cmp	r5, #5
  400c3e:	d1f3      	bne.n	400c28 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400c40:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400c42:	b006      	add	sp, #24
  400c44:	bcf0      	pop	{r4, r5, r6, r7}
  400c46:	4770      	bx	lr
			return 0;
  400c48:	2000      	movs	r0, #0
  400c4a:	e7fa      	b.n	400c42 <tc_find_mck_divisor+0x44>
  400c4c:	2000      	movs	r0, #0
  400c4e:	e7f8      	b.n	400c42 <tc_find_mck_divisor+0x44>
	return 1;
  400c50:	2001      	movs	r0, #1
  400c52:	e7f6      	b.n	400c42 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400c54:	2500      	movs	r5, #0
	if (p_uldiv) {
  400c56:	b12a      	cbz	r2, 400c64 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400c58:	a906      	add	r1, sp, #24
  400c5a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400c5e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400c62:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400c64:	2b00      	cmp	r3, #0
  400c66:	d0f3      	beq.n	400c50 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400c68:	601d      	str	r5, [r3, #0]
	return 1;
  400c6a:	2001      	movs	r0, #1
  400c6c:	e7e9      	b.n	400c42 <tc_find_mck_divisor+0x44>

00400c6e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c6e:	6943      	ldr	r3, [r0, #20]
  400c70:	f013 0f02 	tst.w	r3, #2
  400c74:	d002      	beq.n	400c7c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c76:	61c1      	str	r1, [r0, #28]
	return 0;
  400c78:	2000      	movs	r0, #0
  400c7a:	4770      	bx	lr
		return 1;
  400c7c:	2001      	movs	r0, #1
}
  400c7e:	4770      	bx	lr

00400c80 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400c80:	6943      	ldr	r3, [r0, #20]
  400c82:	f013 0f01 	tst.w	r3, #1
  400c86:	d003      	beq.n	400c90 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400c88:	6983      	ldr	r3, [r0, #24]
  400c8a:	700b      	strb	r3, [r1, #0]
	return 0;
  400c8c:	2000      	movs	r0, #0
  400c8e:	4770      	bx	lr
		return 1;
  400c90:	2001      	movs	r0, #1
}
  400c92:	4770      	bx	lr

00400c94 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400c94:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400c96:	010b      	lsls	r3, r1, #4
  400c98:	4293      	cmp	r3, r2
  400c9a:	d914      	bls.n	400cc6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400c9c:	00c9      	lsls	r1, r1, #3
  400c9e:	084b      	lsrs	r3, r1, #1
  400ca0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ca4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400ca8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400caa:	1e5c      	subs	r4, r3, #1
  400cac:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cb0:	428c      	cmp	r4, r1
  400cb2:	d901      	bls.n	400cb8 <usart_set_async_baudrate+0x24>
		return 1;
  400cb4:	2001      	movs	r0, #1
  400cb6:	e017      	b.n	400ce8 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cb8:	6841      	ldr	r1, [r0, #4]
  400cba:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400cbe:	6041      	str	r1, [r0, #4]
  400cc0:	e00c      	b.n	400cdc <usart_set_async_baudrate+0x48>
		return 1;
  400cc2:	2001      	movs	r0, #1
  400cc4:	e010      	b.n	400ce8 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cc6:	0859      	lsrs	r1, r3, #1
  400cc8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400ccc:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400cd0:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cd2:	1e5c      	subs	r4, r3, #1
  400cd4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cd8:	428c      	cmp	r4, r1
  400cda:	d8f2      	bhi.n	400cc2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400cdc:	0412      	lsls	r2, r2, #16
  400cde:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400ce2:	431a      	orrs	r2, r3
  400ce4:	6202      	str	r2, [r0, #32]

	return 0;
  400ce6:	2000      	movs	r0, #0
}
  400ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cec:	4770      	bx	lr
	...

00400cf0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400cf0:	4b08      	ldr	r3, [pc, #32]	; (400d14 <usart_reset+0x24>)
  400cf2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400cf6:	2300      	movs	r3, #0
  400cf8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400cfa:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400cfc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400cfe:	2388      	movs	r3, #136	; 0x88
  400d00:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d02:	2324      	movs	r3, #36	; 0x24
  400d04:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d06:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d0a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d10:	6003      	str	r3, [r0, #0]
  400d12:	4770      	bx	lr
  400d14:	55534100 	.word	0x55534100

00400d18 <usart_init_rs232>:
{
  400d18:	b570      	push	{r4, r5, r6, lr}
  400d1a:	4605      	mov	r5, r0
  400d1c:	460c      	mov	r4, r1
  400d1e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400d20:	4b0f      	ldr	r3, [pc, #60]	; (400d60 <usart_init_rs232+0x48>)
  400d22:	4798      	blx	r3
	ul_reg_val = 0;
  400d24:	2200      	movs	r2, #0
  400d26:	4b0f      	ldr	r3, [pc, #60]	; (400d64 <usart_init_rs232+0x4c>)
  400d28:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d2a:	b1a4      	cbz	r4, 400d56 <usart_init_rs232+0x3e>
  400d2c:	4632      	mov	r2, r6
  400d2e:	6821      	ldr	r1, [r4, #0]
  400d30:	4628      	mov	r0, r5
  400d32:	4b0d      	ldr	r3, [pc, #52]	; (400d68 <usart_init_rs232+0x50>)
  400d34:	4798      	blx	r3
  400d36:	4602      	mov	r2, r0
  400d38:	b978      	cbnz	r0, 400d5a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d3a:	6863      	ldr	r3, [r4, #4]
  400d3c:	68a1      	ldr	r1, [r4, #8]
  400d3e:	430b      	orrs	r3, r1
  400d40:	6921      	ldr	r1, [r4, #16]
  400d42:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d44:	68e1      	ldr	r1, [r4, #12]
  400d46:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d48:	4906      	ldr	r1, [pc, #24]	; (400d64 <usart_init_rs232+0x4c>)
  400d4a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400d4c:	6869      	ldr	r1, [r5, #4]
  400d4e:	430b      	orrs	r3, r1
  400d50:	606b      	str	r3, [r5, #4]
}
  400d52:	4610      	mov	r0, r2
  400d54:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400d56:	2201      	movs	r2, #1
  400d58:	e7fb      	b.n	400d52 <usart_init_rs232+0x3a>
  400d5a:	2201      	movs	r2, #1
  400d5c:	e7f9      	b.n	400d52 <usart_init_rs232+0x3a>
  400d5e:	bf00      	nop
  400d60:	00400cf1 	.word	0x00400cf1
  400d64:	20400a6c 	.word	0x20400a6c
  400d68:	00400c95 	.word	0x00400c95

00400d6c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400d6c:	2340      	movs	r3, #64	; 0x40
  400d6e:	6003      	str	r3, [r0, #0]
  400d70:	4770      	bx	lr

00400d72 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400d72:	2310      	movs	r3, #16
  400d74:	6003      	str	r3, [r0, #0]
  400d76:	4770      	bx	lr

00400d78 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d78:	6943      	ldr	r3, [r0, #20]
  400d7a:	f013 0f02 	tst.w	r3, #2
  400d7e:	d004      	beq.n	400d8a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400d80:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400d84:	61c1      	str	r1, [r0, #28]
	return 0;
  400d86:	2000      	movs	r0, #0
  400d88:	4770      	bx	lr
		return 1;
  400d8a:	2001      	movs	r0, #1
}
  400d8c:	4770      	bx	lr

00400d8e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d8e:	6943      	ldr	r3, [r0, #20]
  400d90:	f013 0f01 	tst.w	r3, #1
  400d94:	d005      	beq.n	400da2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d96:	6983      	ldr	r3, [r0, #24]
  400d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400d9c:	600b      	str	r3, [r1, #0]
	return 0;
  400d9e:	2000      	movs	r0, #0
  400da0:	4770      	bx	lr
		return 1;
  400da2:	2001      	movs	r0, #1
}
  400da4:	4770      	bx	lr

00400da6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400da6:	e7fe      	b.n	400da6 <Dummy_Handler>

00400da8 <Reset_Handler>:
{
  400da8:	b500      	push	{lr}
  400daa:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400dac:	4b25      	ldr	r3, [pc, #148]	; (400e44 <Reset_Handler+0x9c>)
  400dae:	4a26      	ldr	r2, [pc, #152]	; (400e48 <Reset_Handler+0xa0>)
  400db0:	429a      	cmp	r2, r3
  400db2:	d010      	beq.n	400dd6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400db4:	4b25      	ldr	r3, [pc, #148]	; (400e4c <Reset_Handler+0xa4>)
  400db6:	4a23      	ldr	r2, [pc, #140]	; (400e44 <Reset_Handler+0x9c>)
  400db8:	429a      	cmp	r2, r3
  400dba:	d20c      	bcs.n	400dd6 <Reset_Handler+0x2e>
  400dbc:	3b01      	subs	r3, #1
  400dbe:	1a9b      	subs	r3, r3, r2
  400dc0:	f023 0303 	bic.w	r3, r3, #3
  400dc4:	3304      	adds	r3, #4
  400dc6:	4413      	add	r3, r2
  400dc8:	491f      	ldr	r1, [pc, #124]	; (400e48 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400dca:	f851 0b04 	ldr.w	r0, [r1], #4
  400dce:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400dd2:	429a      	cmp	r2, r3
  400dd4:	d1f9      	bne.n	400dca <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400dd6:	4b1e      	ldr	r3, [pc, #120]	; (400e50 <Reset_Handler+0xa8>)
  400dd8:	4a1e      	ldr	r2, [pc, #120]	; (400e54 <Reset_Handler+0xac>)
  400dda:	429a      	cmp	r2, r3
  400ddc:	d20a      	bcs.n	400df4 <Reset_Handler+0x4c>
  400dde:	3b01      	subs	r3, #1
  400de0:	1a9b      	subs	r3, r3, r2
  400de2:	f023 0303 	bic.w	r3, r3, #3
  400de6:	3304      	adds	r3, #4
  400de8:	4413      	add	r3, r2
                *pDest++ = 0;
  400dea:	2100      	movs	r1, #0
  400dec:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400df0:	4293      	cmp	r3, r2
  400df2:	d1fb      	bne.n	400dec <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400df4:	4a18      	ldr	r2, [pc, #96]	; (400e58 <Reset_Handler+0xb0>)
  400df6:	4b19      	ldr	r3, [pc, #100]	; (400e5c <Reset_Handler+0xb4>)
  400df8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400dfc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400dfe:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e02:	fab3 f383 	clz	r3, r3
  400e06:	095b      	lsrs	r3, r3, #5
  400e08:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e0a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e0c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e10:	2200      	movs	r2, #0
  400e12:	4b13      	ldr	r3, [pc, #76]	; (400e60 <Reset_Handler+0xb8>)
  400e14:	701a      	strb	r2, [r3, #0]
	return flags;
  400e16:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e18:	4a12      	ldr	r2, [pc, #72]	; (400e64 <Reset_Handler+0xbc>)
  400e1a:	6813      	ldr	r3, [r2, #0]
  400e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e26:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e2a:	b129      	cbz	r1, 400e38 <Reset_Handler+0x90>
		cpu_irq_enable();
  400e2c:	2201      	movs	r2, #1
  400e2e:	4b0c      	ldr	r3, [pc, #48]	; (400e60 <Reset_Handler+0xb8>)
  400e30:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e36:	b662      	cpsie	i
        __libc_init_array();
  400e38:	4b0b      	ldr	r3, [pc, #44]	; (400e68 <Reset_Handler+0xc0>)
  400e3a:	4798      	blx	r3
        main();
  400e3c:	4b0b      	ldr	r3, [pc, #44]	; (400e6c <Reset_Handler+0xc4>)
  400e3e:	4798      	blx	r3
  400e40:	e7fe      	b.n	400e40 <Reset_Handler+0x98>
  400e42:	bf00      	nop
  400e44:	20400000 	.word	0x20400000
  400e48:	0040b378 	.word	0x0040b378
  400e4c:	204009e0 	.word	0x204009e0
  400e50:	204049f8 	.word	0x204049f8
  400e54:	204009e0 	.word	0x204009e0
  400e58:	e000ed00 	.word	0xe000ed00
  400e5c:	00400000 	.word	0x00400000
  400e60:	20400000 	.word	0x20400000
  400e64:	e000ed88 	.word	0xe000ed88
  400e68:	00406ee9 	.word	0x00406ee9
  400e6c:	00406e15 	.word	0x00406e15

00400e70 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400e70:	4b3b      	ldr	r3, [pc, #236]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e74:	f003 0303 	and.w	r3, r3, #3
  400e78:	2b01      	cmp	r3, #1
  400e7a:	d01d      	beq.n	400eb8 <SystemCoreClockUpdate+0x48>
  400e7c:	b183      	cbz	r3, 400ea0 <SystemCoreClockUpdate+0x30>
  400e7e:	2b02      	cmp	r3, #2
  400e80:	d036      	beq.n	400ef0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400e82:	4b37      	ldr	r3, [pc, #220]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e8a:	2b70      	cmp	r3, #112	; 0x70
  400e8c:	d05f      	beq.n	400f4e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400e8e:	4b34      	ldr	r3, [pc, #208]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400e92:	4934      	ldr	r1, [pc, #208]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400e94:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400e98:	680b      	ldr	r3, [r1, #0]
  400e9a:	40d3      	lsrs	r3, r2
  400e9c:	600b      	str	r3, [r1, #0]
  400e9e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ea0:	4b31      	ldr	r3, [pc, #196]	; (400f68 <SystemCoreClockUpdate+0xf8>)
  400ea2:	695b      	ldr	r3, [r3, #20]
  400ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ea8:	bf14      	ite	ne
  400eaa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400eae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400eb2:	4b2c      	ldr	r3, [pc, #176]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400eb4:	601a      	str	r2, [r3, #0]
  400eb6:	e7e4      	b.n	400e82 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400eb8:	4b29      	ldr	r3, [pc, #164]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400eba:	6a1b      	ldr	r3, [r3, #32]
  400ebc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ec0:	d003      	beq.n	400eca <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ec2:	4a2a      	ldr	r2, [pc, #168]	; (400f6c <SystemCoreClockUpdate+0xfc>)
  400ec4:	4b27      	ldr	r3, [pc, #156]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400ec6:	601a      	str	r2, [r3, #0]
  400ec8:	e7db      	b.n	400e82 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400eca:	4a29      	ldr	r2, [pc, #164]	; (400f70 <SystemCoreClockUpdate+0x100>)
  400ecc:	4b25      	ldr	r3, [pc, #148]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400ece:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ed0:	4b23      	ldr	r3, [pc, #140]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400ed2:	6a1b      	ldr	r3, [r3, #32]
  400ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ed8:	2b10      	cmp	r3, #16
  400eda:	d005      	beq.n	400ee8 <SystemCoreClockUpdate+0x78>
  400edc:	2b20      	cmp	r3, #32
  400ede:	d1d0      	bne.n	400e82 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400ee0:	4a22      	ldr	r2, [pc, #136]	; (400f6c <SystemCoreClockUpdate+0xfc>)
  400ee2:	4b20      	ldr	r3, [pc, #128]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400ee4:	601a      	str	r2, [r3, #0]
          break;
  400ee6:	e7cc      	b.n	400e82 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400ee8:	4a22      	ldr	r2, [pc, #136]	; (400f74 <SystemCoreClockUpdate+0x104>)
  400eea:	4b1e      	ldr	r3, [pc, #120]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400eec:	601a      	str	r2, [r3, #0]
          break;
  400eee:	e7c8      	b.n	400e82 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ef0:	4b1b      	ldr	r3, [pc, #108]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400ef2:	6a1b      	ldr	r3, [r3, #32]
  400ef4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ef8:	d016      	beq.n	400f28 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400efa:	4a1c      	ldr	r2, [pc, #112]	; (400f6c <SystemCoreClockUpdate+0xfc>)
  400efc:	4b19      	ldr	r3, [pc, #100]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400efe:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f00:	4b17      	ldr	r3, [pc, #92]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f04:	f003 0303 	and.w	r3, r3, #3
  400f08:	2b02      	cmp	r3, #2
  400f0a:	d1ba      	bne.n	400e82 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f0c:	4a14      	ldr	r2, [pc, #80]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400f0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f10:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f12:	4814      	ldr	r0, [pc, #80]	; (400f64 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f14:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f18:	6803      	ldr	r3, [r0, #0]
  400f1a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f1e:	b2d2      	uxtb	r2, r2
  400f20:	fbb3 f3f2 	udiv	r3, r3, r2
  400f24:	6003      	str	r3, [r0, #0]
  400f26:	e7ac      	b.n	400e82 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f28:	4a11      	ldr	r2, [pc, #68]	; (400f70 <SystemCoreClockUpdate+0x100>)
  400f2a:	4b0e      	ldr	r3, [pc, #56]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400f2c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f2e:	4b0c      	ldr	r3, [pc, #48]	; (400f60 <SystemCoreClockUpdate+0xf0>)
  400f30:	6a1b      	ldr	r3, [r3, #32]
  400f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f36:	2b10      	cmp	r3, #16
  400f38:	d005      	beq.n	400f46 <SystemCoreClockUpdate+0xd6>
  400f3a:	2b20      	cmp	r3, #32
  400f3c:	d1e0      	bne.n	400f00 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f3e:	4a0b      	ldr	r2, [pc, #44]	; (400f6c <SystemCoreClockUpdate+0xfc>)
  400f40:	4b08      	ldr	r3, [pc, #32]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400f42:	601a      	str	r2, [r3, #0]
          break;
  400f44:	e7dc      	b.n	400f00 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f46:	4a0b      	ldr	r2, [pc, #44]	; (400f74 <SystemCoreClockUpdate+0x104>)
  400f48:	4b06      	ldr	r3, [pc, #24]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400f4a:	601a      	str	r2, [r3, #0]
          break;
  400f4c:	e7d8      	b.n	400f00 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f4e:	4a05      	ldr	r2, [pc, #20]	; (400f64 <SystemCoreClockUpdate+0xf4>)
  400f50:	6813      	ldr	r3, [r2, #0]
  400f52:	4909      	ldr	r1, [pc, #36]	; (400f78 <SystemCoreClockUpdate+0x108>)
  400f54:	fba1 1303 	umull	r1, r3, r1, r3
  400f58:	085b      	lsrs	r3, r3, #1
  400f5a:	6013      	str	r3, [r2, #0]
  400f5c:	4770      	bx	lr
  400f5e:	bf00      	nop
  400f60:	400e0600 	.word	0x400e0600
  400f64:	20400004 	.word	0x20400004
  400f68:	400e1810 	.word	0x400e1810
  400f6c:	00b71b00 	.word	0x00b71b00
  400f70:	003d0900 	.word	0x003d0900
  400f74:	007a1200 	.word	0x007a1200
  400f78:	aaaaaaab 	.word	0xaaaaaaab

00400f7c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400f7c:	4b16      	ldr	r3, [pc, #88]	; (400fd8 <system_init_flash+0x5c>)
  400f7e:	4298      	cmp	r0, r3
  400f80:	d913      	bls.n	400faa <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400f82:	4b16      	ldr	r3, [pc, #88]	; (400fdc <system_init_flash+0x60>)
  400f84:	4298      	cmp	r0, r3
  400f86:	d915      	bls.n	400fb4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400f88:	4b15      	ldr	r3, [pc, #84]	; (400fe0 <system_init_flash+0x64>)
  400f8a:	4298      	cmp	r0, r3
  400f8c:	d916      	bls.n	400fbc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400f8e:	4b15      	ldr	r3, [pc, #84]	; (400fe4 <system_init_flash+0x68>)
  400f90:	4298      	cmp	r0, r3
  400f92:	d917      	bls.n	400fc4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400f94:	4b14      	ldr	r3, [pc, #80]	; (400fe8 <system_init_flash+0x6c>)
  400f96:	4298      	cmp	r0, r3
  400f98:	d918      	bls.n	400fcc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400f9a:	4b14      	ldr	r3, [pc, #80]	; (400fec <system_init_flash+0x70>)
  400f9c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f9e:	bf94      	ite	ls
  400fa0:	4a13      	ldrls	r2, [pc, #76]	; (400ff0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400fa2:	4a14      	ldrhi	r2, [pc, #80]	; (400ff4 <system_init_flash+0x78>)
  400fa4:	4b14      	ldr	r3, [pc, #80]	; (400ff8 <system_init_flash+0x7c>)
  400fa6:	601a      	str	r2, [r3, #0]
  400fa8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fae:	4b12      	ldr	r3, [pc, #72]	; (400ff8 <system_init_flash+0x7c>)
  400fb0:	601a      	str	r2, [r3, #0]
  400fb2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fb4:	4a11      	ldr	r2, [pc, #68]	; (400ffc <system_init_flash+0x80>)
  400fb6:	4b10      	ldr	r3, [pc, #64]	; (400ff8 <system_init_flash+0x7c>)
  400fb8:	601a      	str	r2, [r3, #0]
  400fba:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400fbc:	4a10      	ldr	r2, [pc, #64]	; (401000 <system_init_flash+0x84>)
  400fbe:	4b0e      	ldr	r3, [pc, #56]	; (400ff8 <system_init_flash+0x7c>)
  400fc0:	601a      	str	r2, [r3, #0]
  400fc2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400fc4:	4a0f      	ldr	r2, [pc, #60]	; (401004 <system_init_flash+0x88>)
  400fc6:	4b0c      	ldr	r3, [pc, #48]	; (400ff8 <system_init_flash+0x7c>)
  400fc8:	601a      	str	r2, [r3, #0]
  400fca:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400fcc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400fd0:	4b09      	ldr	r3, [pc, #36]	; (400ff8 <system_init_flash+0x7c>)
  400fd2:	601a      	str	r2, [r3, #0]
  400fd4:	4770      	bx	lr
  400fd6:	bf00      	nop
  400fd8:	015ef3bf 	.word	0x015ef3bf
  400fdc:	02bde77f 	.word	0x02bde77f
  400fe0:	041cdb3f 	.word	0x041cdb3f
  400fe4:	057bceff 	.word	0x057bceff
  400fe8:	06dac2bf 	.word	0x06dac2bf
  400fec:	0839b67f 	.word	0x0839b67f
  400ff0:	04000500 	.word	0x04000500
  400ff4:	04000600 	.word	0x04000600
  400ff8:	400e0c00 	.word	0x400e0c00
  400ffc:	04000100 	.word	0x04000100
  401000:	04000200 	.word	0x04000200
  401004:	04000300 	.word	0x04000300

00401008 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401008:	4b0a      	ldr	r3, [pc, #40]	; (401034 <_sbrk+0x2c>)
  40100a:	681b      	ldr	r3, [r3, #0]
  40100c:	b153      	cbz	r3, 401024 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40100e:	4b09      	ldr	r3, [pc, #36]	; (401034 <_sbrk+0x2c>)
  401010:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401012:	181a      	adds	r2, r3, r0
  401014:	4908      	ldr	r1, [pc, #32]	; (401038 <_sbrk+0x30>)
  401016:	4291      	cmp	r1, r2
  401018:	db08      	blt.n	40102c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40101a:	4610      	mov	r0, r2
  40101c:	4a05      	ldr	r2, [pc, #20]	; (401034 <_sbrk+0x2c>)
  40101e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401020:	4618      	mov	r0, r3
  401022:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401024:	4a05      	ldr	r2, [pc, #20]	; (40103c <_sbrk+0x34>)
  401026:	4b03      	ldr	r3, [pc, #12]	; (401034 <_sbrk+0x2c>)
  401028:	601a      	str	r2, [r3, #0]
  40102a:	e7f0      	b.n	40100e <_sbrk+0x6>
		return (caddr_t) -1;	
  40102c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401030:	4770      	bx	lr
  401032:	bf00      	nop
  401034:	20400a70 	.word	0x20400a70
  401038:	2045fffc 	.word	0x2045fffc
  40103c:	20404ff8 	.word	0x20404ff8

00401040 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401040:	f04f 30ff 	mov.w	r0, #4294967295
  401044:	4770      	bx	lr

00401046 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40104a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40104c:	2000      	movs	r0, #0
  40104e:	4770      	bx	lr

00401050 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401050:	2001      	movs	r0, #1
  401052:	4770      	bx	lr

00401054 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401054:	2000      	movs	r0, #0
  401056:	4770      	bx	lr

00401058 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
  401058:	ba40      	rev16	r0, r0
}
  40105a:	b280      	uxth	r0, r0
  40105c:	4770      	bx	lr

0040105e <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
  40105e:	0e03      	lsrs	r3, r0, #24
  401060:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401064:	0202      	lsls	r2, r0, #8
  401066:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  40106a:	4313      	orrs	r3, r2
  40106c:	0a00      	lsrs	r0, r0, #8
  40106e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
  401072:	4318      	orrs	r0, r3
  401074:	4770      	bx	lr

00401076 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  401076:	b470      	push	{r4, r5, r6}
  401078:	b083      	sub	sp, #12
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
  40107a:	2300      	movs	r3, #0
  40107c:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  401080:	f010 0601 	ands.w	r6, r0, #1
  401084:	d030      	beq.n	4010e8 <lwip_standard_chksum+0x72>
  401086:	4299      	cmp	r1, r3
  401088:	dd2e      	ble.n	4010e8 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[1] = *pb++;
  40108a:	1c45      	adds	r5, r0, #1
  40108c:	7803      	ldrb	r3, [r0, #0]
  40108e:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
  401092:	3901      	subs	r1, #1
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
  401094:	2901      	cmp	r1, #1
  401096:	dd29      	ble.n	4010ec <lwip_standard_chksum+0x76>
  401098:	4628      	mov	r0, r5
  40109a:	460b      	mov	r3, r1
  40109c:	2200      	movs	r2, #0
    sum += *ps++;
  40109e:	f830 4b02 	ldrh.w	r4, [r0], #2
  4010a2:	4422      	add	r2, r4
    len -= 2;
  4010a4:	3b02      	subs	r3, #2
  while (len > 1) {
  4010a6:	2b01      	cmp	r3, #1
  4010a8:	dcf9      	bgt.n	40109e <lwip_standard_chksum+0x28>
  4010aa:	3902      	subs	r1, #2
  4010ac:	f021 0301 	bic.w	r3, r1, #1
  4010b0:	3302      	adds	r3, #2
  4010b2:	441d      	add	r5, r3
  4010b4:	f001 0101 	and.w	r1, r1, #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  4010b8:	2900      	cmp	r1, #0
  4010ba:	dd02      	ble.n	4010c2 <lwip_standard_chksum+0x4c>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  4010bc:	782b      	ldrb	r3, [r5, #0]
  4010be:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
  4010c2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  4010c6:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  4010c8:	b290      	uxth	r0, r2
  4010ca:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
  4010ce:	b290      	uxth	r0, r2
  4010d0:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
  4010d4:	b126      	cbz	r6, 4010e0 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
  4010d6:	0203      	lsls	r3, r0, #8
  4010d8:	b29b      	uxth	r3, r3
  4010da:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4010de:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
  4010e0:	b280      	uxth	r0, r0
  4010e2:	b003      	add	sp, #12
  4010e4:	bc70      	pop	{r4, r5, r6}
  4010e6:	4770      	bx	lr
  const u8_t *pb = (const u8_t *)dataptr;
  4010e8:	4605      	mov	r5, r0
  4010ea:	e7d3      	b.n	401094 <lwip_standard_chksum+0x1e>
  u32_t sum = 0;
  4010ec:	2200      	movs	r2, #0
  4010ee:	e7e3      	b.n	4010b8 <lwip_standard_chksum+0x42>

004010f0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  4010f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4010f4:	4689      	mov	r9, r1
  4010f6:	4690      	mov	r8, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  4010f8:	681c      	ldr	r4, [r3, #0]
  acc = (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  4010fa:	9b08      	ldr	r3, [sp, #32]
  4010fc:	681a      	ldr	r2, [r3, #0]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  4010fe:	0c13      	lsrs	r3, r2, #16
  401100:	fa13 f382 	uxtah	r3, r3, r2
  401104:	fa13 f384 	uxtah	r3, r3, r4
  401108:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  40110c:	b29c      	uxth	r4, r3
  40110e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
  401112:	b29c      	uxth	r4, r3
  401114:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
  401118:	b1f8      	cbz	r0, 40115a <inet_chksum_pseudo+0x6a>
  40111a:	4605      	mov	r5, r0
  40111c:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
  40111e:	4f18      	ldr	r7, [pc, #96]	; (401180 <inet_chksum_pseudo+0x90>)
  401120:	e001      	b.n	401126 <inet_chksum_pseudo+0x36>
  for (q = p; q != NULL; q = q->next) {
  401122:	682d      	ldr	r5, [r5, #0]
  401124:	b19d      	cbz	r5, 40114e <inet_chksum_pseudo+0x5e>
    acc += LWIP_CHKSUM(q->payload, q->len);
  401126:	8969      	ldrh	r1, [r5, #10]
  401128:	6868      	ldr	r0, [r5, #4]
  40112a:	47b8      	blx	r7
  40112c:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
  40112e:	b2a0      	uxth	r0, r4
  401130:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
  401134:	896b      	ldrh	r3, [r5, #10]
  401136:	f013 0f01 	tst.w	r3, #1
  40113a:	d0f2      	beq.n	401122 <inet_chksum_pseudo+0x32>
      swapped = 1 - swapped;
  40113c:	f1c6 0601 	rsb	r6, r6, #1
  401140:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  401142:	0223      	lsls	r3, r4, #8
  401144:	b29b      	uxth	r3, r3
  401146:	f3c4 2407 	ubfx	r4, r4, #8, #8
  40114a:	431c      	orrs	r4, r3
  40114c:	e7e9      	b.n	401122 <inet_chksum_pseudo+0x32>
  if (swapped) {
  40114e:	b126      	cbz	r6, 40115a <inet_chksum_pseudo+0x6a>
    acc = SWAP_BYTES_IN_WORD(acc);
  401150:	0223      	lsls	r3, r4, #8
  401152:	b29b      	uxth	r3, r3
  401154:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401158:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
  40115a:	4648      	mov	r0, r9
  40115c:	4e09      	ldr	r6, [pc, #36]	; (401184 <inet_chksum_pseudo+0x94>)
  40115e:	47b0      	blx	r6
  401160:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
  401162:	4640      	mov	r0, r8
  401164:	47b0      	blx	r6
  401166:	4428      	add	r0, r5
  401168:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
  40116a:	b2a0      	uxth	r0, r4
  40116c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
  401170:	b2a0      	uxth	r0, r4
  401172:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
  401176:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
  401178:	b280      	uxth	r0, r0
  40117a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40117e:	bf00      	nop
  401180:	00401077 	.word	0x00401077
  401184:	00401059 	.word	0x00401059

00401188 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  401188:	b510      	push	{r4, lr}
  40118a:	b082      	sub	sp, #8
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  40118c:	9c04      	ldr	r4, [sp, #16]
  40118e:	9400      	str	r4, [sp, #0]
  401190:	4c01      	ldr	r4, [pc, #4]	; (401198 <ip_chksum_pseudo+0x10>)
  401192:	47a0      	blx	r4
  }
#endif /* LWIP_IPV4 */
}
  401194:	b002      	add	sp, #8
  401196:	bd10      	pop	{r4, pc}
  401198:	004010f1 	.word	0x004010f1

0040119c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  40119c:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  40119e:	4b02      	ldr	r3, [pc, #8]	; (4011a8 <inet_chksum+0xc>)
  4011a0:	4798      	blx	r3
  4011a2:	43c0      	mvns	r0, r0
}
  4011a4:	b280      	uxth	r0, r0
  4011a6:	bd08      	pop	{r3, pc}
  4011a8:	00401077 	.word	0x00401077

004011ac <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  4011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
  4011ae:	b318      	cbz	r0, 4011f8 <inet_chksum_pbuf+0x4c>
  4011b0:	4605      	mov	r5, r0
  4011b2:	2600      	movs	r6, #0
  4011b4:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
  4011b6:	4f11      	ldr	r7, [pc, #68]	; (4011fc <inet_chksum_pbuf+0x50>)
  4011b8:	e001      	b.n	4011be <inet_chksum_pbuf+0x12>
  for (q = p; q != NULL; q = q->next) {
  4011ba:	682d      	ldr	r5, [r5, #0]
  4011bc:	b19d      	cbz	r5, 4011e6 <inet_chksum_pbuf+0x3a>
    acc += LWIP_CHKSUM(q->payload, q->len);
  4011be:	8969      	ldrh	r1, [r5, #10]
  4011c0:	6868      	ldr	r0, [r5, #4]
  4011c2:	47b8      	blx	r7
  4011c4:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
  4011c6:	b284      	uxth	r4, r0
  4011c8:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  4011cc:	896b      	ldrh	r3, [r5, #10]
  4011ce:	f013 0f01 	tst.w	r3, #1
  4011d2:	d0f2      	beq.n	4011ba <inet_chksum_pbuf+0xe>
      swapped = 1 - swapped;
  4011d4:	f1c6 0601 	rsb	r6, r6, #1
  4011d8:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  4011da:	0223      	lsls	r3, r4, #8
  4011dc:	b29b      	uxth	r3, r3
  4011de:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4011e2:	431c      	orrs	r4, r3
  4011e4:	e7e9      	b.n	4011ba <inet_chksum_pbuf+0xe>
    }
  }

  if (swapped) {
  4011e6:	b126      	cbz	r6, 4011f2 <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
  4011e8:	0223      	lsls	r3, r4, #8
  4011ea:	b29b      	uxth	r3, r3
  4011ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4011f0:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
  4011f2:	43e0      	mvns	r0, r4
}
  4011f4:	b280      	uxth	r0, r0
  4011f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  acc = 0;
  4011f8:	2400      	movs	r4, #0
  4011fa:	e7fa      	b.n	4011f2 <inet_chksum_pbuf+0x46>
  4011fc:	00401077 	.word	0x00401077

00401200 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  401200:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  401202:	4b06      	ldr	r3, [pc, #24]	; (40121c <lwip_init+0x1c>)
  401204:	4798      	blx	r3
  memp_init();
  401206:	4b06      	ldr	r3, [pc, #24]	; (401220 <lwip_init+0x20>)
  401208:	4798      	blx	r3
  pbuf_init();
  netif_init();
  40120a:	4b06      	ldr	r3, [pc, #24]	; (401224 <lwip_init+0x24>)
  40120c:	4798      	blx	r3
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  40120e:	4b06      	ldr	r3, [pc, #24]	; (401228 <lwip_init+0x28>)
  401210:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  401212:	4b06      	ldr	r3, [pc, #24]	; (40122c <lwip_init+0x2c>)
  401214:	4798      	blx	r3
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  401216:	4b06      	ldr	r3, [pc, #24]	; (401230 <lwip_init+0x30>)
  401218:	4798      	blx	r3
  40121a:	bd08      	pop	{r3, pc}
  40121c:	004026d9 	.word	0x004026d9
  401220:	00402991 	.word	0x00402991
  401224:	00402a19 	.word	0x00402a19
  401228:	004060e5 	.word	0x004060e5
  40122c:	0040308d 	.word	0x0040308d
  401230:	00406089 	.word	0x00406089

00401234 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  401234:	b510      	push	{r4, lr}
  401236:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  401238:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  40123c:	4b09      	ldr	r3, [pc, #36]	; (401264 <etharp_free_entry+0x30>)
  40123e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
  401242:	b138      	cbz	r0, 401254 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  401244:	4b08      	ldr	r3, [pc, #32]	; (401268 <etharp_free_entry+0x34>)
  401246:	4798      	blx	r3
    arp_table[i].q = NULL;
  401248:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40124c:	00db      	lsls	r3, r3, #3
  40124e:	2100      	movs	r1, #0
  401250:	4a04      	ldr	r2, [pc, #16]	; (401264 <etharp_free_entry+0x30>)
  401252:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  401254:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  401258:	4b02      	ldr	r3, [pc, #8]	; (401264 <etharp_free_entry+0x30>)
  40125a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  40125e:	2300      	movs	r3, #0
  401260:	7523      	strb	r3, [r4, #20]
  401262:	bd10      	pop	{r4, pc}
  401264:	20400a74 	.word	0x20400a74
  401268:	00402c19 	.word	0x00402c19

0040126c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  40126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401270:	b083      	sub	sp, #12
  401272:	4a3a      	ldr	r2, [pc, #232]	; (40135c <etharp_find_entry+0xf0>)
  401274:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  401276:	469e      	mov	lr, r3
  401278:	469b      	mov	fp, r3
  40127a:	4698      	mov	r8, r3
  s8_t old_queue = ARP_TABLE_SIZE;
  40127c:	260a      	movs	r6, #10
  s8_t empty = ARP_TABLE_SIZE;
  40127e:	4634      	mov	r4, r6
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  401280:	46b4      	mov	ip, r6
  401282:	46b1      	mov	r9, r6
  401284:	9101      	str	r1, [sp, #4]
  401286:	e014      	b.n	4012b2 <etharp_find_entry+0x46>
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
  401288:	b17f      	cbz	r7, 4012aa <etharp_find_entry+0x3e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  40128a:	b120      	cbz	r0, 401296 <etharp_find_entry+0x2a>
  40128c:	6801      	ldr	r1, [r0, #0]
  40128e:	468a      	mov	sl, r1
  401290:	6869      	ldr	r1, [r5, #4]
  401292:	458a      	cmp	sl, r1
  401294:	d015      	beq.n	4012c2 <etharp_find_entry+0x56>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  401296:	2f01      	cmp	r7, #1
  401298:	d015      	beq.n	4012c6 <etharp_find_entry+0x5a>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  40129a:	2f01      	cmp	r7, #1
  40129c:	d905      	bls.n	4012aa <etharp_find_entry+0x3e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  40129e:	8a6d      	ldrh	r5, [r5, #18]
  4012a0:	4575      	cmp	r5, lr
  4012a2:	d302      	bcc.n	4012aa <etharp_find_entry+0x3e>
            old_stable = i;
  4012a4:	fa4f fc83 	sxtb.w	ip, r3
            age_stable = arp_table[i].ctime;
  4012a8:	46ae      	mov	lr, r5
  4012aa:	3301      	adds	r3, #1
  4012ac:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  4012ae:	2b0a      	cmp	r3, #10
  4012b0:	d018      	beq.n	4012e4 <etharp_find_entry+0x78>
  4012b2:	4615      	mov	r5, r2
    u8_t state = arp_table[i].state;
  4012b4:	7d17      	ldrb	r7, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  4012b6:	2c0a      	cmp	r4, #10
  4012b8:	d1e6      	bne.n	401288 <etharp_find_entry+0x1c>
  4012ba:	2f00      	cmp	r7, #0
  4012bc:	d1e4      	bne.n	401288 <etharp_find_entry+0x1c>
      empty = i;
  4012be:	b25c      	sxtb	r4, r3
  4012c0:	e7f3      	b.n	4012aa <etharp_find_entry+0x3e>
        return i;
  4012c2:	b258      	sxtb	r0, r3
  4012c4:	e028      	b.n	401318 <etharp_find_entry+0xac>
        if (arp_table[i].q != NULL) {
  4012c6:	682f      	ldr	r7, [r5, #0]
  4012c8:	b12f      	cbz	r7, 4012d6 <etharp_find_entry+0x6a>
          if (arp_table[i].ctime >= age_queue) {
  4012ca:	8a6d      	ldrh	r5, [r5, #18]
  4012cc:	4545      	cmp	r5, r8
  4012ce:	d3ec      	bcc.n	4012aa <etharp_find_entry+0x3e>
            old_queue = i;
  4012d0:	b25e      	sxtb	r6, r3
            age_queue = arp_table[i].ctime;
  4012d2:	46a8      	mov	r8, r5
  4012d4:	e7e9      	b.n	4012aa <etharp_find_entry+0x3e>
          if (arp_table[i].ctime >= age_pending) {
  4012d6:	8a6d      	ldrh	r5, [r5, #18]
  4012d8:	455d      	cmp	r5, fp
  4012da:	d3e6      	bcc.n	4012aa <etharp_find_entry+0x3e>
            old_pending = i;
  4012dc:	fa4f f983 	sxtb.w	r9, r3
            age_pending = arp_table[i].ctime;
  4012e0:	46ab      	mov	fp, r5
  4012e2:	e7e2      	b.n	4012aa <etharp_find_entry+0x3e>
  4012e4:	9901      	ldr	r1, [sp, #4]
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  4012e6:	f011 0f02 	tst.w	r1, #2
  4012ea:	d12e      	bne.n	40134a <etharp_find_entry+0xde>
  4012ec:	4605      	mov	r5, r0
  4012ee:	2c0a      	cmp	r4, #10
  4012f0:	d015      	beq.n	40131e <etharp_find_entry+0xb2>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  4012f2:	2c09      	cmp	r4, #9
  4012f4:	dc16      	bgt.n	401324 <etharp_find_entry+0xb8>
    i = empty;
  4012f6:	b2e4      	uxtb	r4, r4
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  4012f8:	b135      	cbz	r5, 401308 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  4012fa:	6829      	ldr	r1, [r5, #0]
  4012fc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401300:	4a16      	ldr	r2, [pc, #88]	; (40135c <etharp_find_entry+0xf0>)
  401302:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401306:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
  401308:	eb04 0244 	add.w	r2, r4, r4, lsl #1
  40130c:	4b13      	ldr	r3, [pc, #76]	; (40135c <etharp_find_entry+0xf0>)
  40130e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  401312:	2200      	movs	r2, #0
  401314:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  401316:	b260      	sxtb	r0, r4
}
  401318:	b003      	add	sp, #12
  40131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  40131e:	f011 0f01 	tst.w	r1, #1
  401322:	d015      	beq.n	401350 <etharp_find_entry+0xe4>
    if (old_stable < ARP_TABLE_SIZE) {
  401324:	f1bc 0f09 	cmp.w	ip, #9
  401328:	dc05      	bgt.n	401336 <etharp_find_entry+0xca>
      i = old_stable;
  40132a:	fa5f f48c 	uxtb.w	r4, ip
    etharp_free_entry(i);
  40132e:	4620      	mov	r0, r4
  401330:	4b0b      	ldr	r3, [pc, #44]	; (401360 <etharp_find_entry+0xf4>)
  401332:	4798      	blx	r3
  401334:	e7e0      	b.n	4012f8 <etharp_find_entry+0x8c>
    } else if (old_pending < ARP_TABLE_SIZE) {
  401336:	f1b9 0f09 	cmp.w	r9, #9
  40133a:	dc02      	bgt.n	401342 <etharp_find_entry+0xd6>
      i = old_pending;
  40133c:	fa5f f489 	uxtb.w	r4, r9
  401340:	e7f5      	b.n	40132e <etharp_find_entry+0xc2>
    } else if (old_queue < ARP_TABLE_SIZE) {
  401342:	2e09      	cmp	r6, #9
  401344:	dc07      	bgt.n	401356 <etharp_find_entry+0xea>
      i = old_queue;
  401346:	b2f4      	uxtb	r4, r6
  401348:	e7f1      	b.n	40132e <etharp_find_entry+0xc2>
    return (s8_t)ERR_MEM;
  40134a:	f04f 30ff 	mov.w	r0, #4294967295
  40134e:	e7e3      	b.n	401318 <etharp_find_entry+0xac>
  401350:	f04f 30ff 	mov.w	r0, #4294967295
  401354:	e7e0      	b.n	401318 <etharp_find_entry+0xac>
      return (s8_t)ERR_MEM;
  401356:	f04f 30ff 	mov.w	r0, #4294967295
  40135a:	e7dd      	b.n	401318 <etharp_find_entry+0xac>
  40135c:	20400a74 	.word	0x20400a74
  401360:	00401235 	.word	0x00401235

00401364 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  401364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401368:	b082      	sub	sp, #8
  40136a:	4680      	mov	r8, r0
  40136c:	4689      	mov	r9, r1
  40136e:	4692      	mov	sl, r2
  401370:	461f      	mov	r7, r3
  401372:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  401374:	2200      	movs	r2, #0
  401376:	211c      	movs	r1, #28
  401378:	2002      	movs	r0, #2
  40137a:	4b1c      	ldr	r3, [pc, #112]	; (4013ec <etharp_raw+0x88>)
  40137c:	4798      	blx	r3
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  40137e:	b388      	cbz	r0, 4013e4 <etharp_raw+0x80>
  401380:	4606      	mov	r6, r0
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  401382:	6844      	ldr	r4, [r0, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  401384:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  401388:	4b19      	ldr	r3, [pc, #100]	; (4013f0 <etharp_raw+0x8c>)
  40138a:	4798      	blx	r3
  40138c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  40138e:	683b      	ldr	r3, [r7, #0]
  401390:	60a3      	str	r3, [r4, #8]
  401392:	88bb      	ldrh	r3, [r7, #4]
  401394:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  401396:	682b      	ldr	r3, [r5, #0]
  401398:	f8c4 3012 	str.w	r3, [r4, #18]
  40139c:	88ab      	ldrh	r3, [r5, #4]
  40139e:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  4013a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013a2:	681b      	ldr	r3, [r3, #0]
  4013a4:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  4013a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4013aa:	681b      	ldr	r3, [r3, #0]
  4013ac:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  4013ae:	2500      	movs	r5, #0
  4013b0:	7025      	strb	r5, [r4, #0]
  4013b2:	2301      	movs	r3, #1
  4013b4:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  4013b6:	2308      	movs	r3, #8
  4013b8:	70a3      	strb	r3, [r4, #2]
  4013ba:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  4013bc:	2306      	movs	r3, #6
  4013be:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  4013c0:	2304      	movs	r3, #4
  4013c2:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  4013c4:	f640 0306 	movw	r3, #2054	; 0x806
  4013c8:	9300      	str	r3, [sp, #0]
  4013ca:	4653      	mov	r3, sl
  4013cc:	464a      	mov	r2, r9
  4013ce:	4631      	mov	r1, r6
  4013d0:	4640      	mov	r0, r8
  4013d2:	4c08      	ldr	r4, [pc, #32]	; (4013f4 <etharp_raw+0x90>)
  4013d4:	47a0      	blx	r4
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  4013d6:	4630      	mov	r0, r6
  4013d8:	4b07      	ldr	r3, [pc, #28]	; (4013f8 <etharp_raw+0x94>)
  4013da:	4798      	blx	r3
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
  4013dc:	4628      	mov	r0, r5
}
  4013de:	b002      	add	sp, #8
  4013e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
  4013e4:	f04f 30ff 	mov.w	r0, #4294967295
  4013e8:	e7f9      	b.n	4013de <etharp_raw+0x7a>
  4013ea:	bf00      	nop
  4013ec:	00402c71 	.word	0x00402c71
  4013f0:	00401059 	.word	0x00401059
  4013f4:	00406365 	.word	0x00406365
  4013f8:	00402c19 	.word	0x00402c19

004013fc <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  4013fc:	2900      	cmp	r1, #0
  4013fe:	f000 8093 	beq.w	401528 <etharp_input+0x12c>
{
  401402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401406:	b086      	sub	sp, #24
  401408:	460e      	mov	r6, r1
  40140a:	4604      	mov	r4, r0
  hdr = (struct etharp_hdr *)p->payload;
  40140c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40140e:	882b      	ldrh	r3, [r5, #0]
  401410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401414:	d005      	beq.n	401422 <etharp_input+0x26>
    pbuf_free(p);
  401416:	4620      	mov	r0, r4
  401418:	4b44      	ldr	r3, [pc, #272]	; (40152c <etharp_input+0x130>)
  40141a:	4798      	blx	r3
}
  40141c:	b006      	add	sp, #24
  40141e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  401422:	792b      	ldrb	r3, [r5, #4]
  401424:	2b06      	cmp	r3, #6
  401426:	d1f6      	bne.n	401416 <etharp_input+0x1a>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  401428:	796b      	ldrb	r3, [r5, #5]
  40142a:	2b04      	cmp	r3, #4
  40142c:	d1f3      	bne.n	401416 <etharp_input+0x1a>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  40142e:	886b      	ldrh	r3, [r5, #2]
  401430:	2b08      	cmp	r3, #8
  401432:	d1f0      	bne.n	401416 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  401434:	f8d5 000e 	ldr.w	r0, [r5, #14]
  401438:	9005      	str	r0, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  40143a:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  40143c:	684b      	ldr	r3, [r1, #4]
  40143e:	2b00      	cmp	r3, #0
  401440:	d06b      	beq.n	40151a <etharp_input+0x11e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  401442:	429a      	cmp	r2, r3
  401444:	bf0c      	ite	eq
  401446:	f04f 0801 	moveq.w	r8, #1
  40144a:	f04f 0800 	movne.w	r8, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40144e:	f105 0708 	add.w	r7, r5, #8
  401452:	d150      	bne.n	4014f6 <etharp_input+0xfa>
  401454:	f04f 0801 	mov.w	r8, #1
  401458:	46c1      	mov	r9, r8
  if (ip4_addr_isany(ipaddr) ||
  40145a:	2800      	cmp	r0, #0
  40145c:	d040      	beq.n	4014e0 <etharp_input+0xe4>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  40145e:	4631      	mov	r1, r6
  401460:	4b33      	ldr	r3, [pc, #204]	; (401530 <etharp_input+0x134>)
  401462:	4798      	blx	r3
  if (ip4_addr_isany(ipaddr) ||
  401464:	2800      	cmp	r0, #0
  401466:	d13b      	bne.n	4014e0 <etharp_input+0xe4>
      ip4_addr_ismulticast(ipaddr)) {
  401468:	9b05      	ldr	r3, [sp, #20]
  40146a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  40146e:	2be0      	cmp	r3, #224	; 0xe0
  401470:	d036      	beq.n	4014e0 <etharp_input+0xe4>
  i = etharp_find_entry(ipaddr, flags, netif);
  401472:	4632      	mov	r2, r6
  401474:	4649      	mov	r1, r9
  401476:	a805      	add	r0, sp, #20
  401478:	4b2e      	ldr	r3, [pc, #184]	; (401534 <etharp_input+0x138>)
  40147a:	4798      	blx	r3
  if (i < 0) {
  40147c:	1e02      	subs	r2, r0, #0
  40147e:	db2f      	blt.n	4014e0 <etharp_input+0xe4>
    arp_table[i].state = ETHARP_STATE_STABLE;
  401480:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 40153c <etharp_input+0x140>
  401484:	0053      	lsls	r3, r2, #1
  401486:	1899      	adds	r1, r3, r2
  401488:	00c9      	lsls	r1, r1, #3
  40148a:	eb0e 0c01 	add.w	ip, lr, r1
  40148e:	2002      	movs	r0, #2
  401490:	f88c 0014 	strb.w	r0, [ip, #20]
  arp_table[i].netif = netif;
  401494:	f8cc 6008 	str.w	r6, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  401498:	460b      	mov	r3, r1
  40149a:	330c      	adds	r3, #12
  40149c:	eb0e 0903 	add.w	r9, lr, r3
  4014a0:	6838      	ldr	r0, [r7, #0]
  4014a2:	f84e 0003 	str.w	r0, [lr, r3]
  4014a6:	88bb      	ldrh	r3, [r7, #4]
  4014a8:	f8a9 3004 	strh.w	r3, [r9, #4]
  arp_table[i].ctime = 0;
  4014ac:	2300      	movs	r3, #0
  4014ae:	f8ac 3012 	strh.w	r3, [ip, #18]
  if (arp_table[i].q != NULL) {
  4014b2:	f85e 9001 	ldr.w	r9, [lr, r1]
  4014b6:	f1b9 0f00 	cmp.w	r9, #0
  4014ba:	d011      	beq.n	4014e0 <etharp_input+0xe4>
    arp_table[i].q = NULL;
  4014bc:	460b      	mov	r3, r1
  4014be:	2100      	movs	r1, #0
  4014c0:	f84e 1003 	str.w	r1, [lr, r3]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  4014c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4014c8:	9300      	str	r3, [sp, #0]
  4014ca:	463b      	mov	r3, r7
  4014cc:	f106 0229 	add.w	r2, r6, #41	; 0x29
  4014d0:	4649      	mov	r1, r9
  4014d2:	4630      	mov	r0, r6
  4014d4:	f8df a068 	ldr.w	sl, [pc, #104]	; 401540 <etharp_input+0x144>
  4014d8:	47d0      	blx	sl
    pbuf_free(p);
  4014da:	4648      	mov	r0, r9
  4014dc:	4b13      	ldr	r3, [pc, #76]	; (40152c <etharp_input+0x130>)
  4014de:	4798      	blx	r3
  switch (hdr->opcode) {
  4014e0:	88eb      	ldrh	r3, [r5, #6]
  4014e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4014e6:	d102      	bne.n	4014ee <etharp_input+0xf2>
    if (for_us) {
  4014e8:	f1b8 0f00 	cmp.w	r8, #0
  4014ec:	d106      	bne.n	4014fc <etharp_input+0x100>
  pbuf_free(p);
  4014ee:	4620      	mov	r0, r4
  4014f0:	4b0e      	ldr	r3, [pc, #56]	; (40152c <etharp_input+0x130>)
  4014f2:	4798      	blx	r3
  4014f4:	e792      	b.n	40141c <etharp_input+0x20>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  4014f6:	f04f 0902 	mov.w	r9, #2
  4014fa:	e7ae      	b.n	40145a <etharp_input+0x5e>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  4014fc:	f106 0129 	add.w	r1, r6, #41	; 0x29
      etharp_raw(netif,
  401500:	2302      	movs	r3, #2
  401502:	9303      	str	r3, [sp, #12]
  401504:	ab05      	add	r3, sp, #20
  401506:	9302      	str	r3, [sp, #8]
  401508:	9701      	str	r7, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  40150a:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
  40150c:	9300      	str	r3, [sp, #0]
  40150e:	460b      	mov	r3, r1
  401510:	463a      	mov	r2, r7
  401512:	4630      	mov	r0, r6
  401514:	4d08      	ldr	r5, [pc, #32]	; (401538 <etharp_input+0x13c>)
  401516:	47a8      	blx	r5
  401518:	e7e9      	b.n	4014ee <etharp_input+0xf2>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40151a:	f105 0708 	add.w	r7, r5, #8
  40151e:	f04f 0800 	mov.w	r8, #0
  401522:	f04f 0902 	mov.w	r9, #2
  401526:	e798      	b.n	40145a <etharp_input+0x5e>
  401528:	4770      	bx	lr
  40152a:	bf00      	nop
  40152c:	00402c19 	.word	0x00402c19
  401530:	00401ee5 	.word	0x00401ee5
  401534:	0040126d 	.word	0x0040126d
  401538:	00401365 	.word	0x00401365
  40153c:	20400a74 	.word	0x20400a74
  401540:	00406365 	.word	0x00406365

00401544 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  401544:	b510      	push	{r4, lr}
  401546:	b084      	sub	sp, #16
  401548:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  40154a:	f100 0429 	add.w	r4, r0, #41	; 0x29
  40154e:	2201      	movs	r2, #1
  401550:	9203      	str	r2, [sp, #12]
  401552:	9102      	str	r1, [sp, #8]
  401554:	4a05      	ldr	r2, [pc, #20]	; (40156c <etharp_request+0x28>)
  401556:	9201      	str	r2, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  401558:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  40155a:	9300      	str	r3, [sp, #0]
  40155c:	4623      	mov	r3, r4
  40155e:	4a04      	ldr	r2, [pc, #16]	; (401570 <etharp_request+0x2c>)
  401560:	4621      	mov	r1, r4
  401562:	4c04      	ldr	r4, [pc, #16]	; (401574 <etharp_request+0x30>)
  401564:	47a0      	blx	r4
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
  401566:	b004      	add	sp, #16
  401568:	bd10      	pop	{r4, pc}
  40156a:	bf00      	nop
  40156c:	0040a4b0 	.word	0x0040a4b0
  401570:	0040a4a8 	.word	0x0040a4a8
  401574:	00401365 	.word	0x00401365

00401578 <etharp_tmr>:
{
  401578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40157c:	4c17      	ldr	r4, [pc, #92]	; (4015dc <etharp_tmr+0x64>)
  40157e:	2500      	movs	r5, #0
        etharp_free_entry(i);
  401580:	4e17      	ldr	r6, [pc, #92]	; (4015e0 <etharp_tmr+0x68>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  401582:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4015e4 <etharp_tmr+0x6c>
        arp_table[i].state = ETHARP_STATE_STABLE;
  401586:	2702      	movs	r7, #2
  401588:	e004      	b.n	401594 <etharp_tmr+0x1c>
        etharp_free_entry(i);
  40158a:	47b0      	blx	r6
  40158c:	3501      	adds	r5, #1
  40158e:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  401590:	2d0a      	cmp	r5, #10
  401592:	d021      	beq.n	4015d8 <etharp_tmr+0x60>
    u8_t state = arp_table[i].state;
  401594:	4628      	mov	r0, r5
  401596:	46a6      	mov	lr, r4
  401598:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
  40159a:	2a00      	cmp	r2, #0
  40159c:	d0f6      	beq.n	40158c <etharp_tmr+0x14>
      arp_table[i].ctime++;
  40159e:	89e3      	ldrh	r3, [r4, #14]
  4015a0:	3301      	adds	r3, #1
  4015a2:	b29b      	uxth	r3, r3
  4015a4:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  4015a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
  4015aa:	d2ee      	bcs.n	40158a <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  4015ac:	2b04      	cmp	r3, #4
  4015ae:	d901      	bls.n	4015b4 <etharp_tmr+0x3c>
  4015b0:	2a01      	cmp	r2, #1
  4015b2:	d0ea      	beq.n	40158a <etharp_tmr+0x12>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  4015b4:	2a03      	cmp	r2, #3
  4015b6:	d008      	beq.n	4015ca <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  4015b8:	2a04      	cmp	r2, #4
  4015ba:	d00a      	beq.n	4015d2 <etharp_tmr+0x5a>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  4015bc:	2a01      	cmp	r2, #1
  4015be:	d1e5      	bne.n	40158c <etharp_tmr+0x14>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  4015c0:	4671      	mov	r1, lr
  4015c2:	f8de 0004 	ldr.w	r0, [lr, #4]
  4015c6:	47c0      	blx	r8
  4015c8:	e7e0      	b.n	40158c <etharp_tmr+0x14>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  4015ca:	2304      	movs	r3, #4
  4015cc:	f88e 3010 	strb.w	r3, [lr, #16]
  4015d0:	e7dc      	b.n	40158c <etharp_tmr+0x14>
        arp_table[i].state = ETHARP_STATE_STABLE;
  4015d2:	f88e 7010 	strb.w	r7, [lr, #16]
  4015d6:	e7d9      	b.n	40158c <etharp_tmr+0x14>
}
  4015d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015dc:	20400a78 	.word	0x20400a78
  4015e0:	00401235 	.word	0x00401235
  4015e4:	00401545 	.word	0x00401545

004015e8 <etharp_output_to_arp_index>:
{
  4015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015ea:	b085      	sub	sp, #20
  4015ec:	4605      	mov	r5, r0
  4015ee:	460e      	mov	r6, r1
  4015f0:	4614      	mov	r4, r2
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  4015f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4015f6:	4b2a      	ldr	r3, [pc, #168]	; (4016a0 <etharp_output_to_arp_index+0xb8>)
  4015f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4015fc:	7d1b      	ldrb	r3, [r3, #20]
  4015fe:	2b02      	cmp	r3, #2
  401600:	d011      	beq.n	401626 <etharp_output_to_arp_index+0x3e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  401602:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  401606:	4b26      	ldr	r3, [pc, #152]	; (4016a0 <etharp_output_to_arp_index+0xb8>)
  401608:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  40160c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401610:	9300      	str	r3, [sp, #0]
  401612:	f104 030c 	add.w	r3, r4, #12
  401616:	f105 0229 	add.w	r2, r5, #41	; 0x29
  40161a:	4631      	mov	r1, r6
  40161c:	4628      	mov	r0, r5
  40161e:	4c21      	ldr	r4, [pc, #132]	; (4016a4 <etharp_output_to_arp_index+0xbc>)
  401620:	47a0      	blx	r4
}
  401622:	b005      	add	sp, #20
  401624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  401626:	4613      	mov	r3, r2
  401628:	4a1d      	ldr	r2, [pc, #116]	; (4016a0 <etharp_output_to_arp_index+0xb8>)
  40162a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40162e:	8a5b      	ldrh	r3, [r3, #18]
  401630:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
  401634:	d822      	bhi.n	40167c <etharp_output_to_arp_index+0x94>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  401636:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
  40163a:	d3e2      	bcc.n	401602 <etharp_output_to_arp_index+0x1a>
  40163c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
  401640:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  401642:	f105 0129 	add.w	r1, r5, #41	; 0x29
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  401646:	4a16      	ldr	r2, [pc, #88]	; (4016a0 <etharp_output_to_arp_index+0xb8>)
  401648:	f100 070c 	add.w	r7, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  40164c:	2301      	movs	r3, #1
  40164e:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  401650:	3004      	adds	r0, #4
  401652:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  401654:	9002      	str	r0, [sp, #8]
  401656:	4b14      	ldr	r3, [pc, #80]	; (4016a8 <etharp_output_to_arp_index+0xc0>)
  401658:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  40165a:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  40165c:	9300      	str	r3, [sp, #0]
  40165e:	460b      	mov	r3, r1
  401660:	443a      	add	r2, r7
  401662:	4628      	mov	r0, r5
  401664:	4f11      	ldr	r7, [pc, #68]	; (4016ac <etharp_output_to_arp_index+0xc4>)
  401666:	47b8      	blx	r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  401668:	2800      	cmp	r0, #0
  40166a:	d1ca      	bne.n	401602 <etharp_output_to_arp_index+0x1a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  40166c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401670:	4a0b      	ldr	r2, [pc, #44]	; (4016a0 <etharp_output_to_arp_index+0xb8>)
  401672:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401676:	2203      	movs	r2, #3
  401678:	751a      	strb	r2, [r3, #20]
  40167a:	e7c2      	b.n	401602 <etharp_output_to_arp_index+0x1a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  40167c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  401680:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
  401684:	3104      	adds	r1, #4
  401686:	4b0a      	ldr	r3, [pc, #40]	; (4016b0 <etharp_output_to_arp_index+0xc8>)
  401688:	4798      	blx	r3
  40168a:	2800      	cmp	r0, #0
  40168c:	d1b9      	bne.n	401602 <etharp_output_to_arp_index+0x1a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  40168e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401692:	4a03      	ldr	r2, [pc, #12]	; (4016a0 <etharp_output_to_arp_index+0xb8>)
  401694:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401698:	2203      	movs	r2, #3
  40169a:	751a      	strb	r2, [r3, #20]
  40169c:	e7b1      	b.n	401602 <etharp_output_to_arp_index+0x1a>
  40169e:	bf00      	nop
  4016a0:	20400a74 	.word	0x20400a74
  4016a4:	00406365 	.word	0x00406365
  4016a8:	0040a4b0 	.word	0x0040a4b0
  4016ac:	00401365 	.word	0x00401365
  4016b0:	00401545 	.word	0x00401545

004016b4 <etharp_query>:
{
  4016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016b6:	b083      	sub	sp, #12
  4016b8:	4606      	mov	r6, r0
  4016ba:	460d      	mov	r5, r1
  4016bc:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  4016be:	4601      	mov	r1, r0
  4016c0:	6828      	ldr	r0, [r5, #0]
  4016c2:	4b46      	ldr	r3, [pc, #280]	; (4017dc <etharp_query+0x128>)
  4016c4:	4798      	blx	r3
  4016c6:	2800      	cmp	r0, #0
  4016c8:	d165      	bne.n	401796 <etharp_query+0xe2>
      ip4_addr_ismulticast(ipaddr) ||
  4016ca:	682b      	ldr	r3, [r5, #0]
      ip4_addr_isany(ipaddr)) {
  4016cc:	2b00      	cmp	r3, #0
  4016ce:	bf18      	it	ne
  4016d0:	2d00      	cmpne	r5, #0
  4016d2:	d063      	beq.n	40179c <etharp_query+0xe8>
      ip4_addr_ismulticast(ipaddr) ||
  4016d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
  4016d8:	2be0      	cmp	r3, #224	; 0xe0
  4016da:	d05f      	beq.n	40179c <etharp_query+0xe8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  4016dc:	4632      	mov	r2, r6
  4016de:	2101      	movs	r1, #1
  4016e0:	4628      	mov	r0, r5
  4016e2:	4b3f      	ldr	r3, [pc, #252]	; (4017e0 <etharp_query+0x12c>)
  4016e4:	4798      	blx	r3
  if (i < 0) {
  4016e6:	1e04      	subs	r4, r0, #0
  4016e8:	db5b      	blt.n	4017a2 <etharp_query+0xee>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  4016ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  4016ee:	4a3d      	ldr	r2, [pc, #244]	; (4017e4 <etharp_query+0x130>)
  4016f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4016f4:	7d1b      	ldrb	r3, [r3, #20]
  4016f6:	b963      	cbnz	r3, 401712 <etharp_query+0x5e>
    arp_table[i].state = ETHARP_STATE_PENDING;
  4016f8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  4016fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401700:	2201      	movs	r2, #1
  401702:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
  401704:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
  401706:	4629      	mov	r1, r5
  401708:	4630      	mov	r0, r6
  40170a:	4b37      	ldr	r3, [pc, #220]	; (4017e8 <etharp_query+0x134>)
  40170c:	4798      	blx	r3
    if (q == NULL) {
  40170e:	b91f      	cbnz	r7, 401718 <etharp_query+0x64>
  401710:	e03f      	b.n	401792 <etharp_query+0xde>
  if (is_new_entry || (q == NULL)) {
  401712:	b34f      	cbz	r7, 401768 <etharp_query+0xb4>
  err_t result = ERR_MEM;
  401714:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  401718:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40171c:	4a31      	ldr	r2, [pc, #196]	; (4017e4 <etharp_query+0x130>)
  40171e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401722:	7d1b      	ldrb	r3, [r3, #20]
  401724:	2b01      	cmp	r3, #1
  401726:	d824      	bhi.n	401772 <etharp_query+0xbe>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  401728:	2b01      	cmp	r3, #1
  40172a:	d132      	bne.n	401792 <etharp_query+0xde>
    while (p) {
  40172c:	2f00      	cmp	r7, #0
  40172e:	d03c      	beq.n	4017aa <etharp_query+0xf6>
      if (p->type != PBUF_ROM) {
  401730:	7b3b      	ldrb	r3, [r7, #12]
  401732:	2b01      	cmp	r3, #1
  401734:	d137      	bne.n	4017a6 <etharp_query+0xf2>
  401736:	463b      	mov	r3, r7
      p = p->next;
  401738:	681b      	ldr	r3, [r3, #0]
    while (p) {
  40173a:	2b00      	cmp	r3, #0
  40173c:	d03b      	beq.n	4017b6 <etharp_query+0x102>
      if (p->type != PBUF_ROM) {
  40173e:	7b1a      	ldrb	r2, [r3, #12]
  401740:	2a01      	cmp	r2, #1
  401742:	d0f9      	beq.n	401738 <etharp_query+0x84>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  401744:	2200      	movs	r2, #0
  401746:	8919      	ldrh	r1, [r3, #8]
  401748:	2002      	movs	r0, #2
  40174a:	4b28      	ldr	r3, [pc, #160]	; (4017ec <etharp_query+0x138>)
  40174c:	4798      	blx	r3
      if (p != NULL) {
  40174e:	4605      	mov	r5, r0
  401750:	b138      	cbz	r0, 401762 <etharp_query+0xae>
        if (pbuf_copy(p, q) != ERR_OK) {
  401752:	4639      	mov	r1, r7
  401754:	4628      	mov	r0, r5
  401756:	4b26      	ldr	r3, [pc, #152]	; (4017f0 <etharp_query+0x13c>)
  401758:	4798      	blx	r3
  40175a:	b380      	cbz	r0, 4017be <etharp_query+0x10a>
          pbuf_free(p);
  40175c:	4628      	mov	r0, r5
  40175e:	4b25      	ldr	r3, [pc, #148]	; (4017f4 <etharp_query+0x140>)
  401760:	4798      	blx	r3
      result = ERR_MEM;
  401762:	f04f 30ff 	mov.w	r0, #4294967295
  401766:	e014      	b.n	401792 <etharp_query+0xde>
    result = etharp_request(netif, ipaddr);
  401768:	4629      	mov	r1, r5
  40176a:	4630      	mov	r0, r6
  40176c:	4b1e      	ldr	r3, [pc, #120]	; (4017e8 <etharp_query+0x134>)
  40176e:	4798      	blx	r3
  401770:	e00f      	b.n	401792 <etharp_query+0xde>
    ETHARP_SET_HINT(netif, i);
  401772:	4b21      	ldr	r3, [pc, #132]	; (4017f8 <etharp_query+0x144>)
  401774:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  401776:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  40177a:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
  40177e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401782:	9200      	str	r2, [sp, #0]
  401784:	330c      	adds	r3, #12
  401786:	f106 0229 	add.w	r2, r6, #41	; 0x29
  40178a:	4639      	mov	r1, r7
  40178c:	4630      	mov	r0, r6
  40178e:	4c1b      	ldr	r4, [pc, #108]	; (4017fc <etharp_query+0x148>)
  401790:	47a0      	blx	r4
}
  401792:	b003      	add	sp, #12
  401794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
  401796:	f06f 000f 	mvn.w	r0, #15
  40179a:	e7fa      	b.n	401792 <etharp_query+0xde>
  40179c:	f06f 000f 	mvn.w	r0, #15
  4017a0:	e7f7      	b.n	401792 <etharp_query+0xde>
    return (err_t)i;
  4017a2:	4620      	mov	r0, r4
  4017a4:	e7f5      	b.n	401792 <etharp_query+0xde>
      if (p->type != PBUF_ROM) {
  4017a6:	463b      	mov	r3, r7
  4017a8:	e7cc      	b.n	401744 <etharp_query+0x90>
      pbuf_ref(p);
  4017aa:	4638      	mov	r0, r7
  4017ac:	4b14      	ldr	r3, [pc, #80]	; (401800 <etharp_query+0x14c>)
  4017ae:	4798      	blx	r3
      result = ERR_MEM;
  4017b0:	f04f 30ff 	mov.w	r0, #4294967295
  4017b4:	e7ed      	b.n	401792 <etharp_query+0xde>
      pbuf_ref(p);
  4017b6:	4638      	mov	r0, r7
  4017b8:	4b11      	ldr	r3, [pc, #68]	; (401800 <etharp_query+0x14c>)
  4017ba:	4798      	blx	r3
      p = q;
  4017bc:	463d      	mov	r5, r7
      if (arp_table[i].q != NULL) {
  4017be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  4017c2:	4a08      	ldr	r2, [pc, #32]	; (4017e4 <etharp_query+0x130>)
  4017c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
  4017c8:	b108      	cbz	r0, 4017ce <etharp_query+0x11a>
        pbuf_free(arp_table[i].q);
  4017ca:	4b0a      	ldr	r3, [pc, #40]	; (4017f4 <etharp_query+0x140>)
  4017cc:	4798      	blx	r3
      arp_table[i].q = p;
  4017ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  4017d2:	4a04      	ldr	r2, [pc, #16]	; (4017e4 <etharp_query+0x130>)
  4017d4:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      result = ERR_OK;
  4017d8:	2000      	movs	r0, #0
  4017da:	e7da      	b.n	401792 <etharp_query+0xde>
  4017dc:	00401ee5 	.word	0x00401ee5
  4017e0:	0040126d 	.word	0x0040126d
  4017e4:	20400a74 	.word	0x20400a74
  4017e8:	00401545 	.word	0x00401545
  4017ec:	00402c71 	.word	0x00402c71
  4017f0:	00402e79 	.word	0x00402e79
  4017f4:	00402c19 	.word	0x00402c19
  4017f8:	20400b64 	.word	0x20400b64
  4017fc:	00406365 	.word	0x00406365
  401800:	00402e3b 	.word	0x00402e3b

00401804 <etharp_output>:
{
  401804:	b570      	push	{r4, r5, r6, lr}
  401806:	b084      	sub	sp, #16
  401808:	4605      	mov	r5, r0
  40180a:	460e      	mov	r6, r1
  40180c:	4614      	mov	r4, r2
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  40180e:	4601      	mov	r1, r0
  401810:	6810      	ldr	r0, [r2, #0]
  401812:	4b38      	ldr	r3, [pc, #224]	; (4018f4 <etharp_output+0xf0>)
  401814:	4798      	blx	r3
  401816:	2800      	cmp	r0, #0
  401818:	d15c      	bne.n	4018d4 <etharp_output+0xd0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
  40181a:	6823      	ldr	r3, [r4, #0]
  40181c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  401820:	2ae0      	cmp	r2, #224	; 0xe0
  401822:	d023      	beq.n	40186c <etharp_output+0x68>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  401824:	686a      	ldr	r2, [r5, #4]
  401826:	405a      	eors	r2, r3
  401828:	68a9      	ldr	r1, [r5, #8]
  40182a:	420a      	tst	r2, r1
  40182c:	d009      	beq.n	401842 <etharp_output+0x3e>
        !ip4_addr_islinklocal(ipaddr)) {
  40182e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  401830:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  401834:	4293      	cmp	r3, r2
  401836:	d004      	beq.n	401842 <etharp_output+0x3e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  401838:	68eb      	ldr	r3, [r5, #12]
  40183a:	2b00      	cmp	r3, #0
  40183c:	d056      	beq.n	4018ec <etharp_output+0xe8>
            dst_addr = netif_ip4_gw(netif);
  40183e:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  401842:	4b2d      	ldr	r3, [pc, #180]	; (4018f8 <etharp_output+0xf4>)
  401844:	781a      	ldrb	r2, [r3, #0]
  401846:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  40184a:	4b2c      	ldr	r3, [pc, #176]	; (4018fc <etharp_output+0xf8>)
  40184c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  401850:	7d1b      	ldrb	r3, [r3, #20]
  401852:	2b01      	cmp	r3, #1
  401854:	d907      	bls.n	401866 <etharp_output+0x62>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  401856:	460b      	mov	r3, r1
  401858:	4928      	ldr	r1, [pc, #160]	; (4018fc <etharp_output+0xf8>)
  40185a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40185e:	6821      	ldr	r1, [r4, #0]
  401860:	685b      	ldr	r3, [r3, #4]
  401862:	4299      	cmp	r1, r3
  401864:	d018      	beq.n	401898 <etharp_output+0x94>
  401866:	4b25      	ldr	r3, [pc, #148]	; (4018fc <etharp_output+0xf8>)
{
  401868:	2200      	movs	r2, #0
  40186a:	e01e      	b.n	4018aa <etharp_output+0xa6>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  40186c:	2301      	movs	r3, #1
  40186e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  401872:	2300      	movs	r3, #0
  401874:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  401878:	235e      	movs	r3, #94	; 0x5e
  40187a:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  40187e:	7863      	ldrb	r3, [r4, #1]
  401880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401884:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  401888:	78a3      	ldrb	r3, [r4, #2]
  40188a:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  40188e:	78e3      	ldrb	r3, [r4, #3]
  401890:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
  401894:	ab02      	add	r3, sp, #8
  401896:	e01e      	b.n	4018d6 <etharp_output+0xd2>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  401898:	4631      	mov	r1, r6
  40189a:	4628      	mov	r0, r5
  40189c:	4b18      	ldr	r3, [pc, #96]	; (401900 <etharp_output+0xfc>)
  40189e:	4798      	blx	r3
  4018a0:	e022      	b.n	4018e8 <etharp_output+0xe4>
  4018a2:	3201      	adds	r2, #1
  4018a4:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  4018a6:	2a0a      	cmp	r2, #10
  4018a8:	d00e      	beq.n	4018c8 <etharp_output+0xc4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  4018aa:	7d19      	ldrb	r1, [r3, #20]
  4018ac:	2901      	cmp	r1, #1
  4018ae:	d9f8      	bls.n	4018a2 <etharp_output+0x9e>
  4018b0:	6820      	ldr	r0, [r4, #0]
  4018b2:	6859      	ldr	r1, [r3, #4]
  4018b4:	4288      	cmp	r0, r1
  4018b6:	d1f4      	bne.n	4018a2 <etharp_output+0x9e>
        ETHARP_SET_HINT(netif, i);
  4018b8:	b2d2      	uxtb	r2, r2
  4018ba:	4b0f      	ldr	r3, [pc, #60]	; (4018f8 <etharp_output+0xf4>)
  4018bc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  4018be:	4631      	mov	r1, r6
  4018c0:	4628      	mov	r0, r5
  4018c2:	4b0f      	ldr	r3, [pc, #60]	; (401900 <etharp_output+0xfc>)
  4018c4:	4798      	blx	r3
  4018c6:	e00f      	b.n	4018e8 <etharp_output+0xe4>
    return etharp_query(netif, dst_addr, q);
  4018c8:	4632      	mov	r2, r6
  4018ca:	4621      	mov	r1, r4
  4018cc:	4628      	mov	r0, r5
  4018ce:	4b0d      	ldr	r3, [pc, #52]	; (401904 <etharp_output+0x100>)
  4018d0:	4798      	blx	r3
  4018d2:	e009      	b.n	4018e8 <etharp_output+0xe4>
    dest = (const struct eth_addr *)&ethbroadcast;
  4018d4:	4b0c      	ldr	r3, [pc, #48]	; (401908 <etharp_output+0x104>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  4018d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4018da:	9200      	str	r2, [sp, #0]
  4018dc:	f105 0229 	add.w	r2, r5, #41	; 0x29
  4018e0:	4631      	mov	r1, r6
  4018e2:	4628      	mov	r0, r5
  4018e4:	4c09      	ldr	r4, [pc, #36]	; (40190c <etharp_output+0x108>)
  4018e6:	47a0      	blx	r4
}
  4018e8:	b004      	add	sp, #16
  4018ea:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
  4018ec:	f06f 0003 	mvn.w	r0, #3
  4018f0:	e7fa      	b.n	4018e8 <etharp_output+0xe4>
  4018f2:	bf00      	nop
  4018f4:	00401ee5 	.word	0x00401ee5
  4018f8:	20400b64 	.word	0x20400b64
  4018fc:	20400a74 	.word	0x20400a74
  401900:	004015e9 	.word	0x004015e9
  401904:	004016b5 	.word	0x004016b5
  401908:	0040a4a8 	.word	0x0040a4a8
  40190c:	00406365 	.word	0x00406365

00401910 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  401910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401914:	b086      	sub	sp, #24
  401916:	4606      	mov	r6, r0
  401918:	4688      	mov	r8, r1
  40191a:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  40191c:	2200      	movs	r2, #0
  40191e:	2124      	movs	r1, #36	; 0x24
  401920:	2001      	movs	r0, #1
  401922:	4b21      	ldr	r3, [pc, #132]	; (4019a8 <icmp_send_response+0x98>)
  401924:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
  401926:	2800      	cmp	r0, #0
  401928:	d03b      	beq.n	4019a2 <icmp_send_response+0x92>
  40192a:	4605      	mov	r5, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  40192c:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  401930:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  401932:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
  401936:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
  401938:	2300      	movs	r3, #0
  40193a:	7123      	strb	r3, [r4, #4]
  40193c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
  40193e:	71a3      	strb	r3, [r4, #6]
  401940:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  401942:	6847      	ldr	r7, [r0, #4]
  401944:	6873      	ldr	r3, [r6, #4]
  401946:	681e      	ldr	r6, [r3, #0]
  401948:	6858      	ldr	r0, [r3, #4]
  40194a:	6899      	ldr	r1, [r3, #8]
  40194c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401950:	60be      	str	r6, [r7, #8]
  401952:	60f8      	str	r0, [r7, #12]
  401954:	6139      	str	r1, [r7, #16]
  401956:	f8c7 c014 	str.w	ip, [r7, #20]
  40195a:	691e      	ldr	r6, [r3, #16]
  40195c:	6958      	ldr	r0, [r3, #20]
  40195e:	6999      	ldr	r1, [r3, #24]
  401960:	61be      	str	r6, [r7, #24]
  401962:	61f8      	str	r0, [r7, #28]
  401964:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  401966:	f8de 300c 	ldr.w	r3, [lr, #12]
  40196a:	a806      	add	r0, sp, #24
  40196c:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  401970:	4b0e      	ldr	r3, [pc, #56]	; (4019ac <icmp_send_response+0x9c>)
  401972:	4798      	blx	r3
#endif
  if (netif != NULL) {
  401974:	4607      	mov	r7, r0
  401976:	b188      	cbz	r0, 40199c <icmp_send_response+0x8c>
    /* calculate checksum */
    icmphdr->chksum = 0;
  401978:	2600      	movs	r6, #0
  40197a:	70a6      	strb	r6, [r4, #2]
  40197c:	70e6      	strb	r6, [r4, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  40197e:	8969      	ldrh	r1, [r5, #10]
  401980:	4620      	mov	r0, r4
  401982:	4b0b      	ldr	r3, [pc, #44]	; (4019b0 <icmp_send_response+0xa0>)
  401984:	4798      	blx	r3
  401986:	8060      	strh	r0, [r4, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  401988:	9702      	str	r7, [sp, #8]
  40198a:	2301      	movs	r3, #1
  40198c:	9301      	str	r3, [sp, #4]
  40198e:	9600      	str	r6, [sp, #0]
  401990:	23ff      	movs	r3, #255	; 0xff
  401992:	aa05      	add	r2, sp, #20
  401994:	4631      	mov	r1, r6
  401996:	4628      	mov	r0, r5
  401998:	4c06      	ldr	r4, [pc, #24]	; (4019b4 <icmp_send_response+0xa4>)
  40199a:	47a0      	blx	r4
  }
  pbuf_free(q);
  40199c:	4628      	mov	r0, r5
  40199e:	4b06      	ldr	r3, [pc, #24]	; (4019b8 <icmp_send_response+0xa8>)
  4019a0:	4798      	blx	r3
}
  4019a2:	b006      	add	sp, #24
  4019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019a8:	00402c71 	.word	0x00402c71
  4019ac:	00401b5d 	.word	0x00401b5d
  4019b0:	0040119d 	.word	0x0040119d
  4019b4:	00401eb5 	.word	0x00401eb5
  4019b8:	00402c19 	.word	0x00402c19

004019bc <icmp_input>:
{
  4019bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019c0:	b085      	sub	sp, #20
  4019c2:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
  4019c4:	4b52      	ldr	r3, [pc, #328]	; (401b10 <icmp_input+0x154>)
  4019c6:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
  4019c8:	7834      	ldrb	r4, [r6, #0]
  4019ca:	f004 040f 	and.w	r4, r4, #15
  4019ce:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
  4019d0:	2c13      	cmp	r4, #19
  4019d2:	d916      	bls.n	401a02 <icmp_input+0x46>
  4019d4:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
  4019d6:	8943      	ldrh	r3, [r0, #10]
  4019d8:	2b03      	cmp	r3, #3
  4019da:	d912      	bls.n	401a02 <icmp_input+0x46>
  type = *((u8_t *)p->payload);
  4019dc:	6843      	ldr	r3, [r0, #4]
  switch (type) {
  4019de:	781b      	ldrb	r3, [r3, #0]
  4019e0:	2b08      	cmp	r3, #8
  4019e2:	f040 8090 	bne.w	401b06 <icmp_input+0x14a>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  4019e6:	4b4a      	ldr	r3, [pc, #296]	; (401b10 <icmp_input+0x154>)
  4019e8:	6958      	ldr	r0, [r3, #20]
  4019ea:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  4019ee:	2be0      	cmp	r3, #224	; 0xe0
  4019f0:	d028      	beq.n	401a44 <icmp_input+0x88>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  4019f2:	4b47      	ldr	r3, [pc, #284]	; (401b10 <icmp_input+0x154>)
  4019f4:	6819      	ldr	r1, [r3, #0]
  4019f6:	4b47      	ldr	r3, [pc, #284]	; (401b14 <icmp_input+0x158>)
  4019f8:	4798      	blx	r3
  4019fa:	bb18      	cbnz	r0, 401a44 <icmp_input+0x88>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  4019fc:	892b      	ldrh	r3, [r5, #8]
  4019fe:	2b07      	cmp	r3, #7
  401a00:	d805      	bhi.n	401a0e <icmp_input+0x52>
  pbuf_free(p);
  401a02:	4628      	mov	r0, r5
  401a04:	4b44      	ldr	r3, [pc, #272]	; (401b18 <icmp_input+0x15c>)
  401a06:	4798      	blx	r3
}
  401a08:	b005      	add	sp, #20
  401a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (inet_chksum_pbuf(p) != 0) {
  401a0e:	4628      	mov	r0, r5
  401a10:	4b42      	ldr	r3, [pc, #264]	; (401b1c <icmp_input+0x160>)
  401a12:	4798      	blx	r3
  401a14:	b9d0      	cbnz	r0, 401a4c <icmp_input+0x90>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  401a16:	f104 010e 	add.w	r1, r4, #14
  401a1a:	4628      	mov	r0, r5
  401a1c:	4b40      	ldr	r3, [pc, #256]	; (401b20 <icmp_input+0x164>)
  401a1e:	4798      	blx	r3
  401a20:	2800      	cmp	r0, #0
  401a22:	d033      	beq.n	401a8c <icmp_input+0xd0>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  401a24:	8929      	ldrh	r1, [r5, #8]
  401a26:	4421      	add	r1, r4
  401a28:	2200      	movs	r2, #0
  401a2a:	b289      	uxth	r1, r1
  401a2c:	2002      	movs	r0, #2
  401a2e:	4b3d      	ldr	r3, [pc, #244]	; (401b24 <icmp_input+0x168>)
  401a30:	4798      	blx	r3
      if (r == NULL) {
  401a32:	4680      	mov	r8, r0
  401a34:	b130      	cbz	r0, 401a44 <icmp_input+0x88>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  401a36:	8942      	ldrh	r2, [r0, #10]
  401a38:	f104 0308 	add.w	r3, r4, #8
  401a3c:	429a      	cmp	r2, r3
  401a3e:	d209      	bcs.n	401a54 <icmp_input+0x98>
        pbuf_free(r);
  401a40:	4b35      	ldr	r3, [pc, #212]	; (401b18 <icmp_input+0x15c>)
  401a42:	4798      	blx	r3
  pbuf_free(p);
  401a44:	4628      	mov	r0, r5
  401a46:	4b34      	ldr	r3, [pc, #208]	; (401b18 <icmp_input+0x15c>)
  401a48:	4798      	blx	r3
  return;
  401a4a:	e7dd      	b.n	401a08 <icmp_input+0x4c>
        pbuf_free(p);
  401a4c:	4628      	mov	r0, r5
  401a4e:	4b32      	ldr	r3, [pc, #200]	; (401b18 <icmp_input+0x15c>)
  401a50:	4798      	blx	r3
        return;
  401a52:	e7d9      	b.n	401a08 <icmp_input+0x4c>
      MEMCPY(r->payload, iphdr_in, hlen);
  401a54:	4622      	mov	r2, r4
  401a56:	4631      	mov	r1, r6
  401a58:	6840      	ldr	r0, [r0, #4]
  401a5a:	4b33      	ldr	r3, [pc, #204]	; (401b28 <icmp_input+0x16c>)
  401a5c:	4798      	blx	r3
      if (pbuf_header(r, (s16_t)-hlen)) {
  401a5e:	4261      	negs	r1, r4
  401a60:	4640      	mov	r0, r8
  401a62:	4b2f      	ldr	r3, [pc, #188]	; (401b20 <icmp_input+0x164>)
  401a64:	4798      	blx	r3
  401a66:	b118      	cbz	r0, 401a70 <icmp_input+0xb4>
        pbuf_free(r);
  401a68:	4640      	mov	r0, r8
  401a6a:	4b2b      	ldr	r3, [pc, #172]	; (401b18 <icmp_input+0x15c>)
  401a6c:	4798      	blx	r3
        goto icmperr;
  401a6e:	e7e9      	b.n	401a44 <icmp_input+0x88>
      if (pbuf_copy(r, p) != ERR_OK) {
  401a70:	4629      	mov	r1, r5
  401a72:	4640      	mov	r0, r8
  401a74:	4b2d      	ldr	r3, [pc, #180]	; (401b2c <icmp_input+0x170>)
  401a76:	4798      	blx	r3
  401a78:	b118      	cbz	r0, 401a82 <icmp_input+0xc6>
        pbuf_free(r);
  401a7a:	4640      	mov	r0, r8
  401a7c:	4b26      	ldr	r3, [pc, #152]	; (401b18 <icmp_input+0x15c>)
  401a7e:	4798      	blx	r3
        goto icmperr;
  401a80:	e7e0      	b.n	401a44 <icmp_input+0x88>
      pbuf_free(p);
  401a82:	4628      	mov	r0, r5
  401a84:	4b24      	ldr	r3, [pc, #144]	; (401b18 <icmp_input+0x15c>)
  401a86:	4798      	blx	r3
      p = r;
  401a88:	4645      	mov	r5, r8
  401a8a:	e008      	b.n	401a9e <icmp_input+0xe2>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  401a8c:	f64f 71f2 	movw	r1, #65522	; 0xfff2
  401a90:	1b09      	subs	r1, r1, r4
  401a92:	b209      	sxth	r1, r1
  401a94:	4628      	mov	r0, r5
  401a96:	4b22      	ldr	r3, [pc, #136]	; (401b20 <icmp_input+0x164>)
  401a98:	4798      	blx	r3
  401a9a:	2800      	cmp	r0, #0
  401a9c:	d1d2      	bne.n	401a44 <icmp_input+0x88>
    iecho = (struct icmp_echo_hdr *)p->payload;
  401a9e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
  401aa2:	4621      	mov	r1, r4
  401aa4:	4628      	mov	r0, r5
  401aa6:	4b1e      	ldr	r3, [pc, #120]	; (401b20 <icmp_input+0x164>)
  401aa8:	4798      	blx	r3
  401aaa:	bb60      	cbnz	r0, 401b06 <icmp_input+0x14a>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  401aac:	686e      	ldr	r6, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
  401aae:	4b18      	ldr	r3, [pc, #96]	; (401b10 <icmp_input+0x154>)
  401ab0:	695a      	ldr	r2, [r3, #20]
  401ab2:	60f2      	str	r2, [r6, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  401ab4:	691b      	ldr	r3, [r3, #16]
  401ab6:	6133      	str	r3, [r6, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  401ab8:	2300      	movs	r3, #0
  401aba:	f888 3000 	strb.w	r3, [r8]
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  401abe:	f8b8 3002 	ldrh.w	r3, [r8, #2]
  401ac2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
  401ac6:	4293      	cmp	r3, r2
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  401ac8:	bf8c      	ite	hi
  401aca:	3309      	addhi	r3, #9
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  401acc:	3308      	addls	r3, #8
  401ace:	f8a8 3002 	strh.w	r3, [r8, #2]
      IPH_TTL_SET(iphdr, ICMP_TTL);
  401ad2:	f04f 09ff 	mov.w	r9, #255	; 0xff
  401ad6:	f886 9008 	strb.w	r9, [r6, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  401ada:	f04f 0800 	mov.w	r8, #0
  401ade:	f886 800a 	strb.w	r8, [r6, #10]
  401ae2:	f886 800b 	strb.w	r8, [r6, #11]
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  401ae6:	4621      	mov	r1, r4
  401ae8:	4630      	mov	r0, r6
  401aea:	4b11      	ldr	r3, [pc, #68]	; (401b30 <icmp_input+0x174>)
  401aec:	4798      	blx	r3
  401aee:	8170      	strh	r0, [r6, #10]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  401af0:	9702      	str	r7, [sp, #8]
  401af2:	2301      	movs	r3, #1
  401af4:	9301      	str	r3, [sp, #4]
  401af6:	f8cd 8000 	str.w	r8, [sp]
  401afa:	464b      	mov	r3, r9
  401afc:	4642      	mov	r2, r8
  401afe:	490d      	ldr	r1, [pc, #52]	; (401b34 <icmp_input+0x178>)
  401b00:	4628      	mov	r0, r5
  401b02:	4c0d      	ldr	r4, [pc, #52]	; (401b38 <icmp_input+0x17c>)
  401b04:	47a0      	blx	r4
  pbuf_free(p);
  401b06:	4628      	mov	r0, r5
  401b08:	4b03      	ldr	r3, [pc, #12]	; (401b18 <icmp_input+0x15c>)
  401b0a:	4798      	blx	r3
  return;
  401b0c:	e77c      	b.n	401a08 <icmp_input+0x4c>
  401b0e:	bf00      	nop
  401b10:	20401e68 	.word	0x20401e68
  401b14:	00401ee5 	.word	0x00401ee5
  401b18:	00402c19 	.word	0x00402c19
  401b1c:	004011ad 	.word	0x004011ad
  401b20:	00402bf9 	.word	0x00402bf9
  401b24:	00402c71 	.word	0x00402c71
  401b28:	00406fc1 	.word	0x00406fc1
  401b2c:	00402e79 	.word	0x00402e79
  401b30:	0040119d 	.word	0x0040119d
  401b34:	20401e7c 	.word	0x20401e7c
  401b38:	00401eb5 	.word	0x00401eb5

00401b3c <icmp_dest_unreach>:
{
  401b3c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
  401b3e:	460a      	mov	r2, r1
  401b40:	2103      	movs	r1, #3
  401b42:	4b01      	ldr	r3, [pc, #4]	; (401b48 <icmp_dest_unreach+0xc>)
  401b44:	4798      	blx	r3
  401b46:	bd08      	pop	{r3, pc}
  401b48:	00401911 	.word	0x00401911

00401b4c <icmp_time_exceeded>:
{
  401b4c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
  401b4e:	460a      	mov	r2, r1
  401b50:	210b      	movs	r1, #11
  401b52:	4b01      	ldr	r3, [pc, #4]	; (401b58 <icmp_time_exceeded+0xc>)
  401b54:	4798      	blx	r3
  401b56:	bd08      	pop	{r3, pc}
  401b58:	00401911 	.word	0x00401911

00401b5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  401b5c:	b430      	push	{r4, r5}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401b5e:	4b16      	ldr	r3, [pc, #88]	; (401bb8 <ip4_route+0x5c>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	b993      	cbnz	r3, 401b8a <ip4_route+0x2e>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  401b64:	4b15      	ldr	r3, [pc, #84]	; (401bbc <ip4_route+0x60>)
  401b66:	681b      	ldr	r3, [r3, #0]
  401b68:	b14b      	cbz	r3, 401b7e <ip4_route+0x22>
  401b6a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
  401b6e:	f002 0205 	and.w	r2, r2, #5
  401b72:	2a05      	cmp	r2, #5
  401b74:	d11e      	bne.n	401bb4 <ip4_route+0x58>
  401b76:	685a      	ldr	r2, [r3, #4]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  401b78:	2a00      	cmp	r2, #0
  401b7a:	bf08      	it	eq
  401b7c:	2300      	moveq	r3, #0
  }

  return netif_default;
}
  401b7e:	4618      	mov	r0, r3
  401b80:	bc30      	pop	{r4, r5}
  401b82:	4770      	bx	lr
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401b84:	681b      	ldr	r3, [r3, #0]
  401b86:	2b00      	cmp	r3, #0
  401b88:	d0ec      	beq.n	401b64 <ip4_route+0x8>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  401b8a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
  401b8e:	f002 0105 	and.w	r1, r2, #5
  401b92:	2905      	cmp	r1, #5
  401b94:	d1f6      	bne.n	401b84 <ip4_route+0x28>
  401b96:	6859      	ldr	r1, [r3, #4]
  401b98:	2900      	cmp	r1, #0
  401b9a:	d0f3      	beq.n	401b84 <ip4_route+0x28>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  401b9c:	6804      	ldr	r4, [r0, #0]
  401b9e:	4061      	eors	r1, r4
  401ba0:	689d      	ldr	r5, [r3, #8]
  401ba2:	4229      	tst	r1, r5
  401ba4:	d0eb      	beq.n	401b7e <ip4_route+0x22>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  401ba6:	f012 0f02 	tst.w	r2, #2
  401baa:	d1eb      	bne.n	401b84 <ip4_route+0x28>
  401bac:	68da      	ldr	r2, [r3, #12]
  401bae:	4294      	cmp	r4, r2
  401bb0:	d1e8      	bne.n	401b84 <ip4_route+0x28>
  401bb2:	e7e4      	b.n	401b7e <ip4_route+0x22>
    return NULL;
  401bb4:	2300      	movs	r3, #0
  401bb6:	e7e2      	b.n	401b7e <ip4_route+0x22>
  401bb8:	20404970 	.word	0x20404970
  401bbc:	20404974 	.word	0x20404974

00401bc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  401bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bc4:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  401bc6:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
  401bc8:	783e      	ldrb	r6, [r7, #0]
  401bca:	0933      	lsrs	r3, r6, #4
  401bcc:	2b04      	cmp	r3, #4
  401bce:	d004      	beq.n	401bda <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  401bd0:	4b69      	ldr	r3, [pc, #420]	; (401d78 <ip4_input+0x1b8>)
  401bd2:	4798      	blx	r3
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
  401bd4:	2000      	movs	r0, #0
  401bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bda:	4688      	mov	r8, r1
  iphdr_hlen = IPH_HL(iphdr);
  401bdc:	f006 060f 	and.w	r6, r6, #15
  iphdr_hlen *= 4;
  401be0:	00b6      	lsls	r6, r6, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  401be2:	8878      	ldrh	r0, [r7, #2]
  401be4:	4b65      	ldr	r3, [pc, #404]	; (401d7c <ip4_input+0x1bc>)
  401be6:	4798      	blx	r3
  401be8:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
  401bea:	892b      	ldrh	r3, [r5, #8]
  401bec:	4283      	cmp	r3, r0
  401bee:	d81d      	bhi.n	401c2c <ip4_input+0x6c>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  401bf0:	896b      	ldrh	r3, [r5, #10]
  401bf2:	42b3      	cmp	r3, r6
  401bf4:	d31f      	bcc.n	401c36 <ip4_input+0x76>
  401bf6:	892b      	ldrh	r3, [r5, #8]
  401bf8:	42a3      	cmp	r3, r4
  401bfa:	d31c      	bcc.n	401c36 <ip4_input+0x76>
  401bfc:	2e13      	cmp	r6, #19
  401bfe:	d91a      	bls.n	401c36 <ip4_input+0x76>
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  401c00:	4631      	mov	r1, r6
  401c02:	4638      	mov	r0, r7
  401c04:	4b5e      	ldr	r3, [pc, #376]	; (401d80 <ip4_input+0x1c0>)
  401c06:	4798      	blx	r3
  401c08:	b9c8      	cbnz	r0, 401c3e <ip4_input+0x7e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  401c0a:	693b      	ldr	r3, [r7, #16]
  401c0c:	4a5d      	ldr	r2, [pc, #372]	; (401d84 <ip4_input+0x1c4>)
  401c0e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  401c10:	68f9      	ldr	r1, [r7, #12]
  401c12:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  401c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401c18:	2be0      	cmp	r3, #224	; 0xe0
  401c1a:	d014      	beq.n	401c46 <ip4_input+0x86>
  401c1c:	4644      	mov	r4, r8
  401c1e:	f04f 0901 	mov.w	r9, #1
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  401c22:	f8df a160 	ldr.w	sl, [pc, #352]	; 401d84 <ip4_input+0x1c4>
        netif = netif_list;
  401c26:	f8df b184 	ldr.w	fp, [pc, #388]	; 401dac <ip4_input+0x1ec>
  401c2a:	e01f      	b.n	401c6c <ip4_input+0xac>
    pbuf_realloc(p, iphdr_len);
  401c2c:	4601      	mov	r1, r0
  401c2e:	4628      	mov	r0, r5
  401c30:	4b55      	ldr	r3, [pc, #340]	; (401d88 <ip4_input+0x1c8>)
  401c32:	4798      	blx	r3
  401c34:	e7dc      	b.n	401bf0 <ip4_input+0x30>
    pbuf_free(p);
  401c36:	4628      	mov	r0, r5
  401c38:	4b4f      	ldr	r3, [pc, #316]	; (401d78 <ip4_input+0x1b8>)
  401c3a:	4798      	blx	r3
    return ERR_OK;
  401c3c:	e7ca      	b.n	401bd4 <ip4_input+0x14>
      pbuf_free(p);
  401c3e:	4628      	mov	r0, r5
  401c40:	4b4d      	ldr	r3, [pc, #308]	; (401d78 <ip4_input+0x1b8>)
  401c42:	4798      	blx	r3
      return ERR_OK;
  401c44:	e7c6      	b.n	401bd4 <ip4_input+0x14>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
  401c46:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
  401c4a:	f013 0f01 	tst.w	r3, #1
  401c4e:	d026      	beq.n	401c9e <ip4_input+0xde>
  401c50:	f8d8 3004 	ldr.w	r3, [r8, #4]
      netif = inp;
  401c54:	2b00      	cmp	r3, #0
  401c56:	bf14      	ite	ne
  401c58:	4644      	movne	r4, r8
  401c5a:	2400      	moveq	r4, #0
  401c5c:	e022      	b.n	401ca4 <ip4_input+0xe4>
        netif = netif->next;
  401c5e:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
  401c60:	4544      	cmp	r4, r8
        netif = netif->next;
  401c62:	bf08      	it	eq
  401c64:	6824      	ldreq	r4, [r4, #0]
  401c66:	f04f 0900 	mov.w	r9, #0
    } while (netif != NULL);
  401c6a:	b1dc      	cbz	r4, 401ca4 <ip4_input+0xe4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  401c6c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  401c70:	f013 0f01 	tst.w	r3, #1
  401c74:	d009      	beq.n	401c8a <ip4_input+0xca>
  401c76:	6863      	ldr	r3, [r4, #4]
  401c78:	b13b      	cbz	r3, 401c8a <ip4_input+0xca>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  401c7a:	f8da 0014 	ldr.w	r0, [sl, #20]
  401c7e:	4283      	cmp	r3, r0
  401c80:	d010      	beq.n	401ca4 <ip4_input+0xe4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  401c82:	4621      	mov	r1, r4
  401c84:	4b41      	ldr	r3, [pc, #260]	; (401d8c <ip4_input+0x1cc>)
  401c86:	4798      	blx	r3
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  401c88:	b960      	cbnz	r0, 401ca4 <ip4_input+0xe4>
      if (first) {
  401c8a:	f1b9 0f00 	cmp.w	r9, #0
  401c8e:	d0e6      	beq.n	401c5e <ip4_input+0x9e>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
  401c90:	f89a 3014 	ldrb.w	r3, [sl, #20]
  401c94:	2b7f      	cmp	r3, #127	; 0x7f
  401c96:	d004      	beq.n	401ca2 <ip4_input+0xe2>
        netif = netif_list;
  401c98:	f8db 4000 	ldr.w	r4, [fp]
  401c9c:	e7e0      	b.n	401c60 <ip4_input+0xa0>
      netif = NULL;
  401c9e:	2400      	movs	r4, #0
  401ca0:	e000      	b.n	401ca4 <ip4_input+0xe4>
          netif = NULL;
  401ca2:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  401ca4:	4641      	mov	r1, r8
  401ca6:	4b37      	ldr	r3, [pc, #220]	; (401d84 <ip4_input+0x1c4>)
  401ca8:	6918      	ldr	r0, [r3, #16]
  401caa:	4b38      	ldr	r3, [pc, #224]	; (401d8c <ip4_input+0x1cc>)
  401cac:	4798      	blx	r3
  401cae:	2800      	cmp	r0, #0
  401cb0:	d142      	bne.n	401d38 <ip4_input+0x178>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  401cb2:	4b34      	ldr	r3, [pc, #208]	; (401d84 <ip4_input+0x1c4>)
  401cb4:	691b      	ldr	r3, [r3, #16]
  401cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  401cba:	2be0      	cmp	r3, #224	; 0xe0
  401cbc:	d03c      	beq.n	401d38 <ip4_input+0x178>
  if (netif == NULL) {
  401cbe:	2c00      	cmp	r4, #0
  401cc0:	d03e      	beq.n	401d40 <ip4_input+0x180>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  401cc2:	88fb      	ldrh	r3, [r7, #6]
  401cc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  401cc8:	b29b      	uxth	r3, r3
  401cca:	b13b      	cbz	r3, 401cdc <ip4_input+0x11c>
    p = ip4_reass(p);
  401ccc:	4628      	mov	r0, r5
  401cce:	4b30      	ldr	r3, [pc, #192]	; (401d90 <ip4_input+0x1d0>)
  401cd0:	4798      	blx	r3
    if (p == NULL) {
  401cd2:	4605      	mov	r5, r0
  401cd4:	2800      	cmp	r0, #0
  401cd6:	f43f af7d 	beq.w	401bd4 <ip4_input+0x14>
    iphdr = (struct ip_hdr *)p->payload;
  401cda:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
  401cdc:	4a29      	ldr	r2, [pc, #164]	; (401d84 <ip4_input+0x1c4>)
  401cde:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
  401ce0:	f8c2 8004 	str.w	r8, [r2, #4]
  ip_data.current_ip4_header = iphdr;
  401ce4:	6097      	str	r7, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  401ce6:	783b      	ldrb	r3, [r7, #0]
  401ce8:	f003 030f 	and.w	r3, r3, #15
  401cec:	009b      	lsls	r3, r3, #2
  401cee:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  401cf0:	4271      	negs	r1, r6
  401cf2:	4628      	mov	r0, r5
  401cf4:	4b27      	ldr	r3, [pc, #156]	; (401d94 <ip4_input+0x1d4>)
  401cf6:	4798      	blx	r3
    switch (IPH_PROTO(iphdr)) {
  401cf8:	7a7b      	ldrb	r3, [r7, #9]
  401cfa:	2b06      	cmp	r3, #6
  401cfc:	d031      	beq.n	401d62 <ip4_input+0x1a2>
  401cfe:	2b11      	cmp	r3, #17
  401d00:	d022      	beq.n	401d48 <ip4_input+0x188>
  401d02:	2b01      	cmp	r3, #1
  401d04:	d032      	beq.n	401d6c <ip4_input+0x1ac>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  401d06:	4621      	mov	r1, r4
  401d08:	4b1e      	ldr	r3, [pc, #120]	; (401d84 <ip4_input+0x1c4>)
  401d0a:	6958      	ldr	r0, [r3, #20]
  401d0c:	4b1f      	ldr	r3, [pc, #124]	; (401d8c <ip4_input+0x1cc>)
  401d0e:	4798      	blx	r3
  401d10:	b970      	cbnz	r0, 401d30 <ip4_input+0x170>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  401d12:	4b1c      	ldr	r3, [pc, #112]	; (401d84 <ip4_input+0x1c4>)
  401d14:	695b      	ldr	r3, [r3, #20]
  401d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  401d1a:	2be0      	cmp	r3, #224	; 0xe0
  401d1c:	d008      	beq.n	401d30 <ip4_input+0x170>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  401d1e:	4631      	mov	r1, r6
  401d20:	4628      	mov	r0, r5
  401d22:	4b1d      	ldr	r3, [pc, #116]	; (401d98 <ip4_input+0x1d8>)
  401d24:	4798      	blx	r3
        p->payload = iphdr;
  401d26:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  401d28:	2102      	movs	r1, #2
  401d2a:	4628      	mov	r0, r5
  401d2c:	4b1b      	ldr	r3, [pc, #108]	; (401d9c <ip4_input+0x1dc>)
  401d2e:	4798      	blx	r3
      pbuf_free(p);
  401d30:	4628      	mov	r0, r5
  401d32:	4b11      	ldr	r3, [pc, #68]	; (401d78 <ip4_input+0x1b8>)
  401d34:	4798      	blx	r3
  401d36:	e00b      	b.n	401d50 <ip4_input+0x190>
      pbuf_free(p);
  401d38:	4628      	mov	r0, r5
  401d3a:	4b0f      	ldr	r3, [pc, #60]	; (401d78 <ip4_input+0x1b8>)
  401d3c:	4798      	blx	r3
      return ERR_OK;
  401d3e:	e749      	b.n	401bd4 <ip4_input+0x14>
    pbuf_free(p);
  401d40:	4628      	mov	r0, r5
  401d42:	4b0d      	ldr	r3, [pc, #52]	; (401d78 <ip4_input+0x1b8>)
  401d44:	4798      	blx	r3
    return ERR_OK;
  401d46:	e745      	b.n	401bd4 <ip4_input+0x14>
      udp_input(p, inp);
  401d48:	4641      	mov	r1, r8
  401d4a:	4628      	mov	r0, r5
  401d4c:	4b14      	ldr	r3, [pc, #80]	; (401da0 <ip4_input+0x1e0>)
  401d4e:	4798      	blx	r3
  ip_data.current_netif = NULL;
  401d50:	4b0c      	ldr	r3, [pc, #48]	; (401d84 <ip4_input+0x1c4>)
  401d52:	2200      	movs	r2, #0
  401d54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
  401d56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  401d58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  401d5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  401d5c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  401d5e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
  401d60:	e738      	b.n	401bd4 <ip4_input+0x14>
      tcp_input(p, inp);
  401d62:	4641      	mov	r1, r8
  401d64:	4628      	mov	r0, r5
  401d66:	4b0f      	ldr	r3, [pc, #60]	; (401da4 <ip4_input+0x1e4>)
  401d68:	4798      	blx	r3
      break;
  401d6a:	e7f1      	b.n	401d50 <ip4_input+0x190>
      icmp_input(p, inp);
  401d6c:	4641      	mov	r1, r8
  401d6e:	4628      	mov	r0, r5
  401d70:	4b0d      	ldr	r3, [pc, #52]	; (401da8 <ip4_input+0x1e8>)
  401d72:	4798      	blx	r3
      break;
  401d74:	e7ec      	b.n	401d50 <ip4_input+0x190>
  401d76:	bf00      	nop
  401d78:	00402c19 	.word	0x00402c19
  401d7c:	00401059 	.word	0x00401059
  401d80:	0040119d 	.word	0x0040119d
  401d84:	20401e68 	.word	0x20401e68
  401d88:	00402dc5 	.word	0x00402dc5
  401d8c:	00401ee5 	.word	0x00401ee5
  401d90:	0040215d 	.word	0x0040215d
  401d94:	00402bf9 	.word	0x00402bf9
  401d98:	00402c09 	.word	0x00402c09
  401d9c:	00401b3d 	.word	0x00401b3d
  401da0:	004060e9 	.word	0x004060e9
  401da4:	00404869 	.word	0x00404869
  401da8:	004019bd 	.word	0x004019bd
  401dac:	20404970 	.word	0x20404970

00401db0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  401db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401db4:	b087      	sub	sp, #28
  401db6:	4605      	mov	r5, r0
  401db8:	9101      	str	r1, [sp, #4]
  401dba:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
  401dbe:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  401dc2:	2a00      	cmp	r2, #0
  401dc4:	d05d      	beq.n	401e82 <ip4_output_if_src+0xd2>
  401dc6:	4698      	mov	r8, r3
  401dc8:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  401dca:	2114      	movs	r1, #20
  401dcc:	4b34      	ldr	r3, [pc, #208]	; (401ea0 <ip4_output_if_src+0xf0>)
  401dce:	4798      	blx	r3
  401dd0:	2800      	cmp	r0, #0
  401dd2:	d162      	bne.n	401e9a <ip4_output_if_src+0xea>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  401dd4:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  401dd6:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
  401dda:	f884 9009 	strb.w	r9, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  401dde:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
  401de2:	ea4f 2818 	mov.w	r8, r8, lsr #8
  401de6:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  401dea:	683b      	ldr	r3, [r7, #0]
  401dec:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  401dee:	b29a      	uxth	r2, r3
  401df0:	9202      	str	r2, [sp, #8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  401df2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  401df6:	2345      	movs	r3, #69	; 0x45
  401df8:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
  401dfa:	7066      	strb	r6, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  401dfc:	0236      	lsls	r6, r6, #8
  401dfe:	4333      	orrs	r3, r6
  401e00:	9303      	str	r3, [sp, #12]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  401e02:	8928      	ldrh	r0, [r5, #8]
  401e04:	4e27      	ldr	r6, [pc, #156]	; (401ea4 <ip4_output_if_src+0xf4>)
  401e06:	47b0      	blx	r6
  401e08:	4682      	mov	sl, r0
  401e0a:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  401e0c:	2300      	movs	r3, #0
  401e0e:	71a3      	strb	r3, [r4, #6]
  401e10:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  401e12:	f8df 809c 	ldr.w	r8, [pc, #156]	; 401eb0 <ip4_output_if_src+0x100>
  401e16:	f8b8 0000 	ldrh.w	r0, [r8]
  401e1a:	47b0      	blx	r6
  401e1c:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  401e1e:	f8b8 3000 	ldrh.w	r3, [r8]
  401e22:	3301      	adds	r3, #1
  401e24:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
  401e28:	9b01      	ldr	r3, [sp, #4]
  401e2a:	b333      	cbz	r3, 401e7a <ip4_output_if_src+0xca>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  401e2c:	9b01      	ldr	r3, [sp, #4]
  401e2e:	681b      	ldr	r3, [r3, #0]
  401e30:	60e3      	str	r3, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  401e32:	68e3      	ldr	r3, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  401e34:	0c1a      	lsrs	r2, r3, #16
  401e36:	fa12 f383 	uxtah	r3, r2, r3
  401e3a:	9a03      	ldr	r2, [sp, #12]
  401e3c:	441a      	add	r2, r3
  401e3e:	4616      	mov	r6, r2
  401e40:	9b02      	ldr	r3, [sp, #8]
  401e42:	441e      	add	r6, r3
  401e44:	445e      	add	r6, fp
  401e46:	444e      	add	r6, r9
  401e48:	44b2      	add	sl, r6
  401e4a:	4450      	add	r0, sl
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  401e4c:	fa1f fa80 	uxth.w	sl, r0
  401e50:	eb0a 4010 	add.w	r0, sl, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
  401e54:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  401e58:	43c0      	mvns	r0, r0
  401e5a:	8160      	strh	r0, [r4, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  401e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
  401e60:	b113      	cbz	r3, 401e68 <ip4_output_if_src+0xb8>
  401e62:	892a      	ldrh	r2, [r5, #8]
  401e64:	429a      	cmp	r2, r3
  401e66:	d812      	bhi.n	401e8e <ip4_output_if_src+0xde>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  401e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401e6a:	695b      	ldr	r3, [r3, #20]
  401e6c:	463a      	mov	r2, r7
  401e6e:	4629      	mov	r1, r5
  401e70:	9812      	ldr	r0, [sp, #72]	; 0x48
  401e72:	4798      	blx	r3
}
  401e74:	b007      	add	sp, #28
  401e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  401e7a:	4b0b      	ldr	r3, [pc, #44]	; (401ea8 <ip4_output_if_src+0xf8>)
  401e7c:	681b      	ldr	r3, [r3, #0]
  401e7e:	60e3      	str	r3, [r4, #12]
  401e80:	e7d7      	b.n	401e32 <ip4_output_if_src+0x82>
    ip4_addr_copy(dest_addr, iphdr->dest);
  401e82:	6843      	ldr	r3, [r0, #4]
  401e84:	691b      	ldr	r3, [r3, #16]
  401e86:	af06      	add	r7, sp, #24
  401e88:	f847 3d04 	str.w	r3, [r7, #-4]!
  401e8c:	e7e6      	b.n	401e5c <ip4_output_if_src+0xac>
    return ip4_frag(p, netif, dest);
  401e8e:	463a      	mov	r2, r7
  401e90:	9912      	ldr	r1, [sp, #72]	; 0x48
  401e92:	4628      	mov	r0, r5
  401e94:	4b05      	ldr	r3, [pc, #20]	; (401eac <ip4_output_if_src+0xfc>)
  401e96:	4798      	blx	r3
  401e98:	e7ec      	b.n	401e74 <ip4_output_if_src+0xc4>
      return ERR_BUF;
  401e9a:	f06f 0001 	mvn.w	r0, #1
  401e9e:	e7e9      	b.n	401e74 <ip4_output_if_src+0xc4>
  401ea0:	00402bf9 	.word	0x00402bf9
  401ea4:	00401059 	.word	0x00401059
  401ea8:	0040a3e4 	.word	0x0040a3e4
  401eac:	00402595 	.word	0x00402595
  401eb0:	20400b66 	.word	0x20400b66

00401eb4 <ip4_output_if>:
{
  401eb4:	b530      	push	{r4, r5, lr}
  401eb6:	b085      	sub	sp, #20
  401eb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
  401eba:	4615      	mov	r5, r2
  401ebc:	b11a      	cbz	r2, 401ec6 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
  401ebe:	b109      	cbz	r1, 401ec4 <ip4_output_if+0x10>
  401ec0:	680a      	ldr	r2, [r1, #0]
  401ec2:	b902      	cbnz	r2, 401ec6 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
  401ec4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
  401ec6:	9402      	str	r4, [sp, #8]
  401ec8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
  401ecc:	9201      	str	r2, [sp, #4]
  401ece:	f89d 2020 	ldrb.w	r2, [sp, #32]
  401ed2:	9200      	str	r2, [sp, #0]
  401ed4:	462a      	mov	r2, r5
  401ed6:	4c02      	ldr	r4, [pc, #8]	; (401ee0 <ip4_output_if+0x2c>)
  401ed8:	47a0      	blx	r4
}
  401eda:	b005      	add	sp, #20
  401edc:	bd30      	pop	{r4, r5, pc}
  401ede:	bf00      	nop
  401ee0:	00401db1 	.word	0x00401db1

00401ee4 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  401ee4:	1e43      	subs	r3, r0, #1
  401ee6:	f113 0f03 	cmn.w	r3, #3
  401eea:	d812      	bhi.n	401f12 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  401eec:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
  401ef0:	f013 0f02 	tst.w	r3, #2
  401ef4:	d00f      	beq.n	401f16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  401ef6:	684b      	ldr	r3, [r1, #4]
  401ef8:	4298      	cmp	r0, r3
  401efa:	d00e      	beq.n	401f1a <ip4_addr_isbroadcast_u32+0x36>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  401efc:	688a      	ldr	r2, [r1, #8]
  401efe:	4043      	eors	r3, r0
  401f00:	4213      	tst	r3, r2
  401f02:	d10c      	bne.n	401f1e <ip4_addr_isbroadcast_u32+0x3a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  401f04:	43d2      	mvns	r2, r2
  401f06:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
  401f0a:	bf0c      	ite	eq
  401f0c:	2001      	moveq	r0, #1
  401f0e:	2000      	movne	r0, #0
  401f10:	4770      	bx	lr
  401f12:	2001      	movs	r0, #1
  401f14:	4770      	bx	lr
    return 0;
  401f16:	2000      	movs	r0, #0
  401f18:	4770      	bx	lr
    return 0;
  401f1a:	2000      	movs	r0, #0
  401f1c:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  401f1e:	2000      	movs	r0, #0
  }
}
  401f20:	4770      	bx	lr
	...

00401f24 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  401f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f28:	b085      	sub	sp, #20
  401f2a:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
  401f2c:	6803      	ldr	r3, [r0, #0]
  401f2e:	f10d 0c10 	add.w	ip, sp, #16
  401f32:	f84c 3d04 	str.w	r3, [ip, #-4]!

  rp = buf;
  401f36:	460c      	mov	r4, r1
  int len = 0;
  401f38:	f04f 0800 	mov.w	r8, #0
  401f3c:	46c1      	mov	r9, r8
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  401f3e:	4f27      	ldr	r7, [pc, #156]	; (401fdc <ip4addr_ntoa_r+0xb8>)
  401f40:	f102 0e01 	add.w	lr, r2, #1
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
  401f44:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
  401f48:	4666      	mov	r6, ip
  401f4a:	f89c 3000 	ldrb.w	r3, [ip]
  int len = 0;
  401f4e:	4648      	mov	r0, r9
  401f50:	469a      	mov	sl, r3
  401f52:	e000      	b.n	401f56 <ip4addr_ntoa_r+0x32>
      inv[i++] = (char)('0' + rem);
  401f54:	4628      	mov	r0, r5
      rem = *ap % (u8_t)10;
  401f56:	fba7 310a 	umull	r3, r1, r7, sl
  401f5a:	08c9      	lsrs	r1, r1, #3
  401f5c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401f60:	ebaa 0343 	sub.w	r3, sl, r3, lsl #1
      inv[i++] = (char)('0' + rem);
  401f64:	1c45      	adds	r5, r0, #1
  401f66:	b2ed      	uxtb	r5, r5
  401f68:	3330      	adds	r3, #48	; 0x30
  401f6a:	f10d 0a10 	add.w	sl, sp, #16
  401f6e:	4482      	add	sl, r0
  401f70:	f80a 3c08 	strb.w	r3, [sl, #-8]
    } while (*ap);
  401f74:	f001 0aff 	and.w	sl, r1, #255	; 0xff
  401f78:	2900      	cmp	r1, #0
  401f7a:	d1eb      	bne.n	401f54 <ip4addr_ntoa_r+0x30>
  401f7c:	f886 9000 	strb.w	r9, [r6]
  401f80:	f10c 0c01 	add.w	ip, ip, #1
    while (i--) {
  401f84:	b1ad      	cbz	r5, 401fb2 <ip4addr_ntoa_r+0x8e>
      if (len++ >= buflen) {
  401f86:	f108 0101 	add.w	r1, r8, #1
  401f8a:	4542      	cmp	r2, r8
  401f8c:	dd21      	ble.n	401fd2 <ip4addr_ntoa_r+0xae>
  401f8e:	ab02      	add	r3, sp, #8
  401f90:	181d      	adds	r5, r3, r0
  401f92:	1e63      	subs	r3, r4, #1
  401f94:	4420      	add	r0, r4
  401f96:	1c9e      	adds	r6, r3, #2
      *rp++ = inv[i];
  401f98:	f815 4901 	ldrb.w	r4, [r5], #-1
  401f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
    while (i--) {
  401fa0:	4298      	cmp	r0, r3
  401fa2:	d008      	beq.n	401fb6 <ip4addr_ntoa_r+0x92>
      if (len++ >= buflen) {
  401fa4:	3101      	adds	r1, #1
  401fa6:	4571      	cmp	r1, lr
  401fa8:	d1f5      	bne.n	401f96 <ip4addr_ntoa_r+0x72>
        return NULL;
  401faa:	2000      	movs	r0, #0
    ap++;
  }
  *--rp = 0;
  return buf;
}
  401fac:	b005      	add	sp, #20
  401fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (i--) {
  401fb2:	4641      	mov	r1, r8
  401fb4:	4626      	mov	r6, r4
    if (len++ >= buflen) {
  401fb6:	f101 0801 	add.w	r8, r1, #1
  401fba:	428a      	cmp	r2, r1
  401fbc:	dd0b      	ble.n	401fd6 <ip4addr_ntoa_r+0xb2>
    *rp++ = '.';
  401fbe:	1c74      	adds	r4, r6, #1
  401fc0:	f886 b000 	strb.w	fp, [r6]
  for (n = 0; n < 4; n++) {
  401fc4:	ab04      	add	r3, sp, #16
  401fc6:	459c      	cmp	ip, r3
  401fc8:	d1be      	bne.n	401f48 <ip4addr_ntoa_r+0x24>
  *--rp = 0;
  401fca:	2300      	movs	r3, #0
  401fcc:	7033      	strb	r3, [r6, #0]
  return buf;
  401fce:	9801      	ldr	r0, [sp, #4]
  401fd0:	e7ec      	b.n	401fac <ip4addr_ntoa_r+0x88>
        return NULL;
  401fd2:	2000      	movs	r0, #0
  401fd4:	e7ea      	b.n	401fac <ip4addr_ntoa_r+0x88>
      return NULL;
  401fd6:	2000      	movs	r0, #0
  401fd8:	e7e8      	b.n	401fac <ip4addr_ntoa_r+0x88>
  401fda:	bf00      	nop
  401fdc:	cccccccd 	.word	0xcccccccd

00401fe0 <ip4addr_ntoa>:
{
  401fe0:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  401fe2:	2210      	movs	r2, #16
  401fe4:	4901      	ldr	r1, [pc, #4]	; (401fec <ip4addr_ntoa+0xc>)
  401fe6:	4b02      	ldr	r3, [pc, #8]	; (401ff0 <ip4addr_ntoa+0x10>)
  401fe8:	4798      	blx	r3
}
  401fea:	bd08      	pop	{r3, pc}
  401fec:	20400b68 	.word	0x20400b68
  401ff0:	00401f25 	.word	0x00401f25

00401ff4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  401ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ff8:	4681      	mov	r9, r0
  401ffa:	468a      	mov	sl, r1
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  401ffc:	6845      	ldr	r5, [r0, #4]
  401ffe:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
  402000:	889a      	ldrh	r2, [r3, #4]
  402002:	b322      	cbz	r2, 40204e <ip_reass_free_complete_datagram+0x5a>
  u16_t pbufs_freed = 0;
  402004:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  402006:	f8d9 6004 	ldr.w	r6, [r9, #4]
  while (p != NULL) {
  40200a:	b16e      	cbz	r6, 402028 <ip_reass_free_complete_datagram+0x34>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
  40200c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4020a4 <ip_reass_free_complete_datagram+0xb0>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  402010:	4f1f      	ldr	r7, [pc, #124]	; (402090 <ip_reass_free_complete_datagram+0x9c>)
    iprh = (struct ip_reass_helper *)p->payload;
  402012:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
  402014:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
  402016:	4630      	mov	r0, r6
  402018:	47c0      	blx	r8
    pbufs_freed += clen;
  40201a:	4404      	add	r4, r0
  40201c:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
  40201e:	4630      	mov	r0, r6
  402020:	47b8      	blx	r7
    p = iprh->next_pbuf;
  402022:	462e      	mov	r6, r5
  while (p != NULL) {
  402024:	2d00      	cmp	r5, #0
  402026:	d1f4      	bne.n	402012 <ip_reass_free_complete_datagram+0x1e>
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  402028:	4b1a      	ldr	r3, [pc, #104]	; (402094 <ip_reass_free_complete_datagram+0xa0>)
  40202a:	681b      	ldr	r3, [r3, #0]
  40202c:	4599      	cmp	r9, r3
  40202e:	d029      	beq.n	402084 <ip_reass_free_complete_datagram+0x90>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  402030:	f8d9 3000 	ldr.w	r3, [r9]
  402034:	f8ca 3000 	str.w	r3, [sl]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  402038:	4649      	mov	r1, r9
  40203a:	2004      	movs	r0, #4
  40203c:	4b16      	ldr	r3, [pc, #88]	; (402098 <ip_reass_free_complete_datagram+0xa4>)
  40203e:	4798      	blx	r3
  ip_reass_pbufcount -= pbufs_freed;
  402040:	4a16      	ldr	r2, [pc, #88]	; (40209c <ip_reass_free_complete_datagram+0xa8>)
  402042:	8813      	ldrh	r3, [r2, #0]
  402044:	1b1b      	subs	r3, r3, r4
  402046:	8013      	strh	r3, [r2, #0]
}
  402048:	4620      	mov	r0, r4
  40204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ipr->p = iprh->next_pbuf;
  40204e:	681b      	ldr	r3, [r3, #0]
  402050:	6043      	str	r3, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  402052:	686a      	ldr	r2, [r5, #4]
  402054:	4603      	mov	r3, r0
  402056:	f853 1f08 	ldr.w	r1, [r3, #8]!
  40205a:	685e      	ldr	r6, [r3, #4]
  40205c:	689c      	ldr	r4, [r3, #8]
  40205e:	68d8      	ldr	r0, [r3, #12]
  402060:	6011      	str	r1, [r2, #0]
  402062:	6056      	str	r6, [r2, #4]
  402064:	6094      	str	r4, [r2, #8]
  402066:	60d0      	str	r0, [r2, #12]
  402068:	6919      	ldr	r1, [r3, #16]
  40206a:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  40206c:	2101      	movs	r1, #1
  40206e:	4628      	mov	r0, r5
  402070:	4b0b      	ldr	r3, [pc, #44]	; (4020a0 <ip_reass_free_complete_datagram+0xac>)
  402072:	4798      	blx	r3
    clen = pbuf_clen(p);
  402074:	4628      	mov	r0, r5
  402076:	4b0b      	ldr	r3, [pc, #44]	; (4020a4 <ip_reass_free_complete_datagram+0xb0>)
  402078:	4798      	blx	r3
  40207a:	4604      	mov	r4, r0
    pbuf_free(p);
  40207c:	4628      	mov	r0, r5
  40207e:	4b04      	ldr	r3, [pc, #16]	; (402090 <ip_reass_free_complete_datagram+0x9c>)
  402080:	4798      	blx	r3
  402082:	e7c0      	b.n	402006 <ip_reass_free_complete_datagram+0x12>
    reassdatagrams = ipr->next;
  402084:	f8d9 2000 	ldr.w	r2, [r9]
  402088:	4b02      	ldr	r3, [pc, #8]	; (402094 <ip_reass_free_complete_datagram+0xa0>)
  40208a:	601a      	str	r2, [r3, #0]
  40208c:	e7d4      	b.n	402038 <ip_reass_free_complete_datagram+0x44>
  40208e:	bf00      	nop
  402090:	00402c19 	.word	0x00402c19
  402094:	20400b7c 	.word	0x20400b7c
  402098:	004029d1 	.word	0x004029d1
  40209c:	20400b78 	.word	0x20400b78
  4020a0:	00401b4d 	.word	0x00401b4d
  4020a4:	00402e25 	.word	0x00402e25

004020a8 <ip_reass_remove_oldest_datagram>:
{
  4020a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020ac:	4605      	mov	r5, r0
  4020ae:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
  4020b0:	2600      	movs	r6, #0
    r = reassdatagrams;
  4020b2:	4f1b      	ldr	r7, [pc, #108]	; (402120 <ip_reass_remove_oldest_datagram+0x78>)
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  4020b4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 402124 <ip_reass_remove_oldest_datagram+0x7c>
  4020b8:	e025      	b.n	402106 <ip_reass_remove_oldest_datagram+0x5e>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  4020ba:	f8d5 a010 	ldr.w	sl, [r5, #16]
  4020be:	699a      	ldr	r2, [r3, #24]
  4020c0:	4552      	cmp	r2, sl
  4020c2:	d10e      	bne.n	4020e2 <ip_reass_remove_oldest_datagram+0x3a>
  4020c4:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
  4020c8:	88aa      	ldrh	r2, [r5, #4]
  4020ca:	4592      	cmp	sl, r2
  4020cc:	d109      	bne.n	4020e2 <ip_reass_remove_oldest_datagram+0x3a>
  4020ce:	e001      	b.n	4020d4 <ip_reass_remove_oldest_datagram+0x2c>
  4020d0:	4671      	mov	r1, lr
  4020d2:	4618      	mov	r0, r3
      if (r->next != NULL) {
  4020d4:	681a      	ldr	r2, [r3, #0]
  4020d6:	469e      	mov	lr, r3
  4020d8:	b172      	cbz	r2, 4020f8 <ip_reass_remove_oldest_datagram+0x50>
  4020da:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  4020dc:	695a      	ldr	r2, [r3, #20]
  4020de:	4562      	cmp	r2, ip
  4020e0:	d0eb      	beq.n	4020ba <ip_reass_remove_oldest_datagram+0x12>
        other_datagrams++;
  4020e2:	3401      	adds	r4, #1
        if (oldest == NULL) {
  4020e4:	2800      	cmp	r0, #0
  4020e6:	d0f3      	beq.n	4020d0 <ip_reass_remove_oldest_datagram+0x28>
        } else if (r->timer <= oldest->timer) {
  4020e8:	f893 a01f 	ldrb.w	sl, [r3, #31]
  4020ec:	7fc2      	ldrb	r2, [r0, #31]
  4020ee:	4592      	cmp	sl, r2
  4020f0:	d8f0      	bhi.n	4020d4 <ip_reass_remove_oldest_datagram+0x2c>
  4020f2:	4671      	mov	r1, lr
  4020f4:	4618      	mov	r0, r3
  4020f6:	e7ed      	b.n	4020d4 <ip_reass_remove_oldest_datagram+0x2c>
    if (oldest != NULL) {
  4020f8:	b108      	cbz	r0, 4020fe <ip_reass_remove_oldest_datagram+0x56>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  4020fa:	47c8      	blx	r9
      pbufs_freed += pbufs_freed_current;
  4020fc:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  4020fe:	4546      	cmp	r6, r8
  402100:	da0a      	bge.n	402118 <ip_reass_remove_oldest_datagram+0x70>
  402102:	2c01      	cmp	r4, #1
  402104:	dd08      	ble.n	402118 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
  402106:	683b      	ldr	r3, [r7, #0]
    while (r != NULL) {
  402108:	b133      	cbz	r3, 402118 <ip_reass_remove_oldest_datagram+0x70>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  40210a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  40210e:	2400      	movs	r4, #0
  402110:	4621      	mov	r1, r4
  402112:	46a6      	mov	lr, r4
  402114:	4620      	mov	r0, r4
  402116:	e7e1      	b.n	4020dc <ip_reass_remove_oldest_datagram+0x34>
}
  402118:	4630      	mov	r0, r6
  40211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40211e:	bf00      	nop
  402120:	20400b7c 	.word	0x20400b7c
  402124:	00401ff5 	.word	0x00401ff5

00402128 <ip_reass_tmr>:
  r = reassdatagrams;
  402128:	4b0a      	ldr	r3, [pc, #40]	; (402154 <ip_reass_tmr+0x2c>)
  40212a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
  40212c:	b188      	cbz	r0, 402152 <ip_reass_tmr+0x2a>
{
  40212e:	b570      	push	{r4, r5, r6, lr}
  while (r != NULL) {
  402130:	2400      	movs	r4, #0
      ip_reass_free_complete_datagram(tmp, prev);
  402132:	4e09      	ldr	r6, [pc, #36]	; (402158 <ip_reass_tmr+0x30>)
  402134:	e004      	b.n	402140 <ip_reass_tmr+0x18>
      r = r->next;
  402136:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
  402138:	4621      	mov	r1, r4
  40213a:	47b0      	blx	r6
      r = r->next;
  40213c:	4628      	mov	r0, r5
  while (r != NULL) {
  40213e:	b138      	cbz	r0, 402150 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
  402140:	7fc3      	ldrb	r3, [r0, #31]
  402142:	2b00      	cmp	r3, #0
  402144:	d0f7      	beq.n	402136 <ip_reass_tmr+0xe>
      r->timer--;
  402146:	3b01      	subs	r3, #1
  402148:	77c3      	strb	r3, [r0, #31]
  40214a:	4604      	mov	r4, r0
      r = r->next;
  40214c:	6800      	ldr	r0, [r0, #0]
  40214e:	e7f6      	b.n	40213e <ip_reass_tmr+0x16>
  402150:	bd70      	pop	{r4, r5, r6, pc}
  402152:	4770      	bx	lr
  402154:	20400b7c 	.word	0x20400b7c
  402158:	00401ff5 	.word	0x00401ff5

0040215c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  40215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402160:	b083      	sub	sp, #12
  402162:	4606      	mov	r6, r0
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
  402164:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  402168:	f898 3000 	ldrb.w	r3, [r8]
  40216c:	f003 030f 	and.w	r3, r3, #15
  402170:	2b05      	cmp	r3, #5
  402172:	f040 81b1 	bne.w	4024d8 <ip4_reass+0x37c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  402176:	f8b8 0006 	ldrh.w	r0, [r8, #6]
  40217a:	4c9b      	ldr	r4, [pc, #620]	; (4023e8 <ip4_reass+0x28c>)
  40217c:	47a0      	blx	r4
  40217e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  402182:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  402184:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  402188:	47a0      	blx	r4
  40218a:	f898 5000 	ldrb.w	r5, [r8]
  40218e:	f005 050f 	and.w	r5, r5, #15
  402192:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
  402196:	b2ab      	uxth	r3, r5
  402198:	9301      	str	r3, [sp, #4]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  40219a:	4630      	mov	r0, r6
  40219c:	4b93      	ldr	r3, [pc, #588]	; (4023ec <ip4_reass+0x290>)
  40219e:	4798      	blx	r3
  4021a0:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  4021a2:	4b93      	ldr	r3, [pc, #588]	; (4023f0 <ip4_reass+0x294>)
  4021a4:	881b      	ldrh	r3, [r3, #0]
  4021a6:	4403      	add	r3, r0
  4021a8:	2b0a      	cmp	r3, #10
  4021aa:	dc06      	bgt.n	4021ba <ip4_reass+0x5e>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  4021ac:	4b91      	ldr	r3, [pc, #580]	; (4023f4 <ip4_reass+0x298>)
  4021ae:	681c      	ldr	r4, [r3, #0]
  4021b0:	2c00      	cmp	r4, #0
  4021b2:	d071      	beq.n	402298 <ip4_reass+0x13c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  4021b4:	f8d8 200c 	ldr.w	r2, [r8, #12]
  4021b8:	e00f      	b.n	4021da <ip4_reass+0x7e>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  4021ba:	4601      	mov	r1, r0
  4021bc:	4640      	mov	r0, r8
  4021be:	4b8e      	ldr	r3, [pc, #568]	; (4023f8 <ip4_reass+0x29c>)
  4021c0:	4798      	blx	r3
  4021c2:	2800      	cmp	r0, #0
  4021c4:	f000 8188 	beq.w	4024d8 <ip4_reass+0x37c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  4021c8:	4b89      	ldr	r3, [pc, #548]	; (4023f0 <ip4_reass+0x294>)
  4021ca:	881b      	ldrh	r3, [r3, #0]
  4021cc:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  4021ce:	2b0a      	cmp	r3, #10
  4021d0:	ddec      	ble.n	4021ac <ip4_reass+0x50>
  4021d2:	e181      	b.n	4024d8 <ip4_reass+0x37c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  4021d4:	6824      	ldr	r4, [r4, #0]
  4021d6:	2c00      	cmp	r4, #0
  4021d8:	d05e      	beq.n	402298 <ip4_reass+0x13c>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  4021da:	6963      	ldr	r3, [r4, #20]
  4021dc:	4293      	cmp	r3, r2
  4021de:	d1f9      	bne.n	4021d4 <ip4_reass+0x78>
  4021e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4021e4:	69a1      	ldr	r1, [r4, #24]
  4021e6:	4299      	cmp	r1, r3
  4021e8:	d1f4      	bne.n	4021d4 <ip4_reass+0x78>
  4021ea:	89a1      	ldrh	r1, [r4, #12]
  4021ec:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  4021f0:	4299      	cmp	r1, r3
  4021f2:	d1ef      	bne.n	4021d4 <ip4_reass+0x78>
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
    }
  }

  if (ipr == NULL) {
  4021f4:	2c00      	cmp	r4, #0
  4021f6:	d04f      	beq.n	402298 <ip4_reass+0x13c>
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  4021f8:	f8b8 0006 	ldrh.w	r0, [r8, #6]
  4021fc:	4b7a      	ldr	r3, [pc, #488]	; (4023e8 <ip4_reass+0x28c>)
  4021fe:	4798      	blx	r3
  402200:	f3c0 000c 	ubfx	r0, r0, #0, #13
  402204:	2800      	cmp	r0, #0
  402206:	d078      	beq.n	4022fa <ip4_reass+0x19e>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
  402208:	f8b8 8006 	ldrh.w	r8, [r8, #6]
  if (is_last) {
  40220c:	f018 0820 	ands.w	r8, r8, #32
  402210:	d10a      	bne.n	402228 <ip4_reass+0xcc>
    u16_t datagram_len = (u16_t)(offset + len);
  402212:	9b01      	ldr	r3, [sp, #4]
  402214:	18fb      	adds	r3, r7, r3
  402216:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
  402218:	429f      	cmp	r7, r3
  40221a:	f200 815d 	bhi.w	4024d8 <ip4_reass+0x37c>
  40221e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
  402222:	4293      	cmp	r3, r2
  402224:	f200 8158 	bhi.w	4024d8 <ip4_reass+0x37c>
  fraghdr = (struct ip_hdr*)new_p->payload;
  402228:	f8d6 a004 	ldr.w	sl, [r6, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  40222c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  402230:	4d6d      	ldr	r5, [pc, #436]	; (4023e8 <ip4_reass+0x28c>)
  402232:	47a8      	blx	r5
  402234:	f89a 3000 	ldrb.w	r3, [sl]
  402238:	f003 030f 	and.w	r3, r3, #15
  40223c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
  402240:	fa1f fb80 	uxth.w	fp, r0
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  402244:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  402248:	47a8      	blx	r5
  40224a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  40224e:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
  402250:	f8d6 a004 	ldr.w	sl, [r6, #4]
  iprh->next_pbuf = NULL;
  402254:	2300      	movs	r3, #0
  402256:	f88a 3000 	strb.w	r3, [sl]
  40225a:	f88a 3001 	strb.w	r3, [sl, #1]
  40225e:	f88a 3002 	strb.w	r3, [sl, #2]
  402262:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
  402266:	f8aa 0004 	strh.w	r0, [sl, #4]
  iprh->end = offset + len;
  40226a:	4483      	add	fp, r0
  40226c:	fa1f fb8b 	uxth.w	fp, fp
  402270:	f8aa b006 	strh.w	fp, [sl, #6]
  for (q = ipr->p; q != NULL;) {
  402274:	6862      	ldr	r2, [r4, #4]
  402276:	2a00      	cmp	r2, #0
  402278:	f000 80af 	beq.w	4023da <ip4_reass+0x27e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  40227c:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
  40227e:	8899      	ldrh	r1, [r3, #4]
  402280:	4288      	cmp	r0, r1
  402282:	f0c0 8149 	bcc.w	402518 <ip4_reass+0x3bc>
    } else if (iprh->start == iprh_tmp->start) {
  402286:	f000 811d 	beq.w	4024c4 <ip4_reass+0x368>
    } else if (iprh->start < iprh_tmp->end) {
  40228a:	88da      	ldrh	r2, [r3, #6]
  40228c:	4282      	cmp	r2, r0
  40228e:	f200 8119 	bhi.w	4024c4 <ip4_reass+0x368>
  402292:	f04f 0c01 	mov.w	ip, #1
  402296:	e086      	b.n	4023a6 <ip4_reass+0x24a>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  402298:	2004      	movs	r0, #4
  40229a:	4b58      	ldr	r3, [pc, #352]	; (4023fc <ip4_reass+0x2a0>)
  40229c:	4798      	blx	r3
  if (ipr == NULL) {
  40229e:	4604      	mov	r4, r0
  4022a0:	b1e8      	cbz	r0, 4022de <ip4_reass+0x182>
  memset(ipr, 0, sizeof(struct ip_reassdata));
  4022a2:	2220      	movs	r2, #32
  4022a4:	2100      	movs	r1, #0
  4022a6:	4620      	mov	r0, r4
  4022a8:	4b55      	ldr	r3, [pc, #340]	; (402400 <ip4_reass+0x2a4>)
  4022aa:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  4022ac:	2303      	movs	r3, #3
  4022ae:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
  4022b0:	4b50      	ldr	r3, [pc, #320]	; (4023f4 <ip4_reass+0x298>)
  4022b2:	681a      	ldr	r2, [r3, #0]
  4022b4:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
  4022b6:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  4022b8:	f8d8 2000 	ldr.w	r2, [r8]
  4022bc:	f8d8 e004 	ldr.w	lr, [r8, #4]
  4022c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
  4022c4:	f8d8 100c 	ldr.w	r1, [r8, #12]
  4022c8:	60a2      	str	r2, [r4, #8]
  4022ca:	f8c4 e00c 	str.w	lr, [r4, #12]
  4022ce:	6120      	str	r0, [r4, #16]
  4022d0:	6161      	str	r1, [r4, #20]
  4022d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4022d6:	61a2      	str	r2, [r4, #24]
    if (ipr == NULL) {
  4022d8:	2c00      	cmp	r4, #0
  4022da:	d195      	bne.n	402208 <ip4_reass+0xac>
  4022dc:	e0fc      	b.n	4024d8 <ip4_reass+0x37c>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  4022de:	4649      	mov	r1, r9
  4022e0:	4640      	mov	r0, r8
  4022e2:	4b45      	ldr	r3, [pc, #276]	; (4023f8 <ip4_reass+0x29c>)
  4022e4:	4798      	blx	r3
  4022e6:	4581      	cmp	r9, r0
  4022e8:	f300 80f6 	bgt.w	4024d8 <ip4_reass+0x37c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  4022ec:	2004      	movs	r0, #4
  4022ee:	4b43      	ldr	r3, [pc, #268]	; (4023fc <ip4_reass+0x2a0>)
  4022f0:	4798      	blx	r3
    if (ipr == NULL)
  4022f2:	4604      	mov	r4, r0
  4022f4:	2800      	cmp	r0, #0
  4022f6:	d1d4      	bne.n	4022a2 <ip4_reass+0x146>
  4022f8:	e0ee      	b.n	4024d8 <ip4_reass+0x37c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  4022fa:	89e0      	ldrh	r0, [r4, #14]
  4022fc:	4b3a      	ldr	r3, [pc, #232]	; (4023e8 <ip4_reass+0x28c>)
  4022fe:	4798      	blx	r3
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  402300:	f3c0 000c 	ubfx	r0, r0, #0, #13
  402304:	2800      	cmp	r0, #0
  402306:	f43f af7f 	beq.w	402208 <ip4_reass+0xac>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  40230a:	f8d8 2000 	ldr.w	r2, [r8]
  40230e:	f8d8 e004 	ldr.w	lr, [r8, #4]
  402312:	f8d8 0008 	ldr.w	r0, [r8, #8]
  402316:	f8d8 100c 	ldr.w	r1, [r8, #12]
  40231a:	60a2      	str	r2, [r4, #8]
  40231c:	f8c4 e00c 	str.w	lr, [r4, #12]
  402320:	6120      	str	r0, [r4, #16]
  402322:	6161      	str	r1, [r4, #20]
  402324:	f8d8 2010 	ldr.w	r2, [r8, #16]
  402328:	61a2      	str	r2, [r4, #24]
  40232a:	e76d      	b.n	402208 <ip4_reass+0xac>
      iprh->next_pbuf = q;
  40232c:	f8ca e000 	str.w	lr, [sl]
      if (iprh_prev != NULL) {
  402330:	2b00      	cmp	r3, #0
  402332:	f000 80f6 	beq.w	402522 <ip4_reass+0x3c6>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  402336:	88d9      	ldrh	r1, [r3, #6]
  402338:	4288      	cmp	r0, r1
  40233a:	f0c0 80c3 	bcc.w	4024c4 <ip4_reass+0x368>
  40233e:	8892      	ldrh	r2, [r2, #4]
  402340:	455a      	cmp	r2, fp
  402342:	f0c0 80bf 	bcc.w	4024c4 <ip4_reass+0x368>
        iprh_prev->next_pbuf = new_p;
  402346:	601e      	str	r6, [r3, #0]
        if (iprh_prev->end != iprh->start) {
  402348:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
  40234c:	428b      	cmp	r3, r1
  40234e:	bf18      	it	ne
  402350:	f04f 0c00 	movne.w	ip, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
  402354:	f1b8 0f00 	cmp.w	r8, #0
  402358:	d004      	beq.n	402364 <ip4_reass+0x208>
  40235a:	7fa3      	ldrb	r3, [r4, #30]
  40235c:	f013 0f01 	tst.w	r3, #1
  402360:	f000 80fc 	beq.w	40255c <ip4_reass+0x400>
    if (valid) {
  402364:	f1bc 0f00 	cmp.w	ip, #0
  402368:	d04e      	beq.n	402408 <ip4_reass+0x2ac>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  40236a:	6863      	ldr	r3, [r4, #4]
  40236c:	2b00      	cmp	r3, #0
  40236e:	d038      	beq.n	4023e2 <ip4_reass+0x286>
  402370:	685b      	ldr	r3, [r3, #4]
  402372:	889b      	ldrh	r3, [r3, #4]
  402374:	2b00      	cmp	r3, #0
  402376:	d145      	bne.n	402404 <ip4_reass+0x2a8>
        q = iprh->next_pbuf;
  402378:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
  40237c:	2b00      	cmp	r3, #0
  40237e:	d043      	beq.n	402408 <ip4_reass+0x2ac>
          iprh = (struct ip_reass_helper*)q->payload;
  402380:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
  402382:	8899      	ldrh	r1, [r3, #4]
  402384:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  402388:	4291      	cmp	r1, r2
  40238a:	f040 8092 	bne.w	4024b2 <ip4_reass+0x356>
          q = iprh->next_pbuf;
  40238e:	681a      	ldr	r2, [r3, #0]
        while (q != NULL) {
  402390:	2a00      	cmp	r2, #0
  402392:	d039      	beq.n	402408 <ip4_reass+0x2ac>
          iprh = (struct ip_reass_helper*)q->payload;
  402394:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
  402396:	88d9      	ldrh	r1, [r3, #6]
  402398:	8893      	ldrh	r3, [r2, #4]
  40239a:	4299      	cmp	r1, r3
  40239c:	f040 808c 	bne.w	4024b8 <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper*)q->payload;
  4023a0:	4613      	mov	r3, r2
  4023a2:	e7f4      	b.n	40238e <ip4_reass+0x232>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  4023a4:	4613      	mov	r3, r2
    q = iprh_tmp->next_pbuf;
  4023a6:	f8d3 e000 	ldr.w	lr, [r3]
  for (q = ipr->p; q != NULL;) {
  4023aa:	f1be 0f00 	cmp.w	lr, #0
  4023ae:	f000 80bd 	beq.w	40252c <ip4_reass+0x3d0>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  4023b2:	f8de 2004 	ldr.w	r2, [lr, #4]
    if (iprh->start < iprh_tmp->start) {
  4023b6:	8891      	ldrh	r1, [r2, #4]
  4023b8:	4288      	cmp	r0, r1
  4023ba:	d3b7      	bcc.n	40232c <ip4_reass+0x1d0>
    } else if (iprh->start == iprh_tmp->start) {
  4023bc:	4288      	cmp	r0, r1
  4023be:	f000 8081 	beq.w	4024c4 <ip4_reass+0x368>
    } else if (iprh->start < iprh_tmp->end) {
  4023c2:	f8b2 e006 	ldrh.w	lr, [r2, #6]
  4023c6:	4586      	cmp	lr, r0
  4023c8:	d87c      	bhi.n	4024c4 <ip4_reass+0x368>
      if (iprh_prev != NULL) {
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	d0ea      	beq.n	4023a4 <ip4_reass+0x248>
        if (iprh_prev->end != iprh_tmp->start) {
  4023ce:	88db      	ldrh	r3, [r3, #6]
          valid = 0;
  4023d0:	428b      	cmp	r3, r1
  4023d2:	bf18      	it	ne
  4023d4:	f04f 0c00 	movne.w	ip, #0
  4023d8:	e7e4      	b.n	4023a4 <ip4_reass+0x248>
  int valid = 1;
  4023da:	f04f 0c01 	mov.w	ip, #1
      ipr->p = new_p;
  4023de:	6066      	str	r6, [r4, #4]
  4023e0:	e7b8      	b.n	402354 <ip4_reass+0x1f8>
        valid = 0;
  4023e2:	f04f 0c00 	mov.w	ip, #0
  4023e6:	e00f      	b.n	402408 <ip4_reass+0x2ac>
  4023e8:	00401059 	.word	0x00401059
  4023ec:	00402e25 	.word	0x00402e25
  4023f0:	20400b78 	.word	0x20400b78
  4023f4:	20400b7c 	.word	0x20400b7c
  4023f8:	004020a9 	.word	0x004020a9
  4023fc:	004029b1 	.word	0x004029b1
  402400:	004070f5 	.word	0x004070f5
  402404:	f04f 0c00 	mov.w	ip, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
  402408:	f11c 0300 	adds.w	r3, ip, #0
  40240c:	bf18      	it	ne
  40240e:	2301      	movne	r3, #1
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
  402410:	4957      	ldr	r1, [pc, #348]	; (402570 <ip4_reass+0x414>)
  402412:	880a      	ldrh	r2, [r1, #0]
  402414:	4491      	add	r9, r2
  402416:	f8a1 9000 	strh.w	r9, [r1]
  if (is_last) {
  40241a:	f1b8 0f00 	cmp.w	r8, #0
  40241e:	d106      	bne.n	40242e <ip4_reass+0x2d2>
    u16_t datagram_len = (u16_t)(offset + len);
  402420:	9a01      	ldr	r2, [sp, #4]
  402422:	443a      	add	r2, r7
    ipr->datagram_len = datagram_len;
  402424:	83a2      	strh	r2, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  402426:	7fa2      	ldrb	r2, [r4, #30]
  402428:	f042 0201 	orr.w	r2, r2, #1
  40242c:	77a2      	strb	r2, [r4, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
  40242e:	2b00      	cmp	r3, #0
  402430:	d070      	beq.n	402514 <ip4_reass+0x3b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  402432:	8ba3      	ldrh	r3, [r4, #28]
  402434:	3314      	adds	r3, #20
  402436:	83a3      	strh	r3, [r4, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  402438:	6863      	ldr	r3, [r4, #4]
  40243a:	685e      	ldr	r6, [r3, #4]
  40243c:	6835      	ldr	r5, [r6, #0]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  40243e:	4623      	mov	r3, r4
  402440:	f853 2f08 	ldr.w	r2, [r3, #8]!
  402444:	685f      	ldr	r7, [r3, #4]
  402446:	6898      	ldr	r0, [r3, #8]
  402448:	68d9      	ldr	r1, [r3, #12]
  40244a:	6032      	str	r2, [r6, #0]
  40244c:	6077      	str	r7, [r6, #4]
  40244e:	60b0      	str	r0, [r6, #8]
  402450:	60f1      	str	r1, [r6, #12]
  402452:	691a      	ldr	r2, [r3, #16]
  402454:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  402456:	8ba0      	ldrh	r0, [r4, #28]
  402458:	4b46      	ldr	r3, [pc, #280]	; (402574 <ip4_reass+0x418>)
  40245a:	4798      	blx	r3
  40245c:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  40245e:	2300      	movs	r3, #0
  402460:	71b3      	strb	r3, [r6, #6]
  402462:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  402464:	72b3      	strb	r3, [r6, #10]
  402466:	72f3      	strb	r3, [r6, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  402468:	2114      	movs	r1, #20
  40246a:	4630      	mov	r0, r6
  40246c:	4b42      	ldr	r3, [pc, #264]	; (402578 <ip4_reass+0x41c>)
  40246e:	4798      	blx	r3
  402470:	8170      	strh	r0, [r6, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  402472:	6867      	ldr	r7, [r4, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  402474:	b17d      	cbz	r5, 402496 <ip4_reass+0x33a>
      iprh = (struct ip_reass_helper*)r->payload;

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  402476:	f06f 0a13 	mvn.w	sl, #19
  40247a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 40258c <ip4_reass+0x430>
      pbuf_cat(p, r);
  40247e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 402590 <ip4_reass+0x434>
      iprh = (struct ip_reass_helper*)r->payload;
  402482:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
  402484:	4651      	mov	r1, sl
  402486:	4628      	mov	r0, r5
  402488:	47c8      	blx	r9
      pbuf_cat(p, r);
  40248a:	4629      	mov	r1, r5
  40248c:	4638      	mov	r0, r7
  40248e:	47c0      	blx	r8
      r = iprh->next_pbuf;
  402490:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
  402492:	2d00      	cmp	r5, #0
  402494:	d1f5      	bne.n	402482 <ip4_reass+0x326>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  402496:	4b39      	ldr	r3, [pc, #228]	; (40257c <ip4_reass+0x420>)
  402498:	681a      	ldr	r2, [r3, #0]
  40249a:	4294      	cmp	r4, r2
  40249c:	d036      	beq.n	40250c <ip4_reass+0x3b0>
      ipr_prev = NULL;
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  40249e:	b312      	cbz	r2, 4024e6 <ip4_reass+0x38a>
        if (ipr_prev->next == ipr) {
  4024a0:	6813      	ldr	r3, [r2, #0]
  4024a2:	429c      	cmp	r4, r3
  4024a4:	d056      	beq.n	402554 <ip4_reass+0x3f8>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  4024a6:	b303      	cbz	r3, 4024ea <ip4_reass+0x38e>
        if (ipr_prev->next == ipr) {
  4024a8:	681a      	ldr	r2, [r3, #0]
  4024aa:	4294      	cmp	r4, r2
  4024ac:	d01d      	beq.n	4024ea <ip4_reass+0x38e>
  4024ae:	4613      	mov	r3, r2
  4024b0:	e7f9      	b.n	4024a6 <ip4_reass+0x34a>
            valid = 0;
  4024b2:	f04f 0c00 	mov.w	ip, #0
  4024b6:	e7a7      	b.n	402408 <ip4_reass+0x2ac>
  4024b8:	f04f 0c00 	mov.w	ip, #0
  4024bc:	e7a4      	b.n	402408 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
  4024be:	f04f 0c00 	mov.w	ip, #0
  4024c2:	e7a1      	b.n	402408 <ip4_reass+0x2ac>
  ip_reass_pbufcount -= pbuf_clen(new_p);
  4024c4:	4630      	mov	r0, r6
  4024c6:	4b2e      	ldr	r3, [pc, #184]	; (402580 <ip4_reass+0x424>)
  4024c8:	4798      	blx	r3
  4024ca:	4a29      	ldr	r2, [pc, #164]	; (402570 <ip4_reass+0x414>)
  4024cc:	8813      	ldrh	r3, [r2, #0]
  4024ce:	1a18      	subs	r0, r3, r0
  4024d0:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
  4024d2:	4630      	mov	r0, r6
  4024d4:	4b2b      	ldr	r3, [pc, #172]	; (402584 <ip4_reass+0x428>)
  4024d6:	4798      	blx	r3
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  4024d8:	4630      	mov	r0, r6
  4024da:	4b2a      	ldr	r3, [pc, #168]	; (402584 <ip4_reass+0x428>)
  4024dc:	4798      	blx	r3
  return NULL;
  4024de:	2700      	movs	r7, #0
  4024e0:	e010      	b.n	402504 <ip4_reass+0x3a8>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
  4024e2:	2300      	movs	r3, #0
  4024e4:	e79c      	b.n	402420 <ip4_reass+0x2c4>
  if (reassdatagrams == ipr) {
  4024e6:	b18c      	cbz	r4, 40250c <ip4_reass+0x3b0>
  4024e8:	4613      	mov	r3, r2
    prev->next = ipr->next;
  4024ea:	6822      	ldr	r2, [r4, #0]
  4024ec:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_REASSDATA, ipr);
  4024ee:	4621      	mov	r1, r4
  4024f0:	2004      	movs	r0, #4
  4024f2:	4b25      	ldr	r3, [pc, #148]	; (402588 <ip4_reass+0x42c>)
  4024f4:	4798      	blx	r3
    ip_reass_pbufcount -= pbuf_clen(p);
  4024f6:	4638      	mov	r0, r7
  4024f8:	4b21      	ldr	r3, [pc, #132]	; (402580 <ip4_reass+0x424>)
  4024fa:	4798      	blx	r3
  4024fc:	4a1c      	ldr	r2, [pc, #112]	; (402570 <ip4_reass+0x414>)
  4024fe:	8813      	ldrh	r3, [r2, #0]
  402500:	1a18      	subs	r0, r3, r0
  402502:	8010      	strh	r0, [r2, #0]
}
  402504:	4638      	mov	r0, r7
  402506:	b003      	add	sp, #12
  402508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reassdatagrams = ipr->next;
  40250c:	6812      	ldr	r2, [r2, #0]
  40250e:	4b1b      	ldr	r3, [pc, #108]	; (40257c <ip4_reass+0x420>)
  402510:	601a      	str	r2, [r3, #0]
  402512:	e7ec      	b.n	4024ee <ip4_reass+0x392>
  return NULL;
  402514:	2700      	movs	r7, #0
  402516:	e7f5      	b.n	402504 <ip4_reass+0x3a8>
      iprh->next_pbuf = q;
  402518:	f8ca 2000 	str.w	r2, [sl]
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  40251c:	461a      	mov	r2, r3
  int valid = 1;
  40251e:	f04f 0c01 	mov.w	ip, #1
        if (iprh->end > iprh_tmp->start) {
  402522:	8893      	ldrh	r3, [r2, #4]
  402524:	455b      	cmp	r3, fp
  402526:	d3cd      	bcc.n	4024c4 <ip4_reass+0x368>
        ipr->p = new_p;
  402528:	6066      	str	r6, [r4, #4]
  40252a:	e713      	b.n	402354 <ip4_reass+0x1f8>
    if (iprh_prev != NULL) {
  40252c:	2b00      	cmp	r3, #0
  40252e:	f43f af56 	beq.w	4023de <ip4_reass+0x282>
      iprh_prev->next_pbuf = new_p;
  402532:	601e      	str	r6, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  402534:	88da      	ldrh	r2, [r3, #6]
  402536:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  40253a:	429a      	cmp	r2, r3
  40253c:	f43f af0a 	beq.w	402354 <ip4_reass+0x1f8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
  402540:	f1b8 0f00 	cmp.w	r8, #0
  402544:	d0bb      	beq.n	4024be <ip4_reass+0x362>
  402546:	7fa3      	ldrb	r3, [r4, #30]
  402548:	f013 0f01 	tst.w	r3, #1
  40254c:	d004      	beq.n	402558 <ip4_reass+0x3fc>
  40254e:	f04f 0c00 	mov.w	ip, #0
  402552:	e759      	b.n	402408 <ip4_reass+0x2ac>
        if (ipr_prev->next == ipr) {
  402554:	4613      	mov	r3, r2
  402556:	e7c8      	b.n	4024ea <ip4_reass+0x38e>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
  402558:	2300      	movs	r3, #0
  40255a:	e759      	b.n	402410 <ip4_reass+0x2b4>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
  40255c:	4b04      	ldr	r3, [pc, #16]	; (402570 <ip4_reass+0x414>)
  40255e:	881a      	ldrh	r2, [r3, #0]
  402560:	4491      	add	r9, r2
  402562:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
  402566:	f1b8 0f00 	cmp.w	r8, #0
  40256a:	d0ba      	beq.n	4024e2 <ip4_reass+0x386>
  return NULL;
  40256c:	2700      	movs	r7, #0
  40256e:	e7c9      	b.n	402504 <ip4_reass+0x3a8>
  402570:	20400b78 	.word	0x20400b78
  402574:	00401059 	.word	0x00401059
  402578:	0040119d 	.word	0x0040119d
  40257c:	20400b7c 	.word	0x20400b7c
  402580:	00402e25 	.word	0x00402e25
  402584:	00402c19 	.word	0x00402c19
  402588:	004029d1 	.word	0x004029d1
  40258c:	00402bf9 	.word	0x00402bf9
  402590:	00402e45 	.word	0x00402e45

00402594 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  402594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402598:	b087      	sub	sp, #28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  40259a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  40259e:	f898 3000 	ldrb.w	r3, [r8]
  4025a2:	f003 030f 	and.w	r3, r3, #15
  4025a6:	2b05      	cmp	r3, #5
  4025a8:	d17d      	bne.n	4026a6 <ip4_frag+0x112>
  4025aa:	9204      	str	r2, [sp, #16]
  4025ac:	468a      	mov	sl, r1
  4025ae:	4604      	mov	r4, r0
  4025b0:	9003      	str	r0, [sp, #12]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  4025b2:	8ccd      	ldrh	r5, [r1, #38]	; 0x26

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  4025b4:	f8b8 0006 	ldrh.w	r0, [r8, #6]
  4025b8:	4b41      	ldr	r3, [pc, #260]	; (4026c0 <ip4_frag+0x12c>)
  4025ba:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
  4025bc:	f3c0 090c 	ubfx	r9, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  4025c0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  4025c4:	d172      	bne.n	4026ac <ip4_frag+0x118>

  left = p->tot_len - IP_HLEN;
  4025c6:	8924      	ldrh	r4, [r4, #8]
  4025c8:	3c14      	subs	r4, #20
  4025ca:	b2a4      	uxth	r4, r4

  while (left) {
  4025cc:	2c00      	cmp	r4, #0
  4025ce:	d070      	beq.n	4026b2 <ip4_frag+0x11e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  4025d0:	3d14      	subs	r5, #20
  4025d2:	bf48      	it	mi
  4025d4:	3507      	addmi	r5, #7
  4025d6:	10eb      	asrs	r3, r5, #3
  4025d8:	9305      	str	r3, [sp, #20]
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  4025da:	b29b      	uxth	r3, r3
  4025dc:	00db      	lsls	r3, r3, #3
  4025de:	9302      	str	r3, [sp, #8]
  4025e0:	2314      	movs	r3, #20
  4025e2:	9301      	str	r3, [sp, #4]
  4025e4:	9b02      	ldr	r3, [sp, #8]
  4025e6:	42a3      	cmp	r3, r4
  4025e8:	bfa8      	it	ge
  4025ea:	4623      	movge	r3, r4
  4025ec:	b29d      	uxth	r5, r3

#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, fragsize, PBUF_RAM);
  4025ee:	2200      	movs	r2, #0
  4025f0:	4629      	mov	r1, r5
  4025f2:	2001      	movs	r0, #1
  4025f4:	4b33      	ldr	r3, [pc, #204]	; (4026c4 <ip4_frag+0x130>)
  4025f6:	4798      	blx	r3
    if (rambuf == NULL) {
  4025f8:	4606      	mov	r6, r0
  4025fa:	2800      	cmp	r0, #0
  4025fc:	d05b      	beq.n	4026b6 <ip4_frag+0x122>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, fragsize, poff);
  4025fe:	9b01      	ldr	r3, [sp, #4]
  402600:	462a      	mov	r2, r5
  402602:	6841      	ldr	r1, [r0, #4]
  402604:	9803      	ldr	r0, [sp, #12]
  402606:	4f30      	ldr	r7, [pc, #192]	; (4026c8 <ip4_frag+0x134>)
  402608:	47b8      	blx	r7
  40260a:	9b01      	ldr	r3, [sp, #4]
  40260c:	4418      	add	r0, r3
  40260e:	b283      	uxth	r3, r0
  402610:	9301      	str	r3, [sp, #4]
    /* make room for the IP header */
    if (pbuf_header(rambuf, IP_HLEN)) {
  402612:	2114      	movs	r1, #20
  402614:	4630      	mov	r0, r6
  402616:	4b2d      	ldr	r3, [pc, #180]	; (4026cc <ip4_frag+0x138>)
  402618:	4798      	blx	r3
  40261a:	2800      	cmp	r0, #0
  40261c:	d13d      	bne.n	40269a <ip4_frag+0x106>
      pbuf_free(rambuf);
      goto memerr;
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  40261e:	6873      	ldr	r3, [r6, #4]
  402620:	f8d8 2000 	ldr.w	r2, [r8]
  402624:	f8d8 7004 	ldr.w	r7, [r8, #4]
  402628:	f8d8 0008 	ldr.w	r0, [r8, #8]
  40262c:	f8d8 100c 	ldr.w	r1, [r8, #12]
  402630:	601a      	str	r2, [r3, #0]
  402632:	605f      	str	r7, [r3, #4]
  402634:	6098      	str	r0, [r3, #8]
  402636:	60d9      	str	r1, [r3, #12]
  402638:	f8d8 2010 	ldr.w	r2, [r8, #16]
  40263c:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr*)rambuf->payload;
  40263e:	6877      	ldr	r7, [r6, #4]

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  402640:	f3c9 000c 	ubfx	r0, r9, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
  402644:	f8ba 3026 	ldrh.w	r3, [sl, #38]	; 0x26
  402648:	3b14      	subs	r3, #20
    if (!last) {
  40264a:	429c      	cmp	r4, r3
      tmp = tmp | IP_MF;
  40264c:	bfc8      	it	gt
  40264e:	f440 5000 	orrgt.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  402652:	f8df b06c 	ldr.w	fp, [pc, #108]	; 4026c0 <ip4_frag+0x12c>
  402656:	47d8      	blx	fp
  402658:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  40265a:	f105 0014 	add.w	r0, r5, #20
  40265e:	b280      	uxth	r0, r0
  402660:	47d8      	blx	fp
  402662:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  402664:	2300      	movs	r3, #0
  402666:	72bb      	strb	r3, [r7, #10]
  402668:	72fb      	strb	r3, [r7, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  40266a:	2114      	movs	r1, #20
  40266c:	4638      	mov	r0, r7
  40266e:	4b18      	ldr	r3, [pc, #96]	; (4026d0 <ip4_frag+0x13c>)
  402670:	4798      	blx	r3
  402672:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  402674:	f8da 3014 	ldr.w	r3, [sl, #20]
  402678:	9a04      	ldr	r2, [sp, #16]
  40267a:	4631      	mov	r1, r6
  40267c:	4650      	mov	r0, sl
  40267e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  402680:	4630      	mov	r0, r6
  402682:	4b14      	ldr	r3, [pc, #80]	; (4026d4 <ip4_frag+0x140>)
  402684:	4798      	blx	r3
    left -= fragsize;
  402686:	1b64      	subs	r4, r4, r5
  402688:	b2a4      	uxth	r4, r4
  40268a:	9b05      	ldr	r3, [sp, #20]
  40268c:	4499      	add	r9, r3
  40268e:	fa1f f989 	uxth.w	r9, r9
  while (left) {
  402692:	2c00      	cmp	r4, #0
  402694:	d1a6      	bne.n	4025e4 <ip4_frag+0x50>
    ofo += nfb;
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
  402696:	2000      	movs	r0, #0
  402698:	e00f      	b.n	4026ba <ip4_frag+0x126>
      pbuf_free(rambuf);
  40269a:	4630      	mov	r0, r6
  40269c:	4b0d      	ldr	r3, [pc, #52]	; (4026d4 <ip4_frag+0x140>)
  40269e:	4798      	blx	r3
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
  4026a0:	f04f 30ff 	mov.w	r0, #4294967295
      goto memerr;
  4026a4:	e009      	b.n	4026ba <ip4_frag+0x126>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  4026a6:	f06f 0005 	mvn.w	r0, #5
  4026aa:	e006      	b.n	4026ba <ip4_frag+0x126>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  4026ac:	f06f 0005 	mvn.w	r0, #5
  4026b0:	e003      	b.n	4026ba <ip4_frag+0x126>
  return ERR_OK;
  4026b2:	2000      	movs	r0, #0
  4026b4:	e001      	b.n	4026ba <ip4_frag+0x126>
  return ERR_MEM;
  4026b6:	f04f 30ff 	mov.w	r0, #4294967295
}
  4026ba:	b007      	add	sp, #28
  4026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c0:	00401059 	.word	0x00401059
  4026c4:	00402c71 	.word	0x00402c71
  4026c8:	00402f5d 	.word	0x00402f5d
  4026cc:	00402bf9 	.word	0x00402bf9
  4026d0:	0040119d 	.word	0x0040119d
  4026d4:	00402c19 	.word	0x00402c19

004026d8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  4026d8:	4b0a      	ldr	r3, [pc, #40]	; (402704 <mem_init+0x2c>)
  4026da:	f023 0303 	bic.w	r3, r3, #3
  4026de:	4a0a      	ldr	r2, [pc, #40]	; (402708 <mem_init+0x30>)
  4026e0:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  4026e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4026e6:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  4026e8:	2200      	movs	r2, #0
  4026ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  4026ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  4026ee:	185a      	adds	r2, r3, r1
  4026f0:	4806      	ldr	r0, [pc, #24]	; (40270c <mem_init+0x34>)
  4026f2:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
  4026f4:	2001      	movs	r0, #1
  4026f6:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  4026f8:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  4026fa:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  4026fc:	4a04      	ldr	r2, [pc, #16]	; (402710 <mem_init+0x38>)
  4026fe:	6013      	str	r3, [r2, #0]
  402700:	4770      	bx	lr
  402702:	bf00      	nop
  402704:	20401e83 	.word	0x20401e83
  402708:	20400b84 	.word	0x20400b84
  40270c:	20400b88 	.word	0x20400b88
  402710:	20400b80 	.word	0x20400b80

00402714 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  402714:	2800      	cmp	r0, #0
  402716:	d03b      	beq.n	402790 <mem_free+0x7c>
  402718:	4603      	mov	r3, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  40271a:	4a21      	ldr	r2, [pc, #132]	; (4027a0 <mem_free+0x8c>)
  40271c:	6812      	ldr	r2, [r2, #0]
  40271e:	4290      	cmp	r0, r2
  402720:	d336      	bcc.n	402790 <mem_free+0x7c>
  402722:	4920      	ldr	r1, [pc, #128]	; (4027a4 <mem_free+0x90>)
  402724:	6808      	ldr	r0, [r1, #0]
  402726:	4283      	cmp	r3, r0
  402728:	d232      	bcs.n	402790 <mem_free+0x7c>
{
  40272a:	b470      	push	{r4, r5, r6}
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  40272c:	f1a3 0108 	sub.w	r1, r3, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  402730:	2400      	movs	r4, #0
  402732:	f803 4c04 	strb.w	r4, [r3, #-4]

  if (mem < lfree) {
  402736:	4c1c      	ldr	r4, [pc, #112]	; (4027a8 <mem_free+0x94>)
  402738:	6824      	ldr	r4, [r4, #0]
  40273a:	42a1      	cmp	r1, r4
  40273c:	d201      	bcs.n	402742 <mem_free+0x2e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  40273e:	4c1a      	ldr	r4, [pc, #104]	; (4027a8 <mem_free+0x94>)
  402740:	6021      	str	r1, [r4, #0]
  nmem = (struct mem *)(void *)&ram[mem->next];
  402742:	f833 5c08 	ldrh.w	r5, [r3, #-8]
  402746:	1954      	adds	r4, r2, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  402748:	42a1      	cmp	r1, r4
  40274a:	d00e      	beq.n	40276a <mem_free+0x56>
  40274c:	7926      	ldrb	r6, [r4, #4]
  40274e:	b966      	cbnz	r6, 40276a <mem_free+0x56>
  402750:	42a0      	cmp	r0, r4
  402752:	d00a      	beq.n	40276a <mem_free+0x56>
    if (lfree == nmem) {
  402754:	4814      	ldr	r0, [pc, #80]	; (4027a8 <mem_free+0x94>)
  402756:	6800      	ldr	r0, [r0, #0]
  402758:	4284      	cmp	r4, r0
  40275a:	d01a      	beq.n	402792 <mem_free+0x7e>
    mem->next = nmem->next;
  40275c:	5b50      	ldrh	r0, [r2, r5]
  40275e:	f823 0c08 	strh.w	r0, [r3, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  402762:	5b50      	ldrh	r0, [r2, r5]
  402764:	4410      	add	r0, r2
  402766:	1a8c      	subs	r4, r1, r2
  402768:	8044      	strh	r4, [r0, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
  40276a:	f833 0c06 	ldrh.w	r0, [r3, #-6]
  40276e:	1814      	adds	r4, r2, r0
  if (pmem != mem && pmem->used == 0) {
  402770:	42a1      	cmp	r1, r4
  402772:	d00c      	beq.n	40278e <mem_free+0x7a>
  402774:	7925      	ldrb	r5, [r4, #4]
  402776:	b955      	cbnz	r5, 40278e <mem_free+0x7a>
    if (lfree == mem) {
  402778:	4d0b      	ldr	r5, [pc, #44]	; (4027a8 <mem_free+0x94>)
  40277a:	682d      	ldr	r5, [r5, #0]
  40277c:	42a9      	cmp	r1, r5
  40277e:	d00b      	beq.n	402798 <mem_free+0x84>
    pmem->next = mem->next;
  402780:	f833 1c08 	ldrh.w	r1, [r3, #-8]
  402784:	5211      	strh	r1, [r2, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  402786:	f833 3c08 	ldrh.w	r3, [r3, #-8]
  40278a:	441a      	add	r2, r3
  40278c:	8050      	strh	r0, [r2, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  40278e:	bc70      	pop	{r4, r5, r6}
  402790:	4770      	bx	lr
      lfree = mem;
  402792:	4805      	ldr	r0, [pc, #20]	; (4027a8 <mem_free+0x94>)
  402794:	6001      	str	r1, [r0, #0]
  402796:	e7e1      	b.n	40275c <mem_free+0x48>
      lfree = pmem;
  402798:	4903      	ldr	r1, [pc, #12]	; (4027a8 <mem_free+0x94>)
  40279a:	600c      	str	r4, [r1, #0]
  40279c:	e7f0      	b.n	402780 <mem_free+0x6c>
  40279e:	bf00      	nop
  4027a0:	20400b84 	.word	0x20400b84
  4027a4:	20400b88 	.word	0x20400b88
  4027a8:	20400b80 	.word	0x20400b80

004027ac <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  4027ac:	3103      	adds	r1, #3
  4027ae:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  4027b2:	400b      	ands	r3, r1
  4027b4:	2b0c      	cmp	r3, #12
  4027b6:	bf38      	it	cc
  4027b8:	230c      	movcc	r3, #12
  if (newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  4027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4027be:	d852      	bhi.n	402866 <mem_trim+0xba>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  4027c0:	4a2b      	ldr	r2, [pc, #172]	; (402870 <mem_trim+0xc4>)
  4027c2:	6812      	ldr	r2, [r2, #0]
  4027c4:	4282      	cmp	r2, r0
  4027c6:	d82b      	bhi.n	402820 <mem_trim+0x74>
  4027c8:	492a      	ldr	r1, [pc, #168]	; (402874 <mem_trim+0xc8>)
  4027ca:	6809      	ldr	r1, [r1, #0]
  4027cc:	4288      	cmp	r0, r1
  4027ce:	d227      	bcs.n	402820 <mem_trim+0x74>
{
  4027d0:	b4f0      	push	{r4, r5, r6, r7}
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  4027d2:	f1a0 0408 	sub.w	r4, r0, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  4027d6:	1aa4      	subs	r4, r4, r2
  4027d8:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  4027da:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  4027de:	f1a5 0108 	sub.w	r1, r5, #8
  4027e2:	1b09      	subs	r1, r1, r4
  4027e4:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  4027e6:	4299      	cmp	r1, r3
  4027e8:	d33f      	bcc.n	40286a <mem_trim+0xbe>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  4027ea:	d018      	beq.n	40281e <mem_trim+0x72>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  4027ec:	1956      	adds	r6, r2, r5
  if (mem2->used == 0) {
  4027ee:	7937      	ldrb	r7, [r6, #4]
  4027f0:	b9df      	cbnz	r7, 40282a <mem_trim+0x7e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  4027f2:	5b55      	ldrh	r5, [r2, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4027f4:	f104 0108 	add.w	r1, r4, #8
  4027f8:	440b      	add	r3, r1
  4027fa:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
  4027fc:	491e      	ldr	r1, [pc, #120]	; (402878 <mem_trim+0xcc>)
  4027fe:	6809      	ldr	r1, [r1, #0]
  402800:	428e      	cmp	r6, r1
  402802:	d00e      	beq.n	402822 <mem_trim+0x76>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  402804:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
  402806:	2600      	movs	r6, #0
  402808:	710e      	strb	r6, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
  40280a:	52d5      	strh	r5, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
  40280c:	804c      	strh	r4, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
  40280e:	f820 3c08 	strh.w	r3, [r0, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  402812:	5ad1      	ldrh	r1, [r2, r3]
  402814:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  402818:	d001      	beq.n	40281e <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  40281a:	440a      	add	r2, r1
  40281c:	8053      	strh	r3, [r2, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  40281e:	bcf0      	pop	{r4, r5, r6, r7}
  402820:	4770      	bx	lr
      lfree = (struct mem *)(void *)&ram[ptr2];
  402822:	18d1      	adds	r1, r2, r3
  402824:	4e14      	ldr	r6, [pc, #80]	; (402878 <mem_trim+0xcc>)
  402826:	6031      	str	r1, [r6, #0]
  402828:	e7ec      	b.n	402804 <mem_trim+0x58>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  40282a:	f103 0514 	add.w	r5, r3, #20
  40282e:	428d      	cmp	r5, r1
  402830:	d8f5      	bhi.n	40281e <mem_trim+0x72>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  402832:	f104 0108 	add.w	r1, r4, #8
  402836:	440b      	add	r3, r1
  402838:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
  40283a:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
  40283c:	4d0e      	ldr	r5, [pc, #56]	; (402878 <mem_trim+0xcc>)
  40283e:	682d      	ldr	r5, [r5, #0]
  402840:	42a9      	cmp	r1, r5
  402842:	d201      	bcs.n	402848 <mem_trim+0x9c>
      lfree = mem2;
  402844:	4d0c      	ldr	r5, [pc, #48]	; (402878 <mem_trim+0xcc>)
  402846:	6029      	str	r1, [r5, #0]
    mem2->used = 0;
  402848:	2500      	movs	r5, #0
  40284a:	710d      	strb	r5, [r1, #4]
    mem2->next = mem->next;
  40284c:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  402850:	52d5      	strh	r5, [r2, r3]
    mem2->prev = ptr;
  402852:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
  402854:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  402858:	5ad1      	ldrh	r1, [r2, r3]
  40285a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  40285e:	d0de      	beq.n	40281e <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  402860:	440a      	add	r2, r1
  402862:	8053      	strh	r3, [r2, #2]
  402864:	e7db      	b.n	40281e <mem_trim+0x72>
    return NULL;
  402866:	2000      	movs	r0, #0
  402868:	4770      	bx	lr
    return NULL;
  40286a:	2000      	movs	r0, #0
  40286c:	e7d7      	b.n	40281e <mem_trim+0x72>
  40286e:	bf00      	nop
  402870:	20400b84 	.word	0x20400b84
  402874:	20400b88 	.word	0x20400b88
  402878:	20400b80 	.word	0x20400b80

0040287c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  40287c:	2800      	cmp	r0, #0
  40287e:	d065      	beq.n	40294c <mem_malloc+0xd0>
{
  402880:	b5f0      	push	{r4, r5, r6, r7, lr}
  402882:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  402884:	3303      	adds	r3, #3
  402886:	f64f 76fc 	movw	r6, #65532	; 0xfffc
  40288a:	401e      	ands	r6, r3
  40288c:	2e0c      	cmp	r6, #12
  40288e:	bf38      	it	cc
  402890:	260c      	movcc	r6, #12
  if (size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  402892:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  402896:	d85b      	bhi.n	402950 <mem_malloc+0xd4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  402898:	4b2f      	ldr	r3, [pc, #188]	; (402958 <mem_malloc+0xdc>)
  40289a:	f8d3 c000 	ldr.w	ip, [r3]
  40289e:	4b2f      	ldr	r3, [pc, #188]	; (40295c <mem_malloc+0xe0>)
  4028a0:	681c      	ldr	r4, [r3, #0]
  4028a2:	ebac 0304 	sub.w	r3, ip, r4
  4028a6:	b29b      	uxth	r3, r3
  4028a8:	461a      	mov	r2, r3
  4028aa:	4637      	mov	r7, r6
  4028ac:	f5c6 5580 	rsb	r5, r6, #4096	; 0x1000
  4028b0:	42ab      	cmp	r3, r5
  4028b2:	d24f      	bcs.n	402954 <mem_malloc+0xd8>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  4028b4:	f06f 0e07 	mvn.w	lr, #7
  4028b8:	e00f      	b.n	4028da <mem_malloc+0x5e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  4028ba:	2301      	movs	r3, #1
  4028bc:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  4028be:	4b26      	ldr	r3, [pc, #152]	; (402958 <mem_malloc+0xdc>)
  4028c0:	681b      	ldr	r3, [r3, #0]
  4028c2:	4298      	cmp	r0, r3
  4028c4:	d030      	beq.n	402928 <mem_malloc+0xac>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  4028c6:	3008      	adds	r0, #8
  4028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      mem = (struct mem *)(void *)&ram[ptr];
  4028ca:	4603      	mov	r3, r0
  4028cc:	e039      	b.n	402942 <mem_malloc+0xc6>
  4028ce:	4603      	mov	r3, r0
  4028d0:	e037      	b.n	402942 <mem_malloc+0xc6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  4028d2:	8803      	ldrh	r3, [r0, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  4028d4:	461a      	mov	r2, r3
  4028d6:	42ab      	cmp	r3, r5
  4028d8:	d236      	bcs.n	402948 <mem_malloc+0xcc>
      mem = (struct mem *)(void *)&ram[ptr];
  4028da:	18a0      	adds	r0, r4, r2
      if ((!mem->used) &&
  4028dc:	7901      	ldrb	r1, [r0, #4]
  4028de:	2900      	cmp	r1, #0
  4028e0:	d1f7      	bne.n	4028d2 <mem_malloc+0x56>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  4028e2:	ebae 0102 	sub.w	r1, lr, r2
  4028e6:	5aa2      	ldrh	r2, [r4, r2]
  4028e8:	440a      	add	r2, r1
      if ((!mem->used) &&
  4028ea:	42ba      	cmp	r2, r7
  4028ec:	d3f1      	bcc.n	4028d2 <mem_malloc+0x56>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  4028ee:	f106 0114 	add.w	r1, r6, #20
  4028f2:	428a      	cmp	r2, r1
  4028f4:	d3e1      	bcc.n	4028ba <mem_malloc+0x3e>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  4028f6:	f106 0208 	add.w	r2, r6, #8
  4028fa:	441a      	add	r2, r3
  4028fc:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
  4028fe:	18a1      	adds	r1, r4, r2
          mem2->used = 0;
  402900:	2500      	movs	r5, #0
  402902:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
  402904:	8805      	ldrh	r5, [r0, #0]
  402906:	52a5      	strh	r5, [r4, r2]
          mem2->prev = ptr;
  402908:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
  40290a:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
  40290c:	2301      	movs	r3, #1
  40290e:	7103      	strb	r3, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
  402910:	5aa3      	ldrh	r3, [r4, r2]
  402912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  402916:	d0d2      	beq.n	4028be <mem_malloc+0x42>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  402918:	441c      	add	r4, r3
  40291a:	8062      	strh	r2, [r4, #2]
        if (mem == lfree) {
  40291c:	4584      	cmp	ip, r0
  40291e:	d1d2      	bne.n	4028c6 <mem_malloc+0x4a>
          while (cur->used && cur != ram_end) {
  402920:	7903      	ldrb	r3, [r0, #4]
  402922:	2b00      	cmp	r3, #0
  402924:	d0d1      	beq.n	4028ca <mem_malloc+0x4e>
        if (mem == lfree) {
  402926:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
  402928:	4a0d      	ldr	r2, [pc, #52]	; (402960 <mem_malloc+0xe4>)
  40292a:	6811      	ldr	r1, [r2, #0]
  40292c:	4288      	cmp	r0, r1
  40292e:	d0ce      	beq.n	4028ce <mem_malloc+0x52>
            cur = (struct mem *)(void *)&ram[cur->next];
  402930:	4a0a      	ldr	r2, [pc, #40]	; (40295c <mem_malloc+0xe0>)
  402932:	6814      	ldr	r4, [r2, #0]
  402934:	881b      	ldrh	r3, [r3, #0]
  402936:	4423      	add	r3, r4
          while (cur->used && cur != ram_end) {
  402938:	791a      	ldrb	r2, [r3, #4]
  40293a:	b112      	cbz	r2, 402942 <mem_malloc+0xc6>
  40293c:	428b      	cmp	r3, r1
  40293e:	d1f9      	bne.n	402934 <mem_malloc+0xb8>
            cur = (struct mem *)(void *)&ram[cur->next];
  402940:	460b      	mov	r3, r1
          lfree = cur;
  402942:	4a05      	ldr	r2, [pc, #20]	; (402958 <mem_malloc+0xdc>)
  402944:	6013      	str	r3, [r2, #0]
  402946:	e7be      	b.n	4028c6 <mem_malloc+0x4a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  402948:	2000      	movs	r0, #0
  40294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
  40294c:	2000      	movs	r0, #0
  40294e:	4770      	bx	lr
    return NULL;
  402950:	2000      	movs	r0, #0
  402952:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return NULL;
  402954:	2000      	movs	r0, #0
  402956:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402958:	20400b80 	.word	0x20400b80
  40295c:	20400b84 	.word	0x20400b84
  402960:	20400b88 	.word	0x20400b88

00402964 <memp_init_pool>:
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  402964:	6883      	ldr	r3, [r0, #8]
  402966:	2200      	movs	r2, #0
  402968:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  40296a:	6843      	ldr	r3, [r0, #4]
  40296c:	3303      	adds	r3, #3
  40296e:	f023 0303 	bic.w	r3, r3, #3
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  402972:	8842      	ldrh	r2, [r0, #2]
  402974:	b15a      	cbz	r2, 40298e <memp_init_pool+0x2a>
  402976:	2200      	movs	r2, #0
    memp->next = *desc->tab;
  402978:	6881      	ldr	r1, [r0, #8]
  40297a:	6809      	ldr	r1, [r1, #0]
  40297c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
  40297e:	6881      	ldr	r1, [r0, #8]
  402980:	600b      	str	r3, [r1, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  402982:	8801      	ldrh	r1, [r0, #0]
  402984:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
  402986:	3201      	adds	r2, #1
  402988:	8841      	ldrh	r1, [r0, #2]
  40298a:	4291      	cmp	r1, r2
  40298c:	dcf4      	bgt.n	402978 <memp_init_pool+0x14>
  40298e:	4770      	bx	lr

00402990 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  402990:	b570      	push	{r4, r5, r6, lr}
  402992:	4d05      	ldr	r5, [pc, #20]	; (4029a8 <memp_init+0x18>)
  402994:	1f2c      	subs	r4, r5, #4
  402996:	351c      	adds	r5, #28
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
    memp_init_pool(memp_pools[i]);
  402998:	4e04      	ldr	r6, [pc, #16]	; (4029ac <memp_init+0x1c>)
  40299a:	f854 0f04 	ldr.w	r0, [r4, #4]!
  40299e:	47b0      	blx	r6
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  4029a0:	42ac      	cmp	r4, r5
  4029a2:	d1fa      	bne.n	40299a <memp_init+0xa>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  4029a4:	bd70      	pop	{r4, r5, r6, pc}
  4029a6:	bf00      	nop
  4029a8:	0040a448 	.word	0x0040a448
  4029ac:	00402965 	.word	0x00402965

004029b0 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  4029b0:	2807      	cmp	r0, #7
  4029b2:	d808      	bhi.n	4029c6 <memp_malloc+0x16>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
  4029b4:	4b05      	ldr	r3, [pc, #20]	; (4029cc <memp_malloc+0x1c>)
  memp = *desc->tab;
  4029b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  4029ba:	689b      	ldr	r3, [r3, #8]
  4029bc:	6818      	ldr	r0, [r3, #0]
  if (memp != NULL) {
  4029be:	b118      	cbz	r0, 4029c8 <memp_malloc+0x18>
    *desc->tab = memp->next;
  4029c0:	6802      	ldr	r2, [r0, #0]
  4029c2:	601a      	str	r2, [r3, #0]
  4029c4:	4770      	bx	lr
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  4029c6:	2000      	movs	r0, #0
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
  4029c8:	4770      	bx	lr
  4029ca:	bf00      	nop
  4029cc:	0040a448 	.word	0x0040a448

004029d0 <memp_free>:
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);

  if (mem == NULL) {
  4029d0:	460b      	mov	r3, r1
  4029d2:	b149      	cbz	r1, 4029e8 <memp_free+0x18>
  4029d4:	2807      	cmp	r0, #7
  4029d6:	d807      	bhi.n	4029e8 <memp_free+0x18>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  4029d8:	4a04      	ldr	r2, [pc, #16]	; (4029ec <memp_free+0x1c>)
  4029da:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  memp->next = *desc->tab;
  4029de:	6891      	ldr	r1, [r2, #8]
  4029e0:	6809      	ldr	r1, [r1, #0]
  4029e2:	6019      	str	r1, [r3, #0]
  *desc->tab = memp;
  4029e4:	6892      	ldr	r2, [r2, #8]
  4029e6:	6013      	str	r3, [r2, #0]
  4029e8:	4770      	bx	lr
  4029ea:	bf00      	nop
  4029ec:	0040a448 	.word	0x0040a448

004029f0 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  4029f0:	f011 0f01 	tst.w	r1, #1
  4029f4:	d00c      	beq.n	402a10 <netif_issue_reports+0x20>
{
  4029f6:	b508      	push	{r3, lr}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  4029f8:	6843      	ldr	r3, [r0, #4]
  4029fa:	b123      	cbz	r3, 402a06 <netif_issue_reports+0x16>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  4029fc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
  402a00:	f013 0f08 	tst.w	r3, #8
  402a04:	d100      	bne.n	402a08 <netif_issue_reports+0x18>
  402a06:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
  402a08:	1d01      	adds	r1, r0, #4
  402a0a:	4b02      	ldr	r3, [pc, #8]	; (402a14 <netif_issue_reports+0x24>)
  402a0c:	4798      	blx	r3
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  402a0e:	e7fa      	b.n	402a06 <netif_issue_reports+0x16>
  402a10:	4770      	bx	lr
  402a12:	bf00      	nop
  402a14:	00401545 	.word	0x00401545

00402a18 <netif_init>:
{
  402a18:	4770      	bx	lr
	...

00402a1c <netif_set_ipaddr>:
{
  402a1c:	b570      	push	{r4, r5, r6, lr}
  402a1e:	b082      	sub	sp, #8
  402a20:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  402a22:	b1d1      	cbz	r1, 402a5a <netif_set_ipaddr+0x3e>
  402a24:	460e      	mov	r6, r1
  402a26:	680b      	ldr	r3, [r1, #0]
  402a28:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  402a2a:	6842      	ldr	r2, [r0, #4]
  402a2c:	4293      	cmp	r3, r2
  402a2e:	d012      	beq.n	402a56 <netif_set_ipaddr+0x3a>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  402a30:	1d05      	adds	r5, r0, #4
  402a32:	a901      	add	r1, sp, #4
  402a34:	4628      	mov	r0, r5
  402a36:	4b11      	ldr	r3, [pc, #68]	; (402a7c <netif_set_ipaddr+0x60>)
  402a38:	4798      	blx	r3
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  402a3a:	a901      	add	r1, sp, #4
  402a3c:	4628      	mov	r0, r5
  402a3e:	4b10      	ldr	r3, [pc, #64]	; (402a80 <netif_set_ipaddr+0x64>)
  402a40:	4798      	blx	r3
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  402a42:	6833      	ldr	r3, [r6, #0]
  402a44:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  402a46:	2101      	movs	r1, #1
  402a48:	4620      	mov	r0, r4
  402a4a:	4b0e      	ldr	r3, [pc, #56]	; (402a84 <netif_set_ipaddr+0x68>)
  402a4c:	4798      	blx	r3
    NETIF_STATUS_CALLBACK(netif);
  402a4e:	69e3      	ldr	r3, [r4, #28]
  402a50:	b10b      	cbz	r3, 402a56 <netif_set_ipaddr+0x3a>
  402a52:	4620      	mov	r0, r4
  402a54:	4798      	blx	r3
}
  402a56:	b002      	add	sp, #8
  402a58:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  402a5a:	4b0b      	ldr	r3, [pc, #44]	; (402a88 <netif_set_ipaddr+0x6c>)
  402a5c:	681b      	ldr	r3, [r3, #0]
  402a5e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  402a60:	6842      	ldr	r2, [r0, #4]
  402a62:	4293      	cmp	r3, r2
  402a64:	d0f7      	beq.n	402a56 <netif_set_ipaddr+0x3a>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  402a66:	1d05      	adds	r5, r0, #4
  402a68:	a901      	add	r1, sp, #4
  402a6a:	4628      	mov	r0, r5
  402a6c:	4b03      	ldr	r3, [pc, #12]	; (402a7c <netif_set_ipaddr+0x60>)
  402a6e:	4798      	blx	r3
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  402a70:	a901      	add	r1, sp, #4
  402a72:	4628      	mov	r0, r5
  402a74:	4b02      	ldr	r3, [pc, #8]	; (402a80 <netif_set_ipaddr+0x64>)
  402a76:	4798      	blx	r3
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  402a78:	2300      	movs	r3, #0
  402a7a:	e7e3      	b.n	402a44 <netif_set_ipaddr+0x28>
  402a7c:	00403d85 	.word	0x00403d85
  402a80:	00406275 	.word	0x00406275
  402a84:	004029f1 	.word	0x004029f1
  402a88:	0040a3e4 	.word	0x0040a3e4

00402a8c <netif_set_addr>:
{
  402a8c:	b570      	push	{r4, r5, r6, lr}
  402a8e:	4604      	mov	r4, r0
  402a90:	4616      	mov	r6, r2
  402a92:	461d      	mov	r5, r3
  if (ip4_addr_isany(ipaddr)) {
  402a94:	460b      	mov	r3, r1
  402a96:	b109      	cbz	r1, 402a9c <netif_set_addr+0x10>
  402a98:	680a      	ldr	r2, [r1, #0]
  402a9a:	b972      	cbnz	r2, 402aba <netif_set_addr+0x2e>
    netif_set_ipaddr(netif, ipaddr);
  402a9c:	4619      	mov	r1, r3
  402a9e:	4620      	mov	r0, r4
  402aa0:	4b0d      	ldr	r3, [pc, #52]	; (402ad8 <netif_set_addr+0x4c>)
  402aa2:	4798      	blx	r3
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  402aa4:	b12e      	cbz	r6, 402ab2 <netif_set_addr+0x26>
  402aa6:	6833      	ldr	r3, [r6, #0]
  402aa8:	60a3      	str	r3, [r4, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  402aaa:	b125      	cbz	r5, 402ab6 <netif_set_addr+0x2a>
  402aac:	682b      	ldr	r3, [r5, #0]
  402aae:	60e3      	str	r3, [r4, #12]
  402ab0:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  402ab2:	2300      	movs	r3, #0
  402ab4:	e7f8      	b.n	402aa8 <netif_set_addr+0x1c>
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  402ab6:	2300      	movs	r3, #0
  402ab8:	e7f9      	b.n	402aae <netif_set_addr+0x22>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  402aba:	b14e      	cbz	r6, 402ad0 <netif_set_addr+0x44>
  402abc:	6832      	ldr	r2, [r6, #0]
  402abe:	60a2      	str	r2, [r4, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  402ac0:	b145      	cbz	r5, 402ad4 <netif_set_addr+0x48>
  402ac2:	682a      	ldr	r2, [r5, #0]
  402ac4:	60e2      	str	r2, [r4, #12]
    netif_set_ipaddr(netif, ipaddr);
  402ac6:	4619      	mov	r1, r3
  402ac8:	4620      	mov	r0, r4
  402aca:	4b03      	ldr	r3, [pc, #12]	; (402ad8 <netif_set_addr+0x4c>)
  402acc:	4798      	blx	r3
  402ace:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  402ad0:	2200      	movs	r2, #0
  402ad2:	e7f4      	b.n	402abe <netif_set_addr+0x32>
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  402ad4:	2200      	movs	r2, #0
  402ad6:	e7f5      	b.n	402ac4 <netif_set_addr+0x38>
  402ad8:	00402a1d 	.word	0x00402a1d

00402adc <netif_add>:
{
  402adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ade:	4604      	mov	r4, r0
  ip_addr_set_zero_ip4(&netif->ip_addr);
  402ae0:	2500      	movs	r5, #0
  402ae2:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  402ae4:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  402ae6:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
  402ae8:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  402aec:	2603      	movs	r6, #3
  402aee:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  netif->status_callback = NULL;
  402af2:	61c5      	str	r5, [r0, #28]
  netif->state = state;
  402af4:	9d06      	ldr	r5, [sp, #24]
  402af6:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
  402af8:	4e0a      	ldr	r6, [pc, #40]	; (402b24 <netif_add+0x48>)
  402afa:	7835      	ldrb	r5, [r6, #0]
  402afc:	1c6f      	adds	r7, r5, #1
  402afe:	7037      	strb	r7, [r6, #0]
  402b00:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
  netif->input = input;
  402b04:	9d08      	ldr	r5, [sp, #32]
  402b06:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
  402b08:	4d07      	ldr	r5, [pc, #28]	; (402b28 <netif_add+0x4c>)
  402b0a:	47a8      	blx	r5
  if (init(netif) != ERR_OK) {
  402b0c:	4620      	mov	r0, r4
  402b0e:	9b07      	ldr	r3, [sp, #28]
  402b10:	4798      	blx	r3
  402b12:	b928      	cbnz	r0, 402b20 <netif_add+0x44>
  netif->next = netif_list;
  402b14:	4b05      	ldr	r3, [pc, #20]	; (402b2c <netif_add+0x50>)
  402b16:	681a      	ldr	r2, [r3, #0]
  402b18:	6022      	str	r2, [r4, #0]
  netif_list = netif;
  402b1a:	601c      	str	r4, [r3, #0]
  return netif;
  402b1c:	4620      	mov	r0, r4
  402b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
  402b20:	2000      	movs	r0, #0
}
  402b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b24:	20400bac 	.word	0x20400bac
  402b28:	00402a8d 	.word	0x00402a8d
  402b2c:	20404970 	.word	0x20404970

00402b30 <netif_set_default>:
  netif_default = netif;
  402b30:	4b01      	ldr	r3, [pc, #4]	; (402b38 <netif_set_default+0x8>)
  402b32:	6018      	str	r0, [r3, #0]
  402b34:	4770      	bx	lr
  402b36:	bf00      	nop
  402b38:	20404974 	.word	0x20404974

00402b3c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
  402b3c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
  402b40:	f013 0f01 	tst.w	r3, #1
  402b44:	d113      	bne.n	402b6e <netif_set_up+0x32>
{
  402b46:	b510      	push	{r4, lr}
  402b48:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_UP;
  402b4a:	f043 0301 	orr.w	r3, r3, #1
  402b4e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    NETIF_STATUS_CALLBACK(netif);
  402b52:	69c3      	ldr	r3, [r0, #28]
  402b54:	b103      	cbz	r3, 402b58 <netif_set_up+0x1c>
  402b56:	4798      	blx	r3
    if (netif->flags & NETIF_FLAG_LINK_UP) {
  402b58:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  402b5c:	f013 0f04 	tst.w	r3, #4
  402b60:	d100      	bne.n	402b64 <netif_set_up+0x28>
  402b62:	bd10      	pop	{r4, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  402b64:	2103      	movs	r1, #3
  402b66:	4620      	mov	r0, r4
  402b68:	4b01      	ldr	r3, [pc, #4]	; (402b70 <netif_set_up+0x34>)
  402b6a:	4798      	blx	r3
}
  402b6c:	e7f9      	b.n	402b62 <netif_set_up+0x26>
  402b6e:	4770      	bx	lr
  402b70:	004029f1 	.word	0x004029f1

00402b74 <netif_set_status_callback>:
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
  402b74:	b100      	cbz	r0, 402b78 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
  402b76:	61c1      	str	r1, [r0, #28]
  402b78:	4770      	bx	lr

00402b7a <pbuf_header_impl>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  402b7a:	2900      	cmp	r1, #0
  402b7c:	d036      	beq.n	402bec <pbuf_header_impl+0x72>
  402b7e:	460b      	mov	r3, r1
  402b80:	2800      	cmp	r0, #0
  402b82:	d033      	beq.n	402bec <pbuf_header_impl+0x72>
{
  402b84:	b430      	push	{r4, r5}
    return 0;
  }

  if (header_size_increment < 0) {
  402b86:	2900      	cmp	r1, #0
  402b88:	db0b      	blt.n	402ba2 <pbuf_header_impl+0x28>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  402b8a:	b28d      	uxth	r5, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  402b8c:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
  402b8e:	6844      	ldr	r4, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  402b90:	b171      	cbz	r1, 402bb0 <pbuf_header_impl+0x36>
  402b92:	2903      	cmp	r1, #3
  402b94:	d00c      	beq.n	402bb0 <pbuf_header_impl+0x36>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  402b96:	3901      	subs	r1, #1
  402b98:	b289      	uxth	r1, r1
  402b9a:	2901      	cmp	r1, #1
  402b9c:	d918      	bls.n	402bd0 <pbuf_header_impl+0x56>
      return 1;
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  402b9e:	2001      	movs	r0, #1
  402ba0:	e014      	b.n	402bcc <pbuf_header_impl+0x52>
    increment_magnitude = (u16_t)-header_size_increment;
  402ba2:	424d      	negs	r5, r1
  402ba4:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  402ba6:	8941      	ldrh	r1, [r0, #10]
  402ba8:	42a9      	cmp	r1, r5
  402baa:	d2ef      	bcs.n	402b8c <pbuf_header_impl+0x12>
  402bac:	2001      	movs	r0, #1
  402bae:	e00d      	b.n	402bcc <pbuf_header_impl+0x52>
    p->payload = (u8_t *)p->payload - header_size_increment;
  402bb0:	1ae4      	subs	r4, r4, r3
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  402bb2:	f100 0210 	add.w	r2, r0, #16
  402bb6:	4294      	cmp	r4, r2
  402bb8:	d31a      	bcc.n	402bf0 <pbuf_header_impl+0x76>
    p->payload = (u8_t *)p->payload - header_size_increment;
  402bba:	6044      	str	r4, [r0, #4]
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  402bbc:	b29b      	uxth	r3, r3
  402bbe:	8942      	ldrh	r2, [r0, #10]
  402bc0:	441a      	add	r2, r3
  402bc2:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
  402bc4:	8902      	ldrh	r2, [r0, #8]
  402bc6:	4413      	add	r3, r2
  402bc8:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  402bca:	2000      	movs	r0, #0
}
  402bcc:	bc30      	pop	{r4, r5}
  402bce:	4770      	bx	lr
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  402bd0:	2b00      	cmp	r3, #0
  402bd2:	db05      	blt.n	402be0 <pbuf_header_impl+0x66>
    } else if ((header_size_increment > 0) && force) {
  402bd4:	2b00      	cmp	r3, #0
  402bd6:	dd0d      	ble.n	402bf4 <pbuf_header_impl+0x7a>
  402bd8:	b162      	cbz	r2, 402bf4 <pbuf_header_impl+0x7a>
      p->payload = (u8_t *)p->payload - header_size_increment;
  402bda:	1ae4      	subs	r4, r4, r3
  402bdc:	6044      	str	r4, [r0, #4]
  402bde:	e7ed      	b.n	402bbc <pbuf_header_impl+0x42>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  402be0:	8941      	ldrh	r1, [r0, #10]
  402be2:	42a9      	cmp	r1, r5
  402be4:	d3f6      	bcc.n	402bd4 <pbuf_header_impl+0x5a>
      p->payload = (u8_t *)p->payload - header_size_increment;
  402be6:	1ae4      	subs	r4, r4, r3
  402be8:	6044      	str	r4, [r0, #4]
  402bea:	e7e7      	b.n	402bbc <pbuf_header_impl+0x42>
    return 0;
  402bec:	2000      	movs	r0, #0
  402bee:	4770      	bx	lr
      return 1;
  402bf0:	2001      	movs	r0, #1
  402bf2:	e7eb      	b.n	402bcc <pbuf_header_impl+0x52>
      return 1;
  402bf4:	2001      	movs	r0, #1
  402bf6:	e7e9      	b.n	402bcc <pbuf_header_impl+0x52>

00402bf8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  402bf8:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
  402bfa:	2200      	movs	r2, #0
  402bfc:	4b01      	ldr	r3, [pc, #4]	; (402c04 <pbuf_header+0xc>)
  402bfe:	4798      	blx	r3
}
  402c00:	bd08      	pop	{r3, pc}
  402c02:	bf00      	nop
  402c04:	00402b7b 	.word	0x00402b7b

00402c08 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  402c08:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
  402c0a:	2201      	movs	r2, #1
  402c0c:	4b01      	ldr	r3, [pc, #4]	; (402c14 <pbuf_header_force+0xc>)
  402c0e:	4798      	blx	r3
}
  402c10:	bd08      	pop	{r3, pc}
  402c12:	bf00      	nop
  402c14:	00402b7b 	.word	0x00402b7b

00402c18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  402c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  402c1c:	b1f8      	cbz	r0, 402c5e <pbuf_free+0x46>
  402c1e:	4601      	mov	r1, r0
  402c20:	2400      	movs	r4, #0
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  402c22:	4d11      	ldr	r5, [pc, #68]	; (402c68 <pbuf_free+0x50>)
          memp_free(MEMP_PBUF, p);
  402c24:	f04f 0806 	mov.w	r8, #6
  402c28:	4e10      	ldr	r6, [pc, #64]	; (402c6c <pbuf_free+0x54>)
  402c2a:	e008      	b.n	402c3e <pbuf_free+0x26>
          memp_free(MEMP_PBUF_POOL, p);
  402c2c:	2007      	movs	r0, #7
  402c2e:	47b0      	blx	r6
  402c30:	e001      	b.n	402c36 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
  402c32:	4640      	mov	r0, r8
  402c34:	47b0      	blx	r6
        }
      }
      count++;
  402c36:	3401      	adds	r4, #1
  402c38:	b2e4      	uxtb	r4, r4
      /* proceed to next pbuf */
      p = q;
  402c3a:	4639      	mov	r1, r7
  while (p != NULL) {
  402c3c:	b187      	cbz	r7, 402c60 <pbuf_free+0x48>
    ref = --(p->ref);
  402c3e:	89cb      	ldrh	r3, [r1, #14]
  402c40:	3b01      	subs	r3, #1
  402c42:	b29b      	uxth	r3, r3
  402c44:	81cb      	strh	r3, [r1, #14]
    if (ref == 0) {
  402c46:	b95b      	cbnz	r3, 402c60 <pbuf_free+0x48>
      q = p->next;
  402c48:	680f      	ldr	r7, [r1, #0]
      type = p->type;
  402c4a:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
  402c4c:	2b03      	cmp	r3, #3
  402c4e:	d0ed      	beq.n	402c2c <pbuf_free+0x14>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  402c50:	3b01      	subs	r3, #1
  402c52:	b29b      	uxth	r3, r3
  402c54:	2b01      	cmp	r3, #1
  402c56:	d9ec      	bls.n	402c32 <pbuf_free+0x1a>
          mem_free(p);
  402c58:	4608      	mov	r0, r1
  402c5a:	47a8      	blx	r5
  402c5c:	e7eb      	b.n	402c36 <pbuf_free+0x1e>
    return 0;
  402c5e:	2400      	movs	r4, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  402c60:	4620      	mov	r0, r4
  402c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c66:	bf00      	nop
  402c68:	00402715 	.word	0x00402715
  402c6c:	004029d1 	.word	0x004029d1

00402c70 <pbuf_alloc>:
{
  402c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (layer) {
  402c74:	2804      	cmp	r0, #4
  402c76:	f200 8097 	bhi.w	402da8 <pbuf_alloc+0x138>
  402c7a:	e8df f000 	tbb	[pc, r0]
  402c7e:	030b      	.short	0x030b
  402c80:	0705      	.short	0x0705
  402c82:	09          	.byte	0x09
  402c83:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  402c84:	2422      	movs	r4, #34	; 0x22
  402c86:	e006      	b.n	402c96 <pbuf_alloc+0x26>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  402c88:	240e      	movs	r4, #14
    break;
  402c8a:	e004      	b.n	402c96 <pbuf_alloc+0x26>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  402c8c:	2400      	movs	r4, #0
    break;
  402c8e:	e002      	b.n	402c96 <pbuf_alloc+0x26>
    offset = 0;
  402c90:	2400      	movs	r4, #0
    break;
  402c92:	e000      	b.n	402c96 <pbuf_alloc+0x26>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  402c94:	2436      	movs	r4, #54	; 0x36
  402c96:	4617      	mov	r7, r2
  402c98:	4688      	mov	r8, r1
  switch (type) {
  402c9a:	2a03      	cmp	r2, #3
  402c9c:	f200 8086 	bhi.w	402dac <pbuf_alloc+0x13c>
  402ca0:	e8df f002 	tbb	[pc, r2]
  402ca4:	026e6e52 	.word	0x026e6e52
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402ca8:	2007      	movs	r0, #7
  402caa:	4b42      	ldr	r3, [pc, #264]	; (402db4 <pbuf_alloc+0x144>)
  402cac:	4798      	blx	r3
    if (p == NULL) {
  402cae:	4606      	mov	r6, r0
  402cb0:	2800      	cmp	r0, #0
  402cb2:	d03d      	beq.n	402d30 <pbuf_alloc+0xc0>
    p->type = type;
  402cb4:	2303      	movs	r3, #3
  402cb6:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
  402cb8:	2300      	movs	r3, #0
  402cba:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  402cbc:	1903      	adds	r3, r0, r4
  402cbe:	3313      	adds	r3, #19
  402cc0:	f023 0303 	bic.w	r3, r3, #3
  402cc4:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
  402cc6:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  402cca:	3403      	adds	r4, #3
  402ccc:	f024 0403 	bic.w	r4, r4, #3
  402cd0:	f5c4 64c0 	rsb	r4, r4, #1536	; 0x600
  402cd4:	4544      	cmp	r4, r8
  402cd6:	bf28      	it	cs
  402cd8:	4644      	movcs	r4, r8
  402cda:	8144      	strh	r4, [r0, #10]
    p->ref = 1;
  402cdc:	2301      	movs	r3, #1
  402cde:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
  402ce0:	b2a5      	uxth	r5, r4
  402ce2:	eba8 0505 	sub.w	r5, r8, r5
    while (rem_len > 0) {
  402ce6:	2d00      	cmp	r5, #0
  402ce8:	dd57      	ble.n	402d9a <pbuf_alloc+0x12a>
  402cea:	4682      	mov	sl, r0
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402cec:	f04f 0807 	mov.w	r8, #7
  402cf0:	4f30      	ldr	r7, [pc, #192]	; (402db4 <pbuf_alloc+0x144>)
      q->type = type;
  402cf2:	f04f 0903 	mov.w	r9, #3
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402cf6:	4640      	mov	r0, r8
  402cf8:	47b8      	blx	r7
      if (q == NULL) {
  402cfa:	4604      	mov	r4, r0
  402cfc:	b1e0      	cbz	r0, 402d38 <pbuf_alloc+0xc8>
      q->type = type;
  402cfe:	f880 900c 	strb.w	r9, [r0, #12]
      q->flags = 0;
  402d02:	2300      	movs	r3, #0
  402d04:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
  402d06:	6003      	str	r3, [r0, #0]
      r->next = q;
  402d08:	f8ca 0000 	str.w	r0, [sl]
      q->tot_len = (u16_t)rem_len;
  402d0c:	b2ab      	uxth	r3, r5
  402d0e:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  402d10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  402d14:	bf28      	it	cs
  402d16:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
  402d1a:	8143      	strh	r3, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  402d1c:	f100 0210 	add.w	r2, r0, #16
  402d20:	6042      	str	r2, [r0, #4]
      q->ref = 1;
  402d22:	2201      	movs	r2, #1
  402d24:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
  402d26:	1aed      	subs	r5, r5, r3
      r = q;
  402d28:	4682      	mov	sl, r0
    while (rem_len > 0) {
  402d2a:	2d00      	cmp	r5, #0
  402d2c:	dce3      	bgt.n	402cf6 <pbuf_alloc+0x86>
  402d2e:	e034      	b.n	402d9a <pbuf_alloc+0x12a>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
  402d30:	2201      	movs	r2, #1
  402d32:	4b21      	ldr	r3, [pc, #132]	; (402db8 <pbuf_alloc+0x148>)
  402d34:	701a      	strb	r2, [r3, #0]
  402d36:	e034      	b.n	402da2 <pbuf_alloc+0x132>
  402d38:	2201      	movs	r2, #1
  402d3a:	4b1f      	ldr	r3, [pc, #124]	; (402db8 <pbuf_alloc+0x148>)
  402d3c:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
  402d3e:	4630      	mov	r0, r6
  402d40:	4b1e      	ldr	r3, [pc, #120]	; (402dbc <pbuf_alloc+0x14c>)
  402d42:	4798      	blx	r3
        return NULL;
  402d44:	4626      	mov	r6, r4
  402d46:	e02c      	b.n	402da2 <pbuf_alloc+0x132>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  402d48:	f104 0013 	add.w	r0, r4, #19
  402d4c:	f020 0003 	bic.w	r0, r0, #3
  402d50:	1ccb      	adds	r3, r1, #3
  402d52:	f023 0203 	bic.w	r2, r3, #3
  402d56:	4410      	add	r0, r2
  402d58:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  402d5a:	4290      	cmp	r0, r2
  402d5c:	d328      	bcc.n	402db0 <pbuf_alloc+0x140>
      p = (struct pbuf*)mem_malloc(alloc_len);
  402d5e:	4b18      	ldr	r3, [pc, #96]	; (402dc0 <pbuf_alloc+0x150>)
  402d60:	4798      	blx	r3
    if (p == NULL) {
  402d62:	4606      	mov	r6, r0
  402d64:	b1e8      	cbz	r0, 402da2 <pbuf_alloc+0x132>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  402d66:	4404      	add	r4, r0
  402d68:	3413      	adds	r4, #19
  402d6a:	f024 0403 	bic.w	r4, r4, #3
  402d6e:	6044      	str	r4, [r0, #4]
    p->len = p->tot_len = length;
  402d70:	f8a0 8008 	strh.w	r8, [r0, #8]
  402d74:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  402d78:	2300      	movs	r3, #0
  402d7a:	6003      	str	r3, [r0, #0]
    p->type = type;
  402d7c:	7303      	strb	r3, [r0, #12]
    break;
  402d7e:	e00c      	b.n	402d9a <pbuf_alloc+0x12a>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  402d80:	2006      	movs	r0, #6
  402d82:	4b0c      	ldr	r3, [pc, #48]	; (402db4 <pbuf_alloc+0x144>)
  402d84:	4798      	blx	r3
    if (p == NULL) {
  402d86:	4606      	mov	r6, r0
  402d88:	b158      	cbz	r0, 402da2 <pbuf_alloc+0x132>
    p->payload = NULL;
  402d8a:	2300      	movs	r3, #0
  402d8c:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
  402d8e:	f8a0 8008 	strh.w	r8, [r0, #8]
  402d92:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  402d96:	6003      	str	r3, [r0, #0]
    p->type = type;
  402d98:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
  402d9a:	2301      	movs	r3, #1
  402d9c:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
  402d9e:	2300      	movs	r3, #0
  402da0:	7373      	strb	r3, [r6, #13]
}
  402da2:	4630      	mov	r0, r6
  402da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
  402da8:	2600      	movs	r6, #0
  402daa:	e7fa      	b.n	402da2 <pbuf_alloc+0x132>
    return NULL;
  402dac:	2600      	movs	r6, #0
  402dae:	e7f8      	b.n	402da2 <pbuf_alloc+0x132>
        return NULL;
  402db0:	2600      	movs	r6, #0
  402db2:	e7f6      	b.n	402da2 <pbuf_alloc+0x132>
  402db4:	004029b1 	.word	0x004029b1
  402db8:	20404978 	.word	0x20404978
  402dbc:	00402c19 	.word	0x00402c19
  402dc0:	0040287d 	.word	0x0040287d

00402dc4 <pbuf_realloc>:
  if (new_len >= p->tot_len) {
  402dc4:	8902      	ldrh	r2, [r0, #8]
  402dc6:	428a      	cmp	r2, r1
  402dc8:	d926      	bls.n	402e18 <pbuf_realloc+0x54>
{
  402dca:	b538      	push	{r3, r4, r5, lr}
  402dcc:	4604      	mov	r4, r0
  while (rem_len > q->len) {
  402dce:	8943      	ldrh	r3, [r0, #10]
  402dd0:	4299      	cmp	r1, r3
  402dd2:	d91f      	bls.n	402e14 <pbuf_realloc+0x50>
  402dd4:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
  402dd6:	1a89      	subs	r1, r1, r2
    rem_len -= q->len;
  402dd8:	1aeb      	subs	r3, r5, r3
  402dda:	b29d      	uxth	r5, r3
    q->tot_len += (u16_t)grow;
  402ddc:	8923      	ldrh	r3, [r4, #8]
  402dde:	440b      	add	r3, r1
  402de0:	8123      	strh	r3, [r4, #8]
    q = q->next;
  402de2:	6824      	ldr	r4, [r4, #0]
  while (rem_len > q->len) {
  402de4:	8963      	ldrh	r3, [r4, #10]
  402de6:	42ab      	cmp	r3, r5
  402de8:	d3f6      	bcc.n	402dd8 <pbuf_realloc+0x14>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  402dea:	7b22      	ldrb	r2, [r4, #12]
  402dec:	b94a      	cbnz	r2, 402e02 <pbuf_realloc+0x3e>
  402dee:	429d      	cmp	r5, r3
  402df0:	d007      	beq.n	402e02 <pbuf_realloc+0x3e>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  402df2:	6863      	ldr	r3, [r4, #4]
  402df4:	1b1b      	subs	r3, r3, r4
  402df6:	18e9      	adds	r1, r5, r3
  402df8:	b289      	uxth	r1, r1
  402dfa:	4620      	mov	r0, r4
  402dfc:	4b07      	ldr	r3, [pc, #28]	; (402e1c <pbuf_realloc+0x58>)
  402dfe:	4798      	blx	r3
  402e00:	4604      	mov	r4, r0
  q->len = rem_len;
  402e02:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
  402e04:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
  402e06:	6820      	ldr	r0, [r4, #0]
  402e08:	b108      	cbz	r0, 402e0e <pbuf_realloc+0x4a>
    pbuf_free(q->next);
  402e0a:	4b05      	ldr	r3, [pc, #20]	; (402e20 <pbuf_realloc+0x5c>)
  402e0c:	4798      	blx	r3
  q->next = NULL;
  402e0e:	2300      	movs	r3, #0
  402e10:	6023      	str	r3, [r4, #0]
  402e12:	bd38      	pop	{r3, r4, r5, pc}
  while (rem_len > q->len) {
  402e14:	460d      	mov	r5, r1
  402e16:	e7e8      	b.n	402dea <pbuf_realloc+0x26>
  402e18:	4770      	bx	lr
  402e1a:	bf00      	nop
  402e1c:	004027ad 	.word	0x004027ad
  402e20:	00402c19 	.word	0x00402c19

00402e24 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
  402e24:	4603      	mov	r3, r0
  402e26:	b130      	cbz	r0, 402e36 <pbuf_clen+0x12>
  402e28:	2000      	movs	r0, #0
    ++len;
  402e2a:	3001      	adds	r0, #1
  402e2c:	b280      	uxth	r0, r0
    p = p->next;
  402e2e:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
  402e30:	2b00      	cmp	r3, #0
  402e32:	d1fa      	bne.n	402e2a <pbuf_clen+0x6>
  402e34:	4770      	bx	lr
  len = 0;
  402e36:	2000      	movs	r0, #0
  }
  return len;
}
  402e38:	4770      	bx	lr

00402e3a <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
  402e3a:	b110      	cbz	r0, 402e42 <pbuf_ref+0x8>
    SYS_ARCH_INC(p->ref, 1);
  402e3c:	89c3      	ldrh	r3, [r0, #14]
  402e3e:	3301      	adds	r3, #1
  402e40:	81c3      	strh	r3, [r0, #14]
  402e42:	4770      	bx	lr

00402e44 <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  402e44:	b1b0      	cbz	r0, 402e74 <pbuf_cat+0x30>
{
  402e46:	b410      	push	{r4}
  402e48:	4604      	mov	r4, r0
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  402e4a:	b189      	cbz	r1, 402e70 <pbuf_cat+0x2c>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  402e4c:	6802      	ldr	r2, [r0, #0]
  402e4e:	b912      	cbnz	r2, 402e56 <pbuf_cat+0x12>
  402e50:	4602      	mov	r2, r0
  402e52:	e008      	b.n	402e66 <pbuf_cat+0x22>
  402e54:	461a      	mov	r2, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  402e56:	8923      	ldrh	r3, [r4, #8]
  402e58:	8908      	ldrh	r0, [r1, #8]
  402e5a:	4403      	add	r3, r0
  402e5c:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
  402e5e:	6813      	ldr	r3, [r2, #0]
  402e60:	4614      	mov	r4, r2
  402e62:	2b00      	cmp	r3, #0
  402e64:	d1f6      	bne.n	402e54 <pbuf_cat+0x10>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  402e66:	8913      	ldrh	r3, [r2, #8]
  402e68:	8908      	ldrh	r0, [r1, #8]
  402e6a:	4403      	add	r3, r0
  402e6c:	8113      	strh	r3, [r2, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  402e6e:	6011      	str	r1, [r2, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  402e70:	f85d 4b04 	ldr.w	r4, [sp], #4
  402e74:	4770      	bx	lr
	...

00402e78 <pbuf_copy>:

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402e78:	2800      	cmp	r0, #0
  402e7a:	d069      	beq.n	402f50 <pbuf_copy+0xd8>
{
  402e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402e80:	460e      	mov	r6, r1
  402e82:	4607      	mov	r7, r0
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402e84:	2900      	cmp	r1, #0
  402e86:	d03f      	beq.n	402f08 <pbuf_copy+0x90>
  402e88:	8902      	ldrh	r2, [r0, #8]
  402e8a:	890b      	ldrh	r3, [r1, #8]
  402e8c:	429a      	cmp	r2, r3
  402e8e:	d33f      	bcc.n	402f10 <pbuf_copy+0x98>
  402e90:	f04f 0a00 	mov.w	sl, #0
  402e94:	4655      	mov	r5, sl
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  402e96:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 402f58 <pbuf_copy+0xe0>
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  402e9a:	46d1      	mov	r9, sl
  402e9c:	e00d      	b.n	402eba <pbuf_copy+0x42>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
  402e9e:	897b      	ldrh	r3, [r7, #10]
  402ea0:	42ab      	cmp	r3, r5
  402ea2:	d025      	beq.n	402ef0 <pbuf_copy+0x78>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  402ea4:	2e00      	cmp	r6, #0
  402ea6:	d042      	beq.n	402f2e <pbuf_copy+0xb6>
  402ea8:	8972      	ldrh	r2, [r6, #10]
  402eaa:	8933      	ldrh	r3, [r6, #8]
  402eac:	429a      	cmp	r2, r3
  402eae:	d024      	beq.n	402efa <pbuf_copy+0x82>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  402eb0:	b11f      	cbz	r7, 402eba <pbuf_copy+0x42>
  402eb2:	897a      	ldrh	r2, [r7, #10]
  402eb4:	893b      	ldrh	r3, [r7, #8]
  402eb6:	429a      	cmp	r2, r3
  402eb8:	d03f      	beq.n	402f3a <pbuf_copy+0xc2>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  402eba:	897b      	ldrh	r3, [r7, #10]
  402ebc:	8974      	ldrh	r4, [r6, #10]
  402ebe:	1b59      	subs	r1, r3, r5
  402ec0:	eba4 020a 	sub.w	r2, r4, sl
  402ec4:	4291      	cmp	r1, r2
      len = p_from->len - offset_from;
  402ec6:	bfac      	ite	ge
  402ec8:	4614      	movge	r4, r2
      len = p_to->len - offset_to;
  402eca:	1b5c      	sublt	r4, r3, r5
  402ecc:	b2a4      	uxth	r4, r4
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  402ece:	6878      	ldr	r0, [r7, #4]
  402ed0:	6871      	ldr	r1, [r6, #4]
  402ed2:	4622      	mov	r2, r4
  402ed4:	4451      	add	r1, sl
  402ed6:	4428      	add	r0, r5
  402ed8:	47c0      	blx	r8
    offset_to += len;
  402eda:	4425      	add	r5, r4
  402edc:	b2ad      	uxth	r5, r5
    offset_from += len;
  402ede:	4454      	add	r4, sl
  402ee0:	fa1f fa84 	uxth.w	sl, r4
    if (offset_from >= p_from->len) {
  402ee4:	8973      	ldrh	r3, [r6, #10]
  402ee6:	4553      	cmp	r3, sl
  402ee8:	d8d9      	bhi.n	402e9e <pbuf_copy+0x26>
      p_from = p_from->next;
  402eea:	6836      	ldr	r6, [r6, #0]
      offset_from = 0;
  402eec:	46ca      	mov	sl, r9
  402eee:	e7d6      	b.n	402e9e <pbuf_copy+0x26>
      p_to = p_to->next;
  402ef0:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  402ef2:	b907      	cbnz	r7, 402ef6 <pbuf_copy+0x7e>
  402ef4:	b986      	cbnz	r6, 402f18 <pbuf_copy+0xa0>
      offset_to = 0;
  402ef6:	464d      	mov	r5, r9
  402ef8:	e7d4      	b.n	402ea4 <pbuf_copy+0x2c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  402efa:	6833      	ldr	r3, [r6, #0]
  402efc:	2b00      	cmp	r3, #0
  402efe:	d0d7      	beq.n	402eb0 <pbuf_copy+0x38>
  402f00:	f06f 0005 	mvn.w	r0, #5
  402f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402f08:	f06f 000f 	mvn.w	r0, #15
  402f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f10:	f06f 000f 	mvn.w	r0, #15
  402f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  402f18:	f06f 000f 	mvn.w	r0, #15
  402f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  402f20:	f06f 0005 	mvn.w	r0, #5
  402f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  402f28:	2000      	movs	r0, #0
  402f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  402f2e:	2f00      	cmp	r7, #0
  402f30:	d0fa      	beq.n	402f28 <pbuf_copy+0xb0>
  402f32:	897a      	ldrh	r2, [r7, #10]
  402f34:	893b      	ldrh	r3, [r7, #8]
  402f36:	429a      	cmp	r2, r3
  402f38:	d107      	bne.n	402f4a <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  402f3a:	683b      	ldr	r3, [r7, #0]
  402f3c:	2b00      	cmp	r3, #0
  402f3e:	d1ef      	bne.n	402f20 <pbuf_copy+0xa8>
  } while (p_from);
  402f40:	2e00      	cmp	r6, #0
  402f42:	d1ba      	bne.n	402eba <pbuf_copy+0x42>
  return ERR_OK;
  402f44:	2000      	movs	r0, #0
  402f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f4a:	2000      	movs	r0, #0
  402f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402f50:	f06f 000f 	mvn.w	r0, #15
}
  402f54:	4770      	bx	lr
  402f56:	bf00      	nop
  402f58:	00406fc1 	.word	0x00406fc1

00402f5c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  402f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  402f60:	b341      	cbz	r1, 402fb4 <pbuf_copy_partial+0x58>
  402f62:	4605      	mov	r5, r0
  402f64:	4692      	mov	sl, r2
  402f66:	460f      	mov	r7, r1
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  402f68:	b340      	cbz	r0, 402fbc <pbuf_copy_partial+0x60>
  402f6a:	b33a      	cbz	r2, 402fbc <pbuf_copy_partial+0x60>
  402f6c:	2600      	movs	r6, #0
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  402f6e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 402fc0 <pbuf_copy_partial+0x64>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
  402f72:	46b0      	mov	r8, r6
  402f74:	e016      	b.n	402fa4 <pbuf_copy_partial+0x48>
      buf_copy_len = p->len - offset;
  402f76:	896c      	ldrh	r4, [r5, #10]
  402f78:	1ae4      	subs	r4, r4, r3
  402f7a:	b2a4      	uxth	r4, r4
  402f7c:	4554      	cmp	r4, sl
  402f7e:	bf28      	it	cs
  402f80:	4654      	movcs	r4, sl
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  402f82:	6869      	ldr	r1, [r5, #4]
  402f84:	4622      	mov	r2, r4
  402f86:	4419      	add	r1, r3
  402f88:	19b8      	adds	r0, r7, r6
  402f8a:	47c8      	blx	r9
      copied_total += buf_copy_len;
  402f8c:	4426      	add	r6, r4
  402f8e:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
  402f90:	ebaa 0404 	sub.w	r4, sl, r4
  402f94:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
  402f98:	4643      	mov	r3, r8
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  402f9a:	682d      	ldr	r5, [r5, #0]
  402f9c:	f1ba 0f00 	cmp.w	sl, #0
  402fa0:	d009      	beq.n	402fb6 <pbuf_copy_partial+0x5a>
  402fa2:	b145      	cbz	r5, 402fb6 <pbuf_copy_partial+0x5a>
    if ((offset != 0) && (offset >= p->len)) {
  402fa4:	2b00      	cmp	r3, #0
  402fa6:	d0e6      	beq.n	402f76 <pbuf_copy_partial+0x1a>
  402fa8:	896a      	ldrh	r2, [r5, #10]
  402faa:	429a      	cmp	r2, r3
  402fac:	d8e3      	bhi.n	402f76 <pbuf_copy_partial+0x1a>
      offset -= p->len;
  402fae:	1a9b      	subs	r3, r3, r2
  402fb0:	b29b      	uxth	r3, r3
  402fb2:	e7f2      	b.n	402f9a <pbuf_copy_partial+0x3e>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  402fb4:	2600      	movs	r6, #0
    }
  }
  return copied_total;
}
  402fb6:	4630      	mov	r0, r6
  402fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  402fbc:	2600      	movs	r6, #0
  402fbe:	e7fa      	b.n	402fb6 <pbuf_copy_partial+0x5a>
  402fc0:	00406fc1 	.word	0x00406fc1

00402fc4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  402fc4:	b4f0      	push	{r4, r5, r6, r7}
  402fc6:	4b16      	ldr	r3, [pc, #88]	; (403020 <tcp_new_port+0x5c>)
  402fc8:	8818      	ldrh	r0, [r3, #0]
  402fca:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  402fce:	f64f 76ff 	movw	r6, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  402fd2:	f44f 4740 	mov.w	r7, #49152	; 0xc000
  402fd6:	e004      	b.n	402fe2 <tcp_new_port+0x1e>
  402fd8:	4638      	mov	r0, r7
  402fda:	e006      	b.n	402fea <tcp_new_port+0x26>
  402fdc:	3c01      	subs	r4, #1
  402fde:	b2a4      	uxth	r4, r4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  402fe0:	b19c      	cbz	r4, 40300a <tcp_new_port+0x46>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  402fe2:	42b0      	cmp	r0, r6
  402fe4:	d0f8      	beq.n	402fd8 <tcp_new_port+0x14>
  402fe6:	3001      	adds	r0, #1
  402fe8:	b280      	uxth	r0, r0
  402fea:	490e      	ldr	r1, [pc, #56]	; (403024 <tcp_new_port+0x60>)
  402fec:	f101 0510 	add.w	r5, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  402ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ff4:	681b      	ldr	r3, [r3, #0]
  402ff6:	b163      	cbz	r3, 403012 <tcp_new_port+0x4e>
      if (pcb->local_port == tcp_port) {
  402ff8:	8ada      	ldrh	r2, [r3, #22]
  402ffa:	4282      	cmp	r2, r0
  402ffc:	d0ee      	beq.n	402fdc <tcp_new_port+0x18>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  402ffe:	68db      	ldr	r3, [r3, #12]
  403000:	b13b      	cbz	r3, 403012 <tcp_new_port+0x4e>
      if (pcb->local_port == tcp_port) {
  403002:	8ada      	ldrh	r2, [r3, #22]
  403004:	4282      	cmp	r2, r0
  403006:	d1fa      	bne.n	402ffe <tcp_new_port+0x3a>
  403008:	e7e8      	b.n	402fdc <tcp_new_port+0x18>
  40300a:	4b05      	ldr	r3, [pc, #20]	; (403020 <tcp_new_port+0x5c>)
  40300c:	8018      	strh	r0, [r3, #0]
          return 0;
  40300e:	2000      	movs	r0, #0
  403010:	e003      	b.n	40301a <tcp_new_port+0x56>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  403012:	428d      	cmp	r5, r1
  403014:	d1ec      	bne.n	402ff0 <tcp_new_port+0x2c>
  403016:	4b02      	ldr	r3, [pc, #8]	; (403020 <tcp_new_port+0x5c>)
  403018:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
  40301a:	bcf0      	pop	{r4, r5, r6, r7}
  40301c:	4770      	bx	lr
  40301e:	bf00      	nop
  403020:	2040000c 	.word	0x2040000c
  403024:	0040a478 	.word	0x0040a478

00403028 <tcp_close_shutdown_fin>:
{
  403028:	b510      	push	{r4, lr}
  40302a:	4604      	mov	r4, r0
  switch (pcb->state) {
  40302c:	7d03      	ldrb	r3, [r0, #20]
  40302e:	2b04      	cmp	r3, #4
  403030:	d011      	beq.n	403056 <tcp_close_shutdown_fin+0x2e>
  403032:	2b07      	cmp	r3, #7
  403034:	d016      	beq.n	403064 <tcp_close_shutdown_fin+0x3c>
  403036:	2b03      	cmp	r3, #3
  403038:	d001      	beq.n	40303e <tcp_close_shutdown_fin+0x16>
    return ERR_OK;
  40303a:	2300      	movs	r3, #0
  40303c:	e009      	b.n	403052 <tcp_close_shutdown_fin+0x2a>
    err = tcp_send_fin(pcb);
  40303e:	4b11      	ldr	r3, [pc, #68]	; (403084 <tcp_close_shutdown_fin+0x5c>)
  403040:	4798      	blx	r3
    if (err == ERR_OK) {
  403042:	4603      	mov	r3, r0
  403044:	b9a8      	cbnz	r0, 403072 <tcp_close_shutdown_fin+0x4a>
      pcb->state = FIN_WAIT_1;
  403046:	2305      	movs	r3, #5
  403048:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
  40304a:	4620      	mov	r0, r4
  40304c:	4b0e      	ldr	r3, [pc, #56]	; (403088 <tcp_close_shutdown_fin+0x60>)
  40304e:	4798      	blx	r3
  return err;
  403050:	2300      	movs	r3, #0
}
  403052:	4618      	mov	r0, r3
  403054:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
  403056:	4b0b      	ldr	r3, [pc, #44]	; (403084 <tcp_close_shutdown_fin+0x5c>)
  403058:	4798      	blx	r3
    if (err == ERR_OK) {
  40305a:	4603      	mov	r3, r0
  40305c:	b948      	cbnz	r0, 403072 <tcp_close_shutdown_fin+0x4a>
      pcb->state = FIN_WAIT_1;
  40305e:	2305      	movs	r3, #5
  403060:	7523      	strb	r3, [r4, #20]
  403062:	e7f2      	b.n	40304a <tcp_close_shutdown_fin+0x22>
    err = tcp_send_fin(pcb);
  403064:	4b07      	ldr	r3, [pc, #28]	; (403084 <tcp_close_shutdown_fin+0x5c>)
  403066:	4798      	blx	r3
    if (err == ERR_OK) {
  403068:	4603      	mov	r3, r0
  40306a:	b910      	cbnz	r0, 403072 <tcp_close_shutdown_fin+0x4a>
      pcb->state = LAST_ACK;
  40306c:	2309      	movs	r3, #9
  40306e:	7523      	strb	r3, [r4, #20]
  403070:	e7eb      	b.n	40304a <tcp_close_shutdown_fin+0x22>
  } else if (err == ERR_MEM) {
  403072:	f1b3 3fff 	cmp.w	r3, #4294967295
  403076:	d1ec      	bne.n	403052 <tcp_close_shutdown_fin+0x2a>
    pcb->flags |= TF_CLOSEPEND;
  403078:	7ea3      	ldrb	r3, [r4, #26]
  40307a:	f043 0308 	orr.w	r3, r3, #8
  40307e:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
  403080:	2300      	movs	r3, #0
  403082:	e7e6      	b.n	403052 <tcp_close_shutdown_fin+0x2a>
  403084:	004057fd 	.word	0x004057fd
  403088:	004058f5 	.word	0x004058f5

0040308c <tcp_init>:
{
  40308c:	4770      	bx	lr
	...

00403090 <tcp_bind>:
{
  403090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ipaddr == NULL) {
  403092:	1e0c      	subs	r4, r1, #0
    ipaddr = IP4_ADDR_ANY;
  403094:	4b25      	ldr	r3, [pc, #148]	; (40312c <tcp_bind+0x9c>)
  403096:	2900      	cmp	r1, #0
  403098:	bf08      	it	eq
  40309a:	461c      	moveq	r4, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
  40309c:	2800      	cmp	r0, #0
  40309e:	d036      	beq.n	40310e <tcp_bind+0x7e>
  4030a0:	fab4 f584 	clz	r5, r4
  4030a4:	096d      	lsrs	r5, r5, #5
  4030a6:	4606      	mov	r6, r0
  4030a8:	2d00      	cmp	r5, #0
  4030aa:	d130      	bne.n	40310e <tcp_bind+0x7e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  4030ac:	7d03      	ldrb	r3, [r0, #20]
  4030ae:	2b00      	cmp	r3, #0
  4030b0:	d130      	bne.n	403114 <tcp_bind+0x84>
  if (port == 0) {
  4030b2:	b14a      	cbz	r2, 4030c8 <tcp_bind+0x38>
  4030b4:	4f1e      	ldr	r7, [pc, #120]	; (403130 <tcp_bind+0xa0>)
  4030b6:	f107 0e10 	add.w	lr, r7, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  4030ba:	f857 3b04 	ldr.w	r3, [r7], #4
  4030be:	681b      	ldr	r3, [r3, #0]
  4030c0:	b9b3      	cbnz	r3, 4030f0 <tcp_bind+0x60>
    for (i = 0; i < max_pcb_list; i++) {
  4030c2:	4577      	cmp	r7, lr
  4030c4:	d1f9      	bne.n	4030ba <tcp_bind+0x2a>
  4030c6:	e003      	b.n	4030d0 <tcp_bind+0x40>
    port = tcp_new_port();
  4030c8:	4b1a      	ldr	r3, [pc, #104]	; (403134 <tcp_bind+0xa4>)
  4030ca:	4798      	blx	r3
    if (port == 0) {
  4030cc:	4602      	mov	r2, r0
  4030ce:	b320      	cbz	r0, 40311a <tcp_bind+0x8a>
  if (!ip_addr_isany(ipaddr)) {
  4030d0:	b114      	cbz	r4, 4030d8 <tcp_bind+0x48>
  4030d2:	6823      	ldr	r3, [r4, #0]
  4030d4:	b103      	cbz	r3, 4030d8 <tcp_bind+0x48>
    ip_addr_set(&pcb->local_ip, ipaddr);
  4030d6:	6033      	str	r3, [r6, #0]
  pcb->local_port = port;
  4030d8:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
  4030da:	4b17      	ldr	r3, [pc, #92]	; (403138 <tcp_bind+0xa8>)
  4030dc:	681a      	ldr	r2, [r3, #0]
  4030de:	60f2      	str	r2, [r6, #12]
  4030e0:	601e      	str	r6, [r3, #0]
  4030e2:	4b16      	ldr	r3, [pc, #88]	; (40313c <tcp_bind+0xac>)
  4030e4:	4798      	blx	r3
  return ERR_OK;
  4030e6:	2000      	movs	r0, #0
  4030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  4030ea:	68db      	ldr	r3, [r3, #12]
  4030ec:	2b00      	cmp	r3, #0
  4030ee:	d0e8      	beq.n	4030c2 <tcp_bind+0x32>
        if (cpcb->local_port == port) {
  4030f0:	8ad9      	ldrh	r1, [r3, #22]
  4030f2:	4291      	cmp	r1, r2
  4030f4:	d1f9      	bne.n	4030ea <tcp_bind+0x5a>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  4030f6:	b19b      	cbz	r3, 403120 <tcp_bind+0x90>
                (ip_addr_isany(&cpcb->local_ip) ||
  4030f8:	6819      	ldr	r1, [r3, #0]
  4030fa:	b1a1      	cbz	r1, 403126 <tcp_bind+0x96>
  4030fc:	b99d      	cbnz	r5, 403126 <tcp_bind+0x96>
                ip_addr_isany(ipaddr) ||
  4030fe:	6820      	ldr	r0, [r4, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  403100:	4281      	cmp	r1, r0
  403102:	d001      	beq.n	403108 <tcp_bind+0x78>
  403104:	2800      	cmp	r0, #0
  403106:	d1f0      	bne.n	4030ea <tcp_bind+0x5a>
              return ERR_USE;
  403108:	f06f 0007 	mvn.w	r0, #7
}
  40310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
  40310e:	f06f 0005 	mvn.w	r0, #5
  403112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  403114:	f06f 0005 	mvn.w	r0, #5
  403118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERR_BUF;
  40311a:	f06f 0001 	mvn.w	r0, #1
  40311e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              return ERR_USE;
  403120:	f06f 0007 	mvn.w	r0, #7
  403124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403126:	f06f 0007 	mvn.w	r0, #7
  40312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40312c:	0040a3e4 	.word	0x0040a3e4
  403130:	0040a478 	.word	0x0040a478
  403134:	00402fc5 	.word	0x00402fc5
  403138:	2040498c 	.word	0x2040498c
  40313c:	00406009 	.word	0x00406009

00403140 <tcp_listen_with_backlog_and_err>:
{
  403140:	b570      	push	{r4, r5, r6, lr}
  403142:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  403144:	7d03      	ldrb	r3, [r0, #20]
  403146:	2b00      	cmp	r3, #0
  403148:	d13f      	bne.n	4031ca <tcp_listen_with_backlog_and_err+0x8a>
  40314a:	4604      	mov	r4, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  40314c:	2002      	movs	r0, #2
  40314e:	4b22      	ldr	r3, [pc, #136]	; (4031d8 <tcp_listen_with_backlog_and_err+0x98>)
  403150:	4798      	blx	r3
  if (lpcb == NULL) {
  403152:	4605      	mov	r5, r0
  403154:	2800      	cmp	r0, #0
  403156:	d03c      	beq.n	4031d2 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
  403158:	6923      	ldr	r3, [r4, #16]
  40315a:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
  40315c:	8ae3      	ldrh	r3, [r4, #22]
  40315e:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
  403160:	2301      	movs	r3, #1
  403162:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
  403164:	7d63      	ldrb	r3, [r4, #21]
  403166:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
  403168:	7a23      	ldrb	r3, [r4, #8]
  40316a:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
  40316c:	7aa3      	ldrb	r3, [r4, #10]
  40316e:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
  403170:	7a63      	ldrb	r3, [r4, #9]
  403172:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  403174:	6823      	ldr	r3, [r4, #0]
  403176:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
  403178:	8ae3      	ldrh	r3, [r4, #22]
  40317a:	b1ab      	cbz	r3, 4031a8 <tcp_listen_with_backlog_and_err+0x68>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  40317c:	4b17      	ldr	r3, [pc, #92]	; (4031dc <tcp_listen_with_backlog_and_err+0x9c>)
  40317e:	681a      	ldr	r2, [r3, #0]
  403180:	4294      	cmp	r4, r2
  403182:	d009      	beq.n	403198 <tcp_listen_with_backlog_and_err+0x58>
  403184:	b172      	cbz	r2, 4031a4 <tcp_listen_with_backlog_and_err+0x64>
  403186:	68d3      	ldr	r3, [r2, #12]
  403188:	429c      	cmp	r4, r3
  40318a:	d008      	beq.n	40319e <tcp_listen_with_backlog_and_err+0x5e>
  40318c:	b153      	cbz	r3, 4031a4 <tcp_listen_with_backlog_and_err+0x64>
  40318e:	68da      	ldr	r2, [r3, #12]
  403190:	4294      	cmp	r4, r2
  403192:	d005      	beq.n	4031a0 <tcp_listen_with_backlog_and_err+0x60>
  403194:	4613      	mov	r3, r2
  403196:	e7f9      	b.n	40318c <tcp_listen_with_backlog_and_err+0x4c>
  403198:	68d2      	ldr	r2, [r2, #12]
  40319a:	601a      	str	r2, [r3, #0]
  40319c:	e002      	b.n	4031a4 <tcp_listen_with_backlog_and_err+0x64>
  40319e:	4613      	mov	r3, r2
  4031a0:	68e2      	ldr	r2, [r4, #12]
  4031a2:	60da      	str	r2, [r3, #12]
  4031a4:	2300      	movs	r3, #0
  4031a6:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
  4031a8:	4621      	mov	r1, r4
  4031aa:	2001      	movs	r0, #1
  4031ac:	4b0c      	ldr	r3, [pc, #48]	; (4031e0 <tcp_listen_with_backlog_and_err+0xa0>)
  4031ae:	4798      	blx	r3
  lpcb->accept = tcp_accept_null;
  4031b0:	4b0c      	ldr	r3, [pc, #48]	; (4031e4 <tcp_listen_with_backlog_and_err+0xa4>)
  4031b2:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  4031b4:	4b0c      	ldr	r3, [pc, #48]	; (4031e8 <tcp_listen_with_backlog_and_err+0xa8>)
  4031b6:	681a      	ldr	r2, [r3, #0]
  4031b8:	60ea      	str	r2, [r5, #12]
  4031ba:	601d      	str	r5, [r3, #0]
  4031bc:	4b0b      	ldr	r3, [pc, #44]	; (4031ec <tcp_listen_with_backlog_and_err+0xac>)
  4031be:	4798      	blx	r3
  res = ERR_OK;
  4031c0:	2300      	movs	r3, #0
  if (err != NULL) {
  4031c2:	b106      	cbz	r6, 4031c6 <tcp_listen_with_backlog_and_err+0x86>
    *err = res;
  4031c4:	7033      	strb	r3, [r6, #0]
}
  4031c6:	4628      	mov	r0, r5
  4031c8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  4031ca:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
  4031ce:	2500      	movs	r5, #0
  4031d0:	e7f7      	b.n	4031c2 <tcp_listen_with_backlog_and_err+0x82>
    res = ERR_MEM;
  4031d2:	f04f 33ff 	mov.w	r3, #4294967295
  4031d6:	e7f4      	b.n	4031c2 <tcp_listen_with_backlog_and_err+0x82>
  4031d8:	004029b1 	.word	0x004029b1
  4031dc:	2040498c 	.word	0x2040498c
  4031e0:	004029d1 	.word	0x004029d1
  4031e4:	00403b89 	.word	0x00403b89
  4031e8:	20404988 	.word	0x20404988
  4031ec:	00406009 	.word	0x00406009

004031f0 <tcp_listen_with_backlog>:
{
  4031f0:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  4031f2:	2200      	movs	r2, #0
  4031f4:	4b01      	ldr	r3, [pc, #4]	; (4031fc <tcp_listen_with_backlog+0xc>)
  4031f6:	4798      	blx	r3
}
  4031f8:	bd08      	pop	{r3, pc}
  4031fa:	bf00      	nop
  4031fc:	00403141 	.word	0x00403141

00403200 <tcp_update_rcv_ann_wnd>:
{
  403200:	b470      	push	{r4, r5, r6}
  403202:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  403204:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403206:	8d04      	ldrh	r4, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  403208:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  40320a:	1963      	adds	r3, r4, r5
  40320c:	1a58      	subs	r0, r3, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  40320e:	8e53      	ldrh	r3, [r2, #50]	; 0x32
  403210:	f240 56b4 	movw	r6, #1460	; 0x5b4
  403214:	42b3      	cmp	r3, r6
  403216:	bf94      	ite	ls
  403218:	1ac3      	subls	r3, r0, r3
  40321a:	1b83      	subhi	r3, r0, r6
  40321c:	2b00      	cmp	r3, #0
  40321e:	db02      	blt.n	403226 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  403220:	8554      	strh	r4, [r2, #42]	; 0x2a
}
  403222:	bc70      	pop	{r4, r5, r6}
  403224:	4770      	bx	lr
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  403226:	1a6b      	subs	r3, r5, r1
  403228:	2b00      	cmp	r3, #0
  40322a:	dd03      	ble.n	403234 <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
  40322c:	2300      	movs	r3, #0
  40322e:	8553      	strh	r3, [r2, #42]	; 0x2a
    return 0;
  403230:	4618      	mov	r0, r3
  403232:	e7f6      	b.n	403222 <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  403234:	1b49      	subs	r1, r1, r5
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  403236:	8551      	strh	r1, [r2, #42]	; 0x2a
    return 0;
  403238:	2000      	movs	r0, #0
  40323a:	e7f2      	b.n	403222 <tcp_update_rcv_ann_wnd+0x22>

0040323c <tcp_recved>:
{
  40323c:	b510      	push	{r4, lr}
  40323e:	4604      	mov	r4, r0
  pcb->rcv_wnd += len;
  403240:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  403242:	4419      	add	r1, r3
  403244:	b289      	uxth	r1, r1
  403246:	8501      	strh	r1, [r0, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  403248:	f640 3368 	movw	r3, #2920	; 0xb68
  40324c:	4299      	cmp	r1, r3
  40324e:	d908      	bls.n	403262 <tcp_recved+0x26>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  403250:	8503      	strh	r3, [r0, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  403252:	4620      	mov	r0, r4
  403254:	4b0c      	ldr	r3, [pc, #48]	; (403288 <tcp_recved+0x4c>)
  403256:	4798      	blx	r3
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  403258:	f240 23d9 	movw	r3, #729	; 0x2d9
  40325c:	4298      	cmp	r0, r3
  40325e:	dc0b      	bgt.n	403278 <tcp_recved+0x3c>
  403260:	bd10      	pop	{r4, pc}
  } else if (pcb->rcv_wnd == 0) {
  403262:	2900      	cmp	r1, #0
  403264:	d1f5      	bne.n	403252 <tcp_recved+0x16>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  403266:	7d03      	ldrb	r3, [r0, #20]
  403268:	2b07      	cmp	r3, #7
  40326a:	d001      	beq.n	403270 <tcp_recved+0x34>
  40326c:	2b09      	cmp	r3, #9
  40326e:	d1f0      	bne.n	403252 <tcp_recved+0x16>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  403270:	f640 3368 	movw	r3, #2920	; 0xb68
  403274:	8523      	strh	r3, [r4, #40]	; 0x28
  403276:	e7ec      	b.n	403252 <tcp_recved+0x16>
    tcp_ack_now(pcb);
  403278:	7ea3      	ldrb	r3, [r4, #26]
  40327a:	f043 0302 	orr.w	r3, r3, #2
  40327e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
  403280:	4620      	mov	r0, r4
  403282:	4b02      	ldr	r3, [pc, #8]	; (40328c <tcp_recved+0x50>)
  403284:	4798      	blx	r3
}
  403286:	e7eb      	b.n	403260 <tcp_recved+0x24>
  403288:	00403201 	.word	0x00403201
  40328c:	004058f5 	.word	0x004058f5

00403290 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
  403290:	b150      	cbz	r0, 4032a8 <tcp_seg_free+0x18>
{
  403292:	b510      	push	{r4, lr}
  403294:	4604      	mov	r4, r0
    if (seg->p != NULL) {
  403296:	6840      	ldr	r0, [r0, #4]
  403298:	b108      	cbz	r0, 40329e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
  40329a:	4b04      	ldr	r3, [pc, #16]	; (4032ac <tcp_seg_free+0x1c>)
  40329c:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  40329e:	4621      	mov	r1, r4
  4032a0:	2003      	movs	r0, #3
  4032a2:	4b03      	ldr	r3, [pc, #12]	; (4032b0 <tcp_seg_free+0x20>)
  4032a4:	4798      	blx	r3
  4032a6:	bd10      	pop	{r4, pc}
  4032a8:	4770      	bx	lr
  4032aa:	bf00      	nop
  4032ac:	00402c19 	.word	0x00402c19
  4032b0:	004029d1 	.word	0x004029d1

004032b4 <tcp_segs_free>:
  while (seg != NULL) {
  4032b4:	b148      	cbz	r0, 4032ca <tcp_segs_free+0x16>
{
  4032b6:	b538      	push	{r3, r4, r5, lr}
  4032b8:	4603      	mov	r3, r0
    tcp_seg_free(seg);
  4032ba:	4d04      	ldr	r5, [pc, #16]	; (4032cc <tcp_segs_free+0x18>)
    struct tcp_seg *next = seg->next;
  4032bc:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
  4032be:	4618      	mov	r0, r3
  4032c0:	47a8      	blx	r5
    seg = next;
  4032c2:	4623      	mov	r3, r4
  while (seg != NULL) {
  4032c4:	2c00      	cmp	r4, #0
  4032c6:	d1f9      	bne.n	4032bc <tcp_segs_free+0x8>
  4032c8:	bd38      	pop	{r3, r4, r5, pc}
  4032ca:	4770      	bx	lr
  4032cc:	00403291 	.word	0x00403291

004032d0 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
  4032d0:	7541      	strb	r1, [r0, #21]
  4032d2:	4770      	bx	lr

004032d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  4032d4:	b538      	push	{r3, r4, r5, lr}
  4032d6:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  4032d8:	2003      	movs	r0, #3
  4032da:	4b08      	ldr	r3, [pc, #32]	; (4032fc <tcp_seg_copy+0x28>)
  4032dc:	4798      	blx	r3
  if (cseg == NULL) {
  4032de:	4604      	mov	r4, r0
  4032e0:	b150      	cbz	r0, 4032f8 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  4032e2:	6828      	ldr	r0, [r5, #0]
  4032e4:	6869      	ldr	r1, [r5, #4]
  4032e6:	68aa      	ldr	r2, [r5, #8]
  4032e8:	68eb      	ldr	r3, [r5, #12]
  4032ea:	6020      	str	r0, [r4, #0]
  4032ec:	6061      	str	r1, [r4, #4]
  4032ee:	60a2      	str	r2, [r4, #8]
  4032f0:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
  4032f2:	6860      	ldr	r0, [r4, #4]
  4032f4:	4b02      	ldr	r3, [pc, #8]	; (403300 <tcp_seg_copy+0x2c>)
  4032f6:	4798      	blx	r3
  return cseg;
}
  4032f8:	4620      	mov	r0, r4
  4032fa:	bd38      	pop	{r3, r4, r5, pc}
  4032fc:	004029b1 	.word	0x004029b1
  403300:	00402e3b 	.word	0x00402e3b

00403304 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  403304:	b100      	cbz	r0, 403308 <tcp_arg+0x4>
    pcb->callback_arg = arg;
  403306:	6101      	str	r1, [r0, #16]
  403308:	4770      	bx	lr

0040330a <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
  40330a:	b108      	cbz	r0, 403310 <tcp_recv+0x6>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    pcb->recv = recv;
  40330c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  403310:	4770      	bx	lr

00403312 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
  403312:	b100      	cbz	r0, 403316 <tcp_sent+0x4>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    pcb->sent = sent;
  403314:	67c1      	str	r1, [r0, #124]	; 0x7c
  403316:	4770      	bx	lr

00403318 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
  403318:	b108      	cbz	r0, 40331e <tcp_err+0x6>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
    pcb->errf = err;
  40331a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  40331e:	4770      	bx	lr

00403320 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  403320:	b118      	cbz	r0, 40332a <tcp_accept+0xa>
  403322:	7d02      	ldrb	r2, [r0, #20]
  403324:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
  403326:	bf08      	it	eq
  403328:	6181      	streq	r1, [r0, #24]
  40332a:	4770      	bx	lr

0040332c <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  40332c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  403330:	7702      	strb	r2, [r0, #28]
  403332:	4770      	bx	lr

00403334 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  403334:	7d03      	ldrb	r3, [r0, #20]
     pcb->state != TIME_WAIT &&
  403336:	2b0a      	cmp	r3, #10
  403338:	d01a      	beq.n	403370 <tcp_pcb_purge+0x3c>
  40333a:	2b01      	cmp	r3, #1
  40333c:	d918      	bls.n	403370 <tcp_pcb_purge+0x3c>
{
  40333e:	b570      	push	{r4, r5, r6, lr}
  403340:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  403342:	6f40      	ldr	r0, [r0, #116]	; 0x74
  403344:	b118      	cbz	r0, 40334e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  403346:	4b0b      	ldr	r3, [pc, #44]	; (403374 <tcp_pcb_purge+0x40>)
  403348:	4798      	blx	r3
      pcb->refused_data = NULL;
  40334a:	2300      	movs	r3, #0
  40334c:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  40334e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  403350:	4e09      	ldr	r6, [pc, #36]	; (403378 <tcp_pcb_purge+0x44>)
  403352:	47b0      	blx	r6
    pcb->ooseq = NULL;
  403354:	2500      	movs	r5, #0
  403356:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  403358:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40335c:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
  40335e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
  403360:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
  403362:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  403364:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
  403366:	66a5      	str	r5, [r4, #104]	; 0x68
  403368:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  40336a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
  40336e:	bd70      	pop	{r4, r5, r6, pc}
  403370:	4770      	bx	lr
  403372:	bf00      	nop
  403374:	00402c19 	.word	0x00402c19
  403378:	004032b5 	.word	0x004032b5

0040337c <tcp_slowtmr>:
{
  40337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403380:	b083      	sub	sp, #12
  ++tcp_ticks;
  403382:	4ab3      	ldr	r2, [pc, #716]	; (403650 <tcp_slowtmr+0x2d4>)
  403384:	6813      	ldr	r3, [r2, #0]
  403386:	3301      	adds	r3, #1
  403388:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  40338a:	4ab2      	ldr	r2, [pc, #712]	; (403654 <tcp_slowtmr+0x2d8>)
  40338c:	7813      	ldrb	r3, [r2, #0]
  40338e:	3301      	adds	r3, #1
  403390:	7013      	strb	r3, [r2, #0]
    if (pcb->last_timer == tcp_timer_ctr) {
  403392:	4615      	mov	r5, r2
        tcp_active_pcbs_changed = 0;
  403394:	4fb0      	ldr	r7, [pc, #704]	; (403658 <tcp_slowtmr+0x2dc>)
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  403396:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 403688 <tcp_slowtmr+0x30c>
  pcb = tcp_active_pcbs;
  40339a:	4bb0      	ldr	r3, [pc, #704]	; (40365c <tcp_slowtmr+0x2e0>)
  40339c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  40339e:	2c00      	cmp	r4, #0
  4033a0:	f000 818b 	beq.w	4036ba <tcp_slowtmr+0x33e>
  4033a4:	2600      	movs	r6, #0
  4033a6:	e003      	b.n	4033b0 <tcp_slowtmr+0x34>
      pcb = pcb->next;
  4033a8:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  4033aa:	2c00      	cmp	r4, #0
  4033ac:	f000 8185 	beq.w	4036ba <tcp_slowtmr+0x33e>
    if (pcb->last_timer == tcp_timer_ctr) {
  4033b0:	782b      	ldrb	r3, [r5, #0]
  4033b2:	7f62      	ldrb	r2, [r4, #29]
  4033b4:	429a      	cmp	r2, r3
  4033b6:	d0f7      	beq.n	4033a8 <tcp_slowtmr+0x2c>
    pcb->last_timer = tcp_timer_ctr;
  4033b8:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  4033ba:	7d22      	ldrb	r2, [r4, #20]
  4033bc:	2a02      	cmp	r2, #2
  4033be:	d019      	beq.n	4033f4 <tcp_slowtmr+0x78>
    else if (pcb->nrtx >= TCP_MAXRTX) {
  4033c0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4033c4:	2b0b      	cmp	r3, #11
  4033c6:	d86b      	bhi.n	4034a0 <tcp_slowtmr+0x124>
      if (pcb->persist_backoff > 0) {
  4033c8:	f894 8095 	ldrb.w	r8, [r4, #149]	; 0x95
  4033cc:	f1b8 0f00 	cmp.w	r8, #0
  4033d0:	d02e      	beq.n	403430 <tcp_slowtmr+0xb4>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  4033d2:	4ba3      	ldr	r3, [pc, #652]	; (403660 <tcp_slowtmr+0x2e4>)
  4033d4:	4498      	add	r8, r3
  4033d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
  4033da:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
  4033de:	429a      	cmp	r2, r3
  4033e0:	d914      	bls.n	40340c <tcp_slowtmr+0x90>
          pcb->persist_cnt++;
  4033e2:	3301      	adds	r3, #1
  4033e4:	b2db      	uxtb	r3, r3
  4033e6:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
  4033ea:	429a      	cmp	r2, r3
  4033ec:	d90e      	bls.n	40340c <tcp_slowtmr+0x90>
    pcb_remove = 0;
  4033ee:	f04f 0800 	mov.w	r8, #0
  4033f2:	e057      	b.n	4034a4 <tcp_slowtmr+0x128>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  4033f4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4033f8:	2b05      	cmp	r3, #5
  4033fa:	f200 80a8 	bhi.w	40354e <tcp_slowtmr+0x1d2>
    else if (pcb->nrtx >= TCP_MAXRTX) {
  4033fe:	2b0b      	cmp	r3, #11
  403400:	d9e2      	bls.n	4033c8 <tcp_slowtmr+0x4c>
    pcb_reset = 0;
  403402:	f04f 0900 	mov.w	r9, #0
    else if (pcb->nrtx >= TCP_MAXRTX) {
  403406:	f04f 0801 	mov.w	r8, #1
  40340a:	e0a7      	b.n	40355c <tcp_slowtmr+0x1e0>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  40340c:	4620      	mov	r0, r4
  40340e:	4b95      	ldr	r3, [pc, #596]	; (403664 <tcp_slowtmr+0x2e8>)
  403410:	4798      	blx	r3
  403412:	2800      	cmp	r0, #0
  403414:	d166      	bne.n	4034e4 <tcp_slowtmr+0x168>
            pcb->persist_cnt = 0;
  403416:	2300      	movs	r3, #0
  403418:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  40341c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403420:	2b06      	cmp	r3, #6
  403422:	d862      	bhi.n	4034ea <tcp_slowtmr+0x16e>
              pcb->persist_backoff++;
  403424:	3301      	adds	r3, #1
  403426:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
  40342a:	f04f 0800 	mov.w	r8, #0
  40342e:	e039      	b.n	4034a4 <tcp_slowtmr+0x128>
        if (pcb->rtime >= 0) {
  403430:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
  403434:	2900      	cmp	r1, #0
  403436:	db01      	blt.n	40343c <tcp_slowtmr+0xc0>
          ++pcb->rtime;
  403438:	3101      	adds	r1, #1
  40343a:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  40343c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  40343e:	b389      	cbz	r1, 4034a4 <tcp_slowtmr+0x128>
  403440:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
  403444:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  403448:	4288      	cmp	r0, r1
  40344a:	db2b      	blt.n	4034a4 <tcp_slowtmr+0x128>
          if (pcb->state != SYN_SENT) {
  40344c:	2a02      	cmp	r2, #2
  40344e:	d00e      	beq.n	40346e <tcp_slowtmr+0xf2>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  403450:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
  403454:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
  403458:	eb02 02e1 	add.w	r2, r2, r1, asr #3
  40345c:	2b0c      	cmp	r3, #12
  40345e:	bf28      	it	cs
  403460:	230c      	movcs	r3, #12
  403462:	4981      	ldr	r1, [pc, #516]	; (403668 <tcp_slowtmr+0x2ec>)
  403464:	5ccb      	ldrb	r3, [r1, r3]
  403466:	fa02 f303 	lsl.w	r3, r2, r3
  40346a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
  40346e:	2300      	movs	r3, #0
  403470:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  403472:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
  403476:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
  40347a:	4293      	cmp	r3, r2
  40347c:	bf28      	it	cs
  40347e:	4613      	movcs	r3, r2
  403480:	085b      	lsrs	r3, r3, #1
  403482:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  403486:	8e61      	ldrh	r1, [r4, #50]	; 0x32
  403488:	004a      	lsls	r2, r1, #1
  40348a:	b292      	uxth	r2, r2
  40348c:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
  40348e:	bf38      	it	cc
  403490:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
  403494:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
  403498:	4620      	mov	r0, r4
  40349a:	4b74      	ldr	r3, [pc, #464]	; (40366c <tcp_slowtmr+0x2f0>)
  40349c:	4798      	blx	r3
  40349e:	e001      	b.n	4034a4 <tcp_slowtmr+0x128>
      ++pcb_remove;
  4034a0:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
  4034a4:	7d23      	ldrb	r3, [r4, #20]
  4034a6:	2b06      	cmp	r3, #6
  4034a8:	d022      	beq.n	4034f0 <tcp_slowtmr+0x174>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  4034aa:	7a22      	ldrb	r2, [r4, #8]
  4034ac:	f012 0f08 	tst.w	r2, #8
  4034b0:	d052      	beq.n	403558 <tcp_slowtmr+0x1dc>
  4034b2:	2b04      	cmp	r3, #4
  4034b4:	d002      	beq.n	4034bc <tcp_slowtmr+0x140>
  4034b6:	2b07      	cmp	r3, #7
  4034b8:	f040 8082 	bne.w	4035c0 <tcp_slowtmr+0x244>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  4034bc:	4b64      	ldr	r3, [pc, #400]	; (403650 <tcp_slowtmr+0x2d4>)
  4034be:	681a      	ldr	r2, [r3, #0]
  4034c0:	6a23      	ldr	r3, [r4, #32]
  4034c2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  4034c4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
  4034c8:	4b69      	ldr	r3, [pc, #420]	; (403670 <tcp_slowtmr+0x2f4>)
  4034ca:	440b      	add	r3, r1
  4034cc:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  4034d0:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  4034d4:	d921      	bls.n	40351a <tcp_slowtmr+0x19e>
        ++pcb_remove;
  4034d6:	f108 0801 	add.w	r8, r8, #1
  4034da:	fa5f f888 	uxtb.w	r8, r8
        ++pcb_reset;
  4034de:	f04f 0901 	mov.w	r9, #1
  4034e2:	e03b      	b.n	40355c <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
  4034e4:	f04f 0800 	mov.w	r8, #0
  4034e8:	e7dc      	b.n	4034a4 <tcp_slowtmr+0x128>
  4034ea:	f04f 0800 	mov.w	r8, #0
  4034ee:	e7d9      	b.n	4034a4 <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
  4034f0:	7ea3      	ldrb	r3, [r4, #26]
  4034f2:	f013 0f10 	tst.w	r3, #16
  4034f6:	d009      	beq.n	40350c <tcp_slowtmr+0x190>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  4034f8:	4b55      	ldr	r3, [pc, #340]	; (403650 <tcp_slowtmr+0x2d4>)
  4034fa:	681b      	ldr	r3, [r3, #0]
  4034fc:	6a22      	ldr	r2, [r4, #32]
  4034fe:	1a9b      	subs	r3, r3, r2
  403500:	2b28      	cmp	r3, #40	; 0x28
  403502:	d903      	bls.n	40350c <tcp_slowtmr+0x190>
          ++pcb_remove;
  403504:	f108 0801 	add.w	r8, r8, #1
  403508:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
  40350c:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40350e:	2800      	cmp	r0, #0
  403510:	f000 80f5 	beq.w	4036fe <tcp_slowtmr+0x382>
    pcb_reset = 0;
  403514:	f04f 0900 	mov.w	r9, #0
  403518:	e022      	b.n	403560 <tcp_slowtmr+0x1e4>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  40351a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  40351e:	4855      	ldr	r0, [pc, #340]	; (403674 <tcp_slowtmr+0x2f8>)
  403520:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
  403524:	fbab 1303 	umull	r1, r3, fp, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  403528:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  40352c:	d802      	bhi.n	403534 <tcp_slowtmr+0x1b8>
    pcb_reset = 0;
  40352e:	f04f 0900 	mov.w	r9, #0
  403532:	e013      	b.n	40355c <tcp_slowtmr+0x1e0>
        err = tcp_keepalive(pcb);
  403534:	4620      	mov	r0, r4
  403536:	4b50      	ldr	r3, [pc, #320]	; (403678 <tcp_slowtmr+0x2fc>)
  403538:	4798      	blx	r3
        if (err == ERR_OK) {
  40353a:	2800      	cmp	r0, #0
  40353c:	d143      	bne.n	4035c6 <tcp_slowtmr+0x24a>
          pcb->keep_cnt_sent++;
  40353e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  403542:	3301      	adds	r3, #1
  403544:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
  403548:	f04f 0900 	mov.w	r9, #0
  40354c:	e006      	b.n	40355c <tcp_slowtmr+0x1e0>
  40354e:	f04f 0900 	mov.w	r9, #0
  403552:	f04f 0801 	mov.w	r8, #1
  403556:	e001      	b.n	40355c <tcp_slowtmr+0x1e0>
  403558:	f04f 0900 	mov.w	r9, #0
    if (pcb->ooseq != NULL &&
  40355c:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40355e:	b150      	cbz	r0, 403576 <tcp_slowtmr+0x1fa>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  403560:	4b3b      	ldr	r3, [pc, #236]	; (403650 <tcp_slowtmr+0x2d4>)
  403562:	681a      	ldr	r2, [r3, #0]
  403564:	6a23      	ldr	r3, [r4, #32]
  403566:	1ad2      	subs	r2, r2, r3
  403568:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
  40356c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
  403570:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  403574:	d22a      	bcs.n	4035cc <tcp_slowtmr+0x250>
    if (pcb->state == SYN_RCVD) {
  403576:	7d23      	ldrb	r3, [r4, #20]
  403578:	2b03      	cmp	r3, #3
  40357a:	d02c      	beq.n	4035d6 <tcp_slowtmr+0x25a>
    if (pcb->state == LAST_ACK) {
  40357c:	2b09      	cmp	r3, #9
  40357e:	d035      	beq.n	4035ec <tcp_slowtmr+0x270>
    if (pcb_remove) {
  403580:	f1b8 0f00 	cmp.w	r8, #0
  403584:	d13d      	bne.n	403602 <tcp_slowtmr+0x286>
      pcb = pcb->next;
  403586:	f8d4 800c 	ldr.w	r8, [r4, #12]
      ++prev->polltmr;
  40358a:	7ee3      	ldrb	r3, [r4, #27]
  40358c:	3301      	adds	r3, #1
  40358e:	b2db      	uxtb	r3, r3
  403590:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
  403592:	7f22      	ldrb	r2, [r4, #28]
  403594:	429a      	cmp	r2, r3
  403596:	f200 808d 	bhi.w	4036b4 <tcp_slowtmr+0x338>
        prev->polltmr = 0;
  40359a:	2300      	movs	r3, #0
  40359c:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
  40359e:	703b      	strb	r3, [r7, #0]
        TCP_EVENT_POLL(prev, err);
  4035a0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  4035a4:	2b00      	cmp	r3, #0
  4035a6:	d07d      	beq.n	4036a4 <tcp_slowtmr+0x328>
  4035a8:	4621      	mov	r1, r4
  4035aa:	6920      	ldr	r0, [r4, #16]
  4035ac:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  4035ae:	783b      	ldrb	r3, [r7, #0]
  4035b0:	2b00      	cmp	r3, #0
  4035b2:	f47f aef2 	bne.w	40339a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
  4035b6:	2800      	cmp	r0, #0
  4035b8:	d074      	beq.n	4036a4 <tcp_slowtmr+0x328>
  4035ba:	4626      	mov	r6, r4
      pcb = pcb->next;
  4035bc:	4644      	mov	r4, r8
  4035be:	e6f4      	b.n	4033aa <tcp_slowtmr+0x2e>
    pcb_reset = 0;
  4035c0:	f04f 0900 	mov.w	r9, #0
  4035c4:	e7ca      	b.n	40355c <tcp_slowtmr+0x1e0>
  4035c6:	f04f 0900 	mov.w	r9, #0
  4035ca:	e7c7      	b.n	40355c <tcp_slowtmr+0x1e0>
      tcp_segs_free(pcb->ooseq);
  4035cc:	4b2b      	ldr	r3, [pc, #172]	; (40367c <tcp_slowtmr+0x300>)
  4035ce:	4798      	blx	r3
      pcb->ooseq = NULL;
  4035d0:	2300      	movs	r3, #0
  4035d2:	6723      	str	r3, [r4, #112]	; 0x70
  4035d4:	e7cf      	b.n	403576 <tcp_slowtmr+0x1fa>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  4035d6:	4b1e      	ldr	r3, [pc, #120]	; (403650 <tcp_slowtmr+0x2d4>)
  4035d8:	681b      	ldr	r3, [r3, #0]
  4035da:	6a22      	ldr	r2, [r4, #32]
  4035dc:	1a9b      	subs	r3, r3, r2
  4035de:	2b28      	cmp	r3, #40	; 0x28
  4035e0:	d9ce      	bls.n	403580 <tcp_slowtmr+0x204>
        ++pcb_remove;
  4035e2:	f108 0801 	add.w	r8, r8, #1
  4035e6:	fa5f f888 	uxtb.w	r8, r8
  4035ea:	e7c9      	b.n	403580 <tcp_slowtmr+0x204>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  4035ec:	4b18      	ldr	r3, [pc, #96]	; (403650 <tcp_slowtmr+0x2d4>)
  4035ee:	681b      	ldr	r3, [r3, #0]
  4035f0:	6a22      	ldr	r2, [r4, #32]
  4035f2:	1a9b      	subs	r3, r3, r2
  4035f4:	2bf0      	cmp	r3, #240	; 0xf0
  4035f6:	d9c3      	bls.n	403580 <tcp_slowtmr+0x204>
        ++pcb_remove;
  4035f8:	f108 0801 	add.w	r8, r8, #1
  4035fc:	fa5f f888 	uxtb.w	r8, r8
  403600:	e7be      	b.n	403580 <tcp_slowtmr+0x204>
      tcp_err_fn err_fn = pcb->errf;
  403602:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
  403606:	4620      	mov	r0, r4
  403608:	4b1d      	ldr	r3, [pc, #116]	; (403680 <tcp_slowtmr+0x304>)
  40360a:	4798      	blx	r3
      if (prev != NULL) {
  40360c:	b1de      	cbz	r6, 403646 <tcp_slowtmr+0x2ca>
        prev->next = pcb->next;
  40360e:	68e3      	ldr	r3, [r4, #12]
  403610:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
  403612:	f1b9 0f00 	cmp.w	r9, #0
  403616:	d139      	bne.n	40368c <tcp_slowtmr+0x310>
      err_arg = pcb->callback_arg;
  403618:	f8d4 a010 	ldr.w	sl, [r4, #16]
      pcb = pcb->next;
  40361c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  403620:	4621      	mov	r1, r4
  403622:	2001      	movs	r0, #1
  403624:	4b17      	ldr	r3, [pc, #92]	; (403684 <tcp_slowtmr+0x308>)
  403626:	4798      	blx	r3
      tcp_active_pcbs_changed = 0;
  403628:	2300      	movs	r3, #0
  40362a:	703b      	strb	r3, [r7, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  40362c:	f1b8 0f00 	cmp.w	r8, #0
  403630:	d03e      	beq.n	4036b0 <tcp_slowtmr+0x334>
  403632:	f06f 010c 	mvn.w	r1, #12
  403636:	4650      	mov	r0, sl
  403638:	47c0      	blx	r8
      if (tcp_active_pcbs_changed) {
  40363a:	783b      	ldrb	r3, [r7, #0]
  40363c:	2b00      	cmp	r3, #0
  40363e:	f47f aeac 	bne.w	40339a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
  403642:	464c      	mov	r4, r9
  403644:	e6b1      	b.n	4033aa <tcp_slowtmr+0x2e>
        tcp_active_pcbs = pcb->next;
  403646:	68e3      	ldr	r3, [r4, #12]
  403648:	4a04      	ldr	r2, [pc, #16]	; (40365c <tcp_slowtmr+0x2e0>)
  40364a:	6013      	str	r3, [r2, #0]
  40364c:	e7e1      	b.n	403612 <tcp_slowtmr+0x296>
  40364e:	bf00      	nop
  403650:	20404984 	.word	0x20404984
  403654:	20400bae 	.word	0x20400bae
  403658:	2040497c 	.word	0x2040497c
  40365c:	20404980 	.word	0x20404980
  403660:	0040a488 	.word	0x0040a488
  403664:	00405e3d 	.word	0x00405e3d
  403668:	0040a468 	.word	0x0040a468
  40366c:	00405cb5 	.word	0x00405cb5
  403670:	000a4cb8 	.word	0x000a4cb8
  403674:	000124f8 	.word	0x000124f8
  403678:	00405dad 	.word	0x00405dad
  40367c:	004032b5 	.word	0x004032b5
  403680:	00403335 	.word	0x00403335
  403684:	004029d1 	.word	0x004029d1
  403688:	10624dd3 	.word	0x10624dd3
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  40368c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40368e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  403690:	8b23      	ldrh	r3, [r4, #24]
  403692:	9301      	str	r3, [sp, #4]
  403694:	8ae3      	ldrh	r3, [r4, #22]
  403696:	9300      	str	r3, [sp, #0]
  403698:	1d23      	adds	r3, r4, #4
  40369a:	4622      	mov	r2, r4
  40369c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 40371c <tcp_slowtmr+0x3a0>
  4036a0:	47c8      	blx	r9
  4036a2:	e7b9      	b.n	403618 <tcp_slowtmr+0x29c>
          tcp_output(prev);
  4036a4:	4620      	mov	r0, r4
  4036a6:	4b19      	ldr	r3, [pc, #100]	; (40370c <tcp_slowtmr+0x390>)
  4036a8:	4798      	blx	r3
  4036aa:	4626      	mov	r6, r4
      pcb = pcb->next;
  4036ac:	4644      	mov	r4, r8
  4036ae:	e67c      	b.n	4033aa <tcp_slowtmr+0x2e>
      pcb = pcb->next;
  4036b0:	464c      	mov	r4, r9
  4036b2:	e67a      	b.n	4033aa <tcp_slowtmr+0x2e>
  4036b4:	4626      	mov	r6, r4
      pcb = pcb->next;
  4036b6:	4644      	mov	r4, r8
  4036b8:	e677      	b.n	4033aa <tcp_slowtmr+0x2e>
  pcb = tcp_tw_pcbs;
  4036ba:	4b15      	ldr	r3, [pc, #84]	; (403710 <tcp_slowtmr+0x394>)
  4036bc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  4036be:	b30c      	cbz	r4, 403704 <tcp_slowtmr+0x388>
  4036c0:	2500      	movs	r5, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  4036c2:	4e14      	ldr	r6, [pc, #80]	; (403714 <tcp_slowtmr+0x398>)
      tcp_pcb_purge(pcb);
  4036c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 403720 <tcp_slowtmr+0x3a4>
      memp_free(MEMP_TCP_PCB, pcb2);
  4036c8:	4f13      	ldr	r7, [pc, #76]	; (403718 <tcp_slowtmr+0x39c>)
  4036ca:	e006      	b.n	4036da <tcp_slowtmr+0x35e>
        tcp_tw_pcbs = pcb->next;
  4036cc:	68e2      	ldr	r2, [r4, #12]
  4036ce:	4b10      	ldr	r3, [pc, #64]	; (403710 <tcp_slowtmr+0x394>)
  4036d0:	601a      	str	r2, [r3, #0]
  4036d2:	e00d      	b.n	4036f0 <tcp_slowtmr+0x374>
      pcb = pcb->next;
  4036d4:	4625      	mov	r5, r4
  4036d6:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  4036d8:	b1a4      	cbz	r4, 403704 <tcp_slowtmr+0x388>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  4036da:	6a22      	ldr	r2, [r4, #32]
  4036dc:	6833      	ldr	r3, [r6, #0]
  4036de:	1a9b      	subs	r3, r3, r2
    if (pcb_remove) {
  4036e0:	2bf0      	cmp	r3, #240	; 0xf0
  4036e2:	d9f7      	bls.n	4036d4 <tcp_slowtmr+0x358>
      tcp_pcb_purge(pcb);
  4036e4:	4620      	mov	r0, r4
  4036e6:	47c0      	blx	r8
      if (prev != NULL) {
  4036e8:	2d00      	cmp	r5, #0
  4036ea:	d0ef      	beq.n	4036cc <tcp_slowtmr+0x350>
        prev->next = pcb->next;
  4036ec:	68e3      	ldr	r3, [r4, #12]
  4036ee:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
  4036f0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  4036f4:	4621      	mov	r1, r4
  4036f6:	2001      	movs	r0, #1
  4036f8:	47b8      	blx	r7
      pcb = pcb->next;
  4036fa:	464c      	mov	r4, r9
  4036fc:	e7ec      	b.n	4036d8 <tcp_slowtmr+0x35c>
    pcb_reset = 0;
  4036fe:	f04f 0900 	mov.w	r9, #0
  403702:	e73d      	b.n	403580 <tcp_slowtmr+0x204>
}
  403704:	b003      	add	sp, #12
  403706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40370a:	bf00      	nop
  40370c:	004058f5 	.word	0x004058f5
  403710:	20404990 	.word	0x20404990
  403714:	20404984 	.word	0x20404984
  403718:	004029d1 	.word	0x004029d1
  40371c:	00405bfd 	.word	0x00405bfd
  403720:	00403335 	.word	0x00403335

00403724 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  403724:	b510      	push	{r4, lr}
  403726:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
  403728:	6802      	ldr	r2, [r0, #0]
  40372a:	428a      	cmp	r2, r1
  40372c:	d009      	beq.n	403742 <tcp_pcb_remove+0x1e>
  40372e:	b172      	cbz	r2, 40374e <tcp_pcb_remove+0x2a>
  403730:	68d3      	ldr	r3, [r2, #12]
  403732:	4299      	cmp	r1, r3
  403734:	d008      	beq.n	403748 <tcp_pcb_remove+0x24>
  403736:	b153      	cbz	r3, 40374e <tcp_pcb_remove+0x2a>
  403738:	68da      	ldr	r2, [r3, #12]
  40373a:	4294      	cmp	r4, r2
  40373c:	d005      	beq.n	40374a <tcp_pcb_remove+0x26>
  40373e:	4613      	mov	r3, r2
  403740:	e7f9      	b.n	403736 <tcp_pcb_remove+0x12>
  403742:	68d3      	ldr	r3, [r2, #12]
  403744:	6003      	str	r3, [r0, #0]
  403746:	e002      	b.n	40374e <tcp_pcb_remove+0x2a>
  403748:	4613      	mov	r3, r2
  40374a:	68e2      	ldr	r2, [r4, #12]
  40374c:	60da      	str	r2, [r3, #12]
  40374e:	2300      	movs	r3, #0
  403750:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
  403752:	4620      	mov	r0, r4
  403754:	4b0a      	ldr	r3, [pc, #40]	; (403780 <tcp_pcb_remove+0x5c>)
  403756:	4798      	blx	r3

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  403758:	7d23      	ldrb	r3, [r4, #20]
  40375a:	2b0a      	cmp	r3, #10
  40375c:	d005      	beq.n	40376a <tcp_pcb_remove+0x46>
  40375e:	2b01      	cmp	r3, #1
  403760:	d003      	beq.n	40376a <tcp_pcb_remove+0x46>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  403762:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
  403764:	f013 0f01 	tst.w	r3, #1
  403768:	d103      	bne.n	403772 <tcp_pcb_remove+0x4e>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  40376a:	2300      	movs	r3, #0
  40376c:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  40376e:	82e3      	strh	r3, [r4, #22]
  403770:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
  403772:	f043 0302 	orr.w	r3, r3, #2
  403776:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
  403778:	4620      	mov	r0, r4
  40377a:	4b02      	ldr	r3, [pc, #8]	; (403784 <tcp_pcb_remove+0x60>)
  40377c:	4798      	blx	r3
  40377e:	e7f4      	b.n	40376a <tcp_pcb_remove+0x46>
  403780:	00403335 	.word	0x00403335
  403784:	004058f5 	.word	0x004058f5

00403788 <tcp_close_shutdown>:
{
  403788:	b530      	push	{r4, r5, lr}
  40378a:	b083      	sub	sp, #12
  40378c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  40378e:	b121      	cbz	r1, 40379a <tcp_close_shutdown+0x12>
  403790:	7d03      	ldrb	r3, [r0, #20]
  403792:	2b04      	cmp	r3, #4
  403794:	d00d      	beq.n	4037b2 <tcp_close_shutdown+0x2a>
  403796:	2b07      	cmp	r3, #7
  403798:	d00b      	beq.n	4037b2 <tcp_close_shutdown+0x2a>
  switch (pcb->state) {
  40379a:	7d23      	ldrb	r3, [r4, #20]
  40379c:	2b01      	cmp	r3, #1
  40379e:	d070      	beq.n	403882 <tcp_close_shutdown+0xfa>
  4037a0:	2b00      	cmp	r3, #0
  4037a2:	d04f      	beq.n	403844 <tcp_close_shutdown+0xbc>
  4037a4:	2b02      	cmp	r3, #2
  4037a6:	f000 8087 	beq.w	4038b8 <tcp_close_shutdown+0x130>
    return tcp_close_shutdown_fin(pcb);
  4037aa:	4620      	mov	r0, r4
  4037ac:	4b48      	ldr	r3, [pc, #288]	; (4038d0 <tcp_close_shutdown+0x148>)
  4037ae:	4798      	blx	r3
  4037b0:	e065      	b.n	40387e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  4037b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4037b4:	b1d3      	cbz	r3, 4037ec <tcp_close_shutdown+0x64>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  4037b6:	8b23      	ldrh	r3, [r4, #24]
  4037b8:	9301      	str	r3, [sp, #4]
  4037ba:	8ae3      	ldrh	r3, [r4, #22]
  4037bc:	9300      	str	r3, [sp, #0]
  4037be:	1d23      	adds	r3, r4, #4
  4037c0:	4622      	mov	r2, r4
  4037c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4037c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  4037c6:	4d43      	ldr	r5, [pc, #268]	; (4038d4 <tcp_close_shutdown+0x14c>)
  4037c8:	47a8      	blx	r5
      tcp_pcb_purge(pcb);
  4037ca:	4620      	mov	r0, r4
  4037cc:	4b42      	ldr	r3, [pc, #264]	; (4038d8 <tcp_close_shutdown+0x150>)
  4037ce:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4037d0:	4b42      	ldr	r3, [pc, #264]	; (4038dc <tcp_close_shutdown+0x154>)
  4037d2:	681a      	ldr	r2, [r3, #0]
  4037d4:	4294      	cmp	r4, r2
  4037d6:	d00f      	beq.n	4037f8 <tcp_close_shutdown+0x70>
  4037d8:	b1a2      	cbz	r2, 403804 <tcp_close_shutdown+0x7c>
  4037da:	68d3      	ldr	r3, [r2, #12]
  4037dc:	429c      	cmp	r4, r3
  4037de:	d00e      	beq.n	4037fe <tcp_close_shutdown+0x76>
  4037e0:	b183      	cbz	r3, 403804 <tcp_close_shutdown+0x7c>
  4037e2:	68da      	ldr	r2, [r3, #12]
  4037e4:	4294      	cmp	r4, r2
  4037e6:	d00b      	beq.n	403800 <tcp_close_shutdown+0x78>
  4037e8:	4613      	mov	r3, r2
  4037ea:	e7f9      	b.n	4037e0 <tcp_close_shutdown+0x58>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  4037ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  4037ee:	f640 3368 	movw	r3, #2920	; 0xb68
  4037f2:	429a      	cmp	r2, r3
  4037f4:	d1df      	bne.n	4037b6 <tcp_close_shutdown+0x2e>
  4037f6:	e7d0      	b.n	40379a <tcp_close_shutdown+0x12>
      TCP_RMV_ACTIVE(pcb);
  4037f8:	68d2      	ldr	r2, [r2, #12]
  4037fa:	601a      	str	r2, [r3, #0]
  4037fc:	e002      	b.n	403804 <tcp_close_shutdown+0x7c>
  4037fe:	4613      	mov	r3, r2
  403800:	68e2      	ldr	r2, [r4, #12]
  403802:	60da      	str	r2, [r3, #12]
  403804:	2300      	movs	r3, #0
  403806:	60e3      	str	r3, [r4, #12]
  403808:	2201      	movs	r2, #1
  40380a:	4b35      	ldr	r3, [pc, #212]	; (4038e0 <tcp_close_shutdown+0x158>)
  40380c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  40380e:	7d23      	ldrb	r3, [r4, #20]
  403810:	2b04      	cmp	r3, #4
  403812:	d009      	beq.n	403828 <tcp_close_shutdown+0xa0>
        if (tcp_input_pcb == pcb) {
  403814:	4b33      	ldr	r3, [pc, #204]	; (4038e4 <tcp_close_shutdown+0x15c>)
  403816:	681b      	ldr	r3, [r3, #0]
  403818:	429c      	cmp	r4, r3
  40381a:	d00f      	beq.n	40383c <tcp_close_shutdown+0xb4>
          memp_free(MEMP_TCP_PCB, pcb);
  40381c:	4621      	mov	r1, r4
  40381e:	2001      	movs	r0, #1
  403820:	4b31      	ldr	r3, [pc, #196]	; (4038e8 <tcp_close_shutdown+0x160>)
  403822:	4798      	blx	r3
      return ERR_OK;
  403824:	2000      	movs	r0, #0
  403826:	e02a      	b.n	40387e <tcp_close_shutdown+0xf6>
        pcb->state = TIME_WAIT;
  403828:	230a      	movs	r3, #10
  40382a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  40382c:	4b2f      	ldr	r3, [pc, #188]	; (4038ec <tcp_close_shutdown+0x164>)
  40382e:	681a      	ldr	r2, [r3, #0]
  403830:	60e2      	str	r2, [r4, #12]
  403832:	601c      	str	r4, [r3, #0]
  403834:	4b2e      	ldr	r3, [pc, #184]	; (4038f0 <tcp_close_shutdown+0x168>)
  403836:	4798      	blx	r3
      return ERR_OK;
  403838:	2000      	movs	r0, #0
  40383a:	e020      	b.n	40387e <tcp_close_shutdown+0xf6>
          tcp_trigger_input_pcb_close();
  40383c:	4b2d      	ldr	r3, [pc, #180]	; (4038f4 <tcp_close_shutdown+0x16c>)
  40383e:	4798      	blx	r3
      return ERR_OK;
  403840:	2000      	movs	r0, #0
  403842:	e01c      	b.n	40387e <tcp_close_shutdown+0xf6>
    if (pcb->local_port != 0) {
  403844:	8ae3      	ldrh	r3, [r4, #22]
  403846:	b1ab      	cbz	r3, 403874 <tcp_close_shutdown+0xec>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  403848:	4b2b      	ldr	r3, [pc, #172]	; (4038f8 <tcp_close_shutdown+0x170>)
  40384a:	681a      	ldr	r2, [r3, #0]
  40384c:	4294      	cmp	r4, r2
  40384e:	d009      	beq.n	403864 <tcp_close_shutdown+0xdc>
  403850:	b172      	cbz	r2, 403870 <tcp_close_shutdown+0xe8>
  403852:	68d3      	ldr	r3, [r2, #12]
  403854:	429c      	cmp	r4, r3
  403856:	d008      	beq.n	40386a <tcp_close_shutdown+0xe2>
  403858:	b153      	cbz	r3, 403870 <tcp_close_shutdown+0xe8>
  40385a:	68da      	ldr	r2, [r3, #12]
  40385c:	4294      	cmp	r4, r2
  40385e:	d005      	beq.n	40386c <tcp_close_shutdown+0xe4>
  403860:	4613      	mov	r3, r2
  403862:	e7f9      	b.n	403858 <tcp_close_shutdown+0xd0>
  403864:	68d2      	ldr	r2, [r2, #12]
  403866:	601a      	str	r2, [r3, #0]
  403868:	e002      	b.n	403870 <tcp_close_shutdown+0xe8>
  40386a:	4613      	mov	r3, r2
  40386c:	68e2      	ldr	r2, [r4, #12]
  40386e:	60da      	str	r2, [r3, #12]
  403870:	2300      	movs	r3, #0
  403872:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
  403874:	4621      	mov	r1, r4
  403876:	2001      	movs	r0, #1
  403878:	4b1b      	ldr	r3, [pc, #108]	; (4038e8 <tcp_close_shutdown+0x160>)
  40387a:	4798      	blx	r3
  return ERR_OK;
  40387c:	2000      	movs	r0, #0
}
  40387e:	b003      	add	sp, #12
  403880:	bd30      	pop	{r4, r5, pc}
  403882:	481e      	ldr	r0, [pc, #120]	; (4038fc <tcp_close_shutdown+0x174>)
  403884:	1d01      	adds	r1, r0, #4
  403886:	3010      	adds	r0, #16
         pcb->listener = NULL;
  403888:	2500      	movs	r5, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  40388a:	f851 3b04 	ldr.w	r3, [r1], #4
  40388e:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  403890:	b133      	cbz	r3, 4038a0 <tcp_close_shutdown+0x118>
      if (pcb->listener == lpcb) {
  403892:	6f9a      	ldr	r2, [r3, #120]	; 0x78
  403894:	4294      	cmp	r4, r2
         pcb->listener = NULL;
  403896:	bf08      	it	eq
  403898:	679d      	streq	r5, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  40389a:	68db      	ldr	r3, [r3, #12]
  40389c:	2b00      	cmp	r3, #0
  40389e:	d1f8      	bne.n	403892 <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  4038a0:	4281      	cmp	r1, r0
  4038a2:	d1f2      	bne.n	40388a <tcp_close_shutdown+0x102>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  4038a4:	4621      	mov	r1, r4
  4038a6:	4816      	ldr	r0, [pc, #88]	; (403900 <tcp_close_shutdown+0x178>)
  4038a8:	4b16      	ldr	r3, [pc, #88]	; (403904 <tcp_close_shutdown+0x17c>)
  4038aa:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  4038ac:	4621      	mov	r1, r4
  4038ae:	2002      	movs	r0, #2
  4038b0:	4b0d      	ldr	r3, [pc, #52]	; (4038e8 <tcp_close_shutdown+0x160>)
  4038b2:	4798      	blx	r3
  return ERR_OK;
  4038b4:	2000      	movs	r0, #0
    break;
  4038b6:	e7e2      	b.n	40387e <tcp_close_shutdown+0xf6>
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4038b8:	4621      	mov	r1, r4
  4038ba:	4808      	ldr	r0, [pc, #32]	; (4038dc <tcp_close_shutdown+0x154>)
  4038bc:	4b11      	ldr	r3, [pc, #68]	; (403904 <tcp_close_shutdown+0x17c>)
  4038be:	4798      	blx	r3
  4038c0:	2001      	movs	r0, #1
  4038c2:	4b07      	ldr	r3, [pc, #28]	; (4038e0 <tcp_close_shutdown+0x158>)
  4038c4:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  4038c6:	4621      	mov	r1, r4
  4038c8:	4b07      	ldr	r3, [pc, #28]	; (4038e8 <tcp_close_shutdown+0x160>)
  4038ca:	4798      	blx	r3
  return ERR_OK;
  4038cc:	2000      	movs	r0, #0
    break;
  4038ce:	e7d6      	b.n	40387e <tcp_close_shutdown+0xf6>
  4038d0:	00403029 	.word	0x00403029
  4038d4:	00405bfd 	.word	0x00405bfd
  4038d8:	00403335 	.word	0x00403335
  4038dc:	20404980 	.word	0x20404980
  4038e0:	2040497c 	.word	0x2040497c
  4038e4:	20404994 	.word	0x20404994
  4038e8:	004029d1 	.word	0x004029d1
  4038ec:	20404990 	.word	0x20404990
  4038f0:	00406009 	.word	0x00406009
  4038f4:	004052d9 	.word	0x004052d9
  4038f8:	2040498c 	.word	0x2040498c
  4038fc:	0040a478 	.word	0x0040a478
  403900:	20404988 	.word	0x20404988
  403904:	00403725 	.word	0x00403725

00403908 <tcp_close>:
{
  403908:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
  40390a:	7d03      	ldrb	r3, [r0, #20]
  40390c:	2b01      	cmp	r3, #1
  40390e:	d003      	beq.n	403918 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
  403910:	7e83      	ldrb	r3, [r0, #26]
  403912:	f043 0310 	orr.w	r3, r3, #16
  403916:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
  403918:	2101      	movs	r1, #1
  40391a:	4b01      	ldr	r3, [pc, #4]	; (403920 <tcp_close+0x18>)
  40391c:	4798      	blx	r3
}
  40391e:	bd08      	pop	{r3, pc}
  403920:	00403789 	.word	0x00403789

00403924 <tcp_recv_null>:
{
  403924:	b510      	push	{r4, lr}
  403926:	4608      	mov	r0, r1
  if (p != NULL) {
  403928:	b142      	cbz	r2, 40393c <tcp_recv_null+0x18>
  40392a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
  40392c:	8911      	ldrh	r1, [r2, #8]
  40392e:	4b06      	ldr	r3, [pc, #24]	; (403948 <tcp_recv_null+0x24>)
  403930:	4798      	blx	r3
    pbuf_free(p);
  403932:	4620      	mov	r0, r4
  403934:	4b05      	ldr	r3, [pc, #20]	; (40394c <tcp_recv_null+0x28>)
  403936:	4798      	blx	r3
  return ERR_OK;
  403938:	2000      	movs	r0, #0
  40393a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
  40393c:	b10b      	cbz	r3, 403942 <tcp_recv_null+0x1e>
  return ERR_OK;
  40393e:	2000      	movs	r0, #0
}
  403940:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
  403942:	4b03      	ldr	r3, [pc, #12]	; (403950 <tcp_recv_null+0x2c>)
  403944:	4798      	blx	r3
  403946:	bd10      	pop	{r4, pc}
  403948:	0040323d 	.word	0x0040323d
  40394c:	00402c19 	.word	0x00402c19
  403950:	00403909 	.word	0x00403909

00403954 <tcp_process_refused_data>:
{
  403954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403956:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
  403958:	6f46      	ldr	r6, [r0, #116]	; 0x74
  40395a:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
  40395c:	2300      	movs	r3, #0
  40395e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  403960:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
  403964:	b1e5      	cbz	r5, 4039a0 <tcp_process_refused_data+0x4c>
  403966:	4632      	mov	r2, r6
  403968:	4601      	mov	r1, r0
  40396a:	6900      	ldr	r0, [r0, #16]
  40396c:	47a8      	blx	r5
  40396e:	4605      	mov	r5, r0
    if (err == ERR_OK) {
  403970:	b9f5      	cbnz	r5, 4039b0 <tcp_process_refused_data+0x5c>
      if (refused_flags & PBUF_FLAG_TCP_FIN
  403972:	f017 0f20 	tst.w	r7, #32
  403976:	d021      	beq.n	4039bc <tcp_process_refused_data+0x68>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  403978:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  40397a:	f640 3268 	movw	r2, #2920	; 0xb68
  40397e:	4293      	cmp	r3, r2
  403980:	d001      	beq.n	403986 <tcp_process_refused_data+0x32>
          pcb->rcv_wnd++;
  403982:	3301      	adds	r3, #1
  403984:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
  403986:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  40398a:	b1be      	cbz	r6, 4039bc <tcp_process_refused_data+0x68>
  40398c:	2300      	movs	r3, #0
  40398e:	461a      	mov	r2, r3
  403990:	4621      	mov	r1, r4
  403992:	6920      	ldr	r0, [r4, #16]
  403994:	47b0      	blx	r6
          return ERR_ABRT;
  403996:	f110 0f0d 	cmn.w	r0, #13
  40399a:	bf08      	it	eq
  40399c:	4605      	moveq	r5, r0
  40399e:	e00d      	b.n	4039bc <tcp_process_refused_data+0x68>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4039a0:	2300      	movs	r3, #0
  4039a2:	4632      	mov	r2, r6
  4039a4:	4601      	mov	r1, r0
  4039a6:	4618      	mov	r0, r3
  4039a8:	4d05      	ldr	r5, [pc, #20]	; (4039c0 <tcp_process_refused_data+0x6c>)
  4039aa:	47a8      	blx	r5
  4039ac:	4605      	mov	r5, r0
  4039ae:	e7df      	b.n	403970 <tcp_process_refused_data+0x1c>
    } else if (err == ERR_ABRT) {
  4039b0:	f115 0f0d 	cmn.w	r5, #13
  4039b4:	d002      	beq.n	4039bc <tcp_process_refused_data+0x68>
      pcb->refused_data = refused_data;
  4039b6:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
  4039b8:	f06f 0504 	mvn.w	r5, #4
}
  4039bc:	4628      	mov	r0, r5
  4039be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039c0:	00403925 	.word	0x00403925

004039c4 <tcp_fasttmr>:
{
  4039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
  4039c8:	4a1f      	ldr	r2, [pc, #124]	; (403a48 <tcp_fasttmr+0x84>)
  4039ca:	7813      	ldrb	r3, [r2, #0]
  4039cc:	3301      	adds	r3, #1
  4039ce:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
  4039d0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403a5c <tcp_fasttmr+0x98>
    if (pcb->last_timer != tcp_timer_ctr) {
  4039d4:	4616      	mov	r6, r2
        tcp_active_pcbs_changed = 0;
  4039d6:	4d1d      	ldr	r5, [pc, #116]	; (403a4c <tcp_fasttmr+0x88>)
        tcp_process_refused_data(pcb);
  4039d8:	4f1d      	ldr	r7, [pc, #116]	; (403a50 <tcp_fasttmr+0x8c>)
  pcb = tcp_active_pcbs;
  4039da:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
  4039de:	b9b4      	cbnz	r4, 403a0e <tcp_fasttmr+0x4a>
  4039e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tcp_ack_now(pcb);
  4039e4:	f043 0302 	orr.w	r3, r3, #2
  4039e8:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
  4039ea:	4620      	mov	r0, r4
  4039ec:	4b19      	ldr	r3, [pc, #100]	; (403a54 <tcp_fasttmr+0x90>)
  4039ee:	4798      	blx	r3
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  4039f0:	7ea3      	ldrb	r3, [r4, #26]
  4039f2:	f023 0303 	bic.w	r3, r3, #3
  4039f6:	76a3      	strb	r3, [r4, #26]
  4039f8:	e012      	b.n	403a20 <tcp_fasttmr+0x5c>
        pcb->flags &= ~(TF_CLOSEPEND);
  4039fa:	f023 0308 	bic.w	r3, r3, #8
  4039fe:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
  403a00:	4620      	mov	r0, r4
  403a02:	4b15      	ldr	r3, [pc, #84]	; (403a58 <tcp_fasttmr+0x94>)
  403a04:	4798      	blx	r3
  403a06:	e00f      	b.n	403a28 <tcp_fasttmr+0x64>
      pcb = pcb->next;
  403a08:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  403a0a:	2c00      	cmp	r4, #0
  403a0c:	d0e8      	beq.n	4039e0 <tcp_fasttmr+0x1c>
    if (pcb->last_timer != tcp_timer_ctr) {
  403a0e:	7833      	ldrb	r3, [r6, #0]
  403a10:	7f62      	ldrb	r2, [r4, #29]
  403a12:	429a      	cmp	r2, r3
  403a14:	d0f8      	beq.n	403a08 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
  403a16:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
  403a18:	7ea3      	ldrb	r3, [r4, #26]
  403a1a:	f013 0f01 	tst.w	r3, #1
  403a1e:	d1e1      	bne.n	4039e4 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
  403a20:	7ea3      	ldrb	r3, [r4, #26]
  403a22:	f013 0f08 	tst.w	r3, #8
  403a26:	d1e8      	bne.n	4039fa <tcp_fasttmr+0x36>
      next = pcb->next;
  403a28:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
  403a2c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403a2e:	b143      	cbz	r3, 403a42 <tcp_fasttmr+0x7e>
        tcp_active_pcbs_changed = 0;
  403a30:	2300      	movs	r3, #0
  403a32:	702b      	strb	r3, [r5, #0]
        tcp_process_refused_data(pcb);
  403a34:	4620      	mov	r0, r4
  403a36:	47b8      	blx	r7
        if (tcp_active_pcbs_changed) {
  403a38:	782b      	ldrb	r3, [r5, #0]
  403a3a:	2b00      	cmp	r3, #0
  403a3c:	d1cd      	bne.n	4039da <tcp_fasttmr+0x16>
      pcb = next;
  403a3e:	464c      	mov	r4, r9
  403a40:	e7e3      	b.n	403a0a <tcp_fasttmr+0x46>
  403a42:	464c      	mov	r4, r9
  403a44:	e7e1      	b.n	403a0a <tcp_fasttmr+0x46>
  403a46:	bf00      	nop
  403a48:	20400bae 	.word	0x20400bae
  403a4c:	2040497c 	.word	0x2040497c
  403a50:	00403955 	.word	0x00403955
  403a54:	004058f5 	.word	0x004058f5
  403a58:	00403029 	.word	0x00403029
  403a5c:	20404980 	.word	0x20404980

00403a60 <tcp_tmr>:
{
  403a60:	b508      	push	{r3, lr}
  tcp_fasttmr();
  403a62:	4b07      	ldr	r3, [pc, #28]	; (403a80 <tcp_tmr+0x20>)
  403a64:	4798      	blx	r3
  if (++tcp_timer & 1) {
  403a66:	4a07      	ldr	r2, [pc, #28]	; (403a84 <tcp_tmr+0x24>)
  403a68:	7813      	ldrb	r3, [r2, #0]
  403a6a:	3301      	adds	r3, #1
  403a6c:	b2db      	uxtb	r3, r3
  403a6e:	7013      	strb	r3, [r2, #0]
  403a70:	f013 0f01 	tst.w	r3, #1
  403a74:	d100      	bne.n	403a78 <tcp_tmr+0x18>
  403a76:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
  403a78:	4b03      	ldr	r3, [pc, #12]	; (403a88 <tcp_tmr+0x28>)
  403a7a:	4798      	blx	r3
}
  403a7c:	e7fb      	b.n	403a76 <tcp_tmr+0x16>
  403a7e:	bf00      	nop
  403a80:	004039c5 	.word	0x004039c5
  403a84:	20400bad 	.word	0x20400bad
  403a88:	0040337d 	.word	0x0040337d

00403a8c <tcp_abandon>:
{
  403a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a90:	b082      	sub	sp, #8
  403a92:	4604      	mov	r4, r0
  if (pcb->state == TIME_WAIT) {
  403a94:	7d03      	ldrb	r3, [r0, #20]
  403a96:	2b0a      	cmp	r3, #10
  403a98:	d01c      	beq.n	403ad4 <tcp_abandon+0x48>
  403a9a:	460d      	mov	r5, r1
    seqno = pcb->snd_nxt;
  403a9c:	f8d0 804c 	ldr.w	r8, [r0, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
  403aa0:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    errf = pcb->errf;
  403aa4:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
  403aa8:	6907      	ldr	r7, [r0, #16]
    if (pcb->state == CLOSED) {
  403aaa:	2b00      	cmp	r3, #0
  403aac:	d13d      	bne.n	403b2a <tcp_abandon+0x9e>
      if (pcb->local_port != 0) {
  403aae:	f8b0 a016 	ldrh.w	sl, [r0, #22]
  403ab2:	f1ba 0f00 	cmp.w	sl, #0
  403ab6:	d042      	beq.n	403b3e <tcp_abandon+0xb2>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  403ab8:	4b27      	ldr	r3, [pc, #156]	; (403b58 <tcp_abandon+0xcc>)
  403aba:	681a      	ldr	r2, [r3, #0]
  403abc:	4290      	cmp	r0, r2
  403abe:	d012      	beq.n	403ae6 <tcp_abandon+0x5a>
  403ac0:	b1ba      	cbz	r2, 403af2 <tcp_abandon+0x66>
  403ac2:	68d3      	ldr	r3, [r2, #12]
  403ac4:	4298      	cmp	r0, r3
  403ac6:	d011      	beq.n	403aec <tcp_abandon+0x60>
  403ac8:	b19b      	cbz	r3, 403af2 <tcp_abandon+0x66>
  403aca:	68da      	ldr	r2, [r3, #12]
  403acc:	4294      	cmp	r4, r2
  403ace:	d00e      	beq.n	403aee <tcp_abandon+0x62>
  403ad0:	4613      	mov	r3, r2
  403ad2:	e7f9      	b.n	403ac8 <tcp_abandon+0x3c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  403ad4:	4601      	mov	r1, r0
  403ad6:	4821      	ldr	r0, [pc, #132]	; (403b5c <tcp_abandon+0xd0>)
  403ad8:	4b21      	ldr	r3, [pc, #132]	; (403b60 <tcp_abandon+0xd4>)
  403ada:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  403adc:	4621      	mov	r1, r4
  403ade:	2001      	movs	r0, #1
  403ae0:	4b20      	ldr	r3, [pc, #128]	; (403b64 <tcp_abandon+0xd8>)
  403ae2:	4798      	blx	r3
  403ae4:	e01e      	b.n	403b24 <tcp_abandon+0x98>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  403ae6:	68d2      	ldr	r2, [r2, #12]
  403ae8:	601a      	str	r2, [r3, #0]
  403aea:	e002      	b.n	403af2 <tcp_abandon+0x66>
  403aec:	4613      	mov	r3, r2
  403aee:	68e2      	ldr	r2, [r4, #12]
  403af0:	60da      	str	r2, [r3, #12]
  403af2:	2500      	movs	r5, #0
  403af4:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
  403af6:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
  403af8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  403afa:	b108      	cbz	r0, 403b00 <tcp_abandon+0x74>
      tcp_segs_free(pcb->unacked);
  403afc:	4b1a      	ldr	r3, [pc, #104]	; (403b68 <tcp_abandon+0xdc>)
  403afe:	4798      	blx	r3
    if (pcb->unsent != NULL) {
  403b00:	6ea0      	ldr	r0, [r4, #104]	; 0x68
  403b02:	b108      	cbz	r0, 403b08 <tcp_abandon+0x7c>
      tcp_segs_free(pcb->unsent);
  403b04:	4b18      	ldr	r3, [pc, #96]	; (403b68 <tcp_abandon+0xdc>)
  403b06:	4798      	blx	r3
    if (pcb->ooseq != NULL) {
  403b08:	6f20      	ldr	r0, [r4, #112]	; 0x70
  403b0a:	b108      	cbz	r0, 403b10 <tcp_abandon+0x84>
      tcp_segs_free(pcb->ooseq);
  403b0c:	4b16      	ldr	r3, [pc, #88]	; (403b68 <tcp_abandon+0xdc>)
  403b0e:	4798      	blx	r3
    if (send_rst) {
  403b10:	b9bd      	cbnz	r5, 403b42 <tcp_abandon+0xb6>
    memp_free(MEMP_TCP_PCB, pcb);
  403b12:	4621      	mov	r1, r4
  403b14:	2001      	movs	r0, #1
  403b16:	4b13      	ldr	r3, [pc, #76]	; (403b64 <tcp_abandon+0xd8>)
  403b18:	4798      	blx	r3
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  403b1a:	b11e      	cbz	r6, 403b24 <tcp_abandon+0x98>
  403b1c:	f06f 010c 	mvn.w	r1, #12
  403b20:	4638      	mov	r0, r7
  403b22:	47b0      	blx	r6
}
  403b24:	b002      	add	sp, #8
  403b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
  403b2a:	f8b0 a016 	ldrh.w	sl, [r0, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  403b2e:	4601      	mov	r1, r0
  403b30:	480e      	ldr	r0, [pc, #56]	; (403b6c <tcp_abandon+0xe0>)
  403b32:	4b0b      	ldr	r3, [pc, #44]	; (403b60 <tcp_abandon+0xd4>)
  403b34:	4798      	blx	r3
  403b36:	2201      	movs	r2, #1
  403b38:	4b0d      	ldr	r3, [pc, #52]	; (403b70 <tcp_abandon+0xe4>)
  403b3a:	701a      	strb	r2, [r3, #0]
  403b3c:	e7dc      	b.n	403af8 <tcp_abandon+0x6c>
    int send_rst = 0;
  403b3e:	2500      	movs	r5, #0
  403b40:	e7da      	b.n	403af8 <tcp_abandon+0x6c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  403b42:	8b23      	ldrh	r3, [r4, #24]
  403b44:	9301      	str	r3, [sp, #4]
  403b46:	f8cd a000 	str.w	sl, [sp]
  403b4a:	1d23      	adds	r3, r4, #4
  403b4c:	4622      	mov	r2, r4
  403b4e:	4649      	mov	r1, r9
  403b50:	4640      	mov	r0, r8
  403b52:	4d08      	ldr	r5, [pc, #32]	; (403b74 <tcp_abandon+0xe8>)
  403b54:	47a8      	blx	r5
  403b56:	e7dc      	b.n	403b12 <tcp_abandon+0x86>
  403b58:	2040498c 	.word	0x2040498c
  403b5c:	20404990 	.word	0x20404990
  403b60:	00403725 	.word	0x00403725
  403b64:	004029d1 	.word	0x004029d1
  403b68:	004032b5 	.word	0x004032b5
  403b6c:	20404980 	.word	0x20404980
  403b70:	2040497c 	.word	0x2040497c
  403b74:	00405bfd 	.word	0x00405bfd

00403b78 <tcp_abort>:
{
  403b78:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
  403b7a:	2101      	movs	r1, #1
  403b7c:	4b01      	ldr	r3, [pc, #4]	; (403b84 <tcp_abort+0xc>)
  403b7e:	4798      	blx	r3
  403b80:	bd08      	pop	{r3, pc}
  403b82:	bf00      	nop
  403b84:	00403a8d 	.word	0x00403a8d

00403b88 <tcp_accept_null>:
{
  403b88:	b508      	push	{r3, lr}
  tcp_abort(pcb);
  403b8a:	4608      	mov	r0, r1
  403b8c:	4b02      	ldr	r3, [pc, #8]	; (403b98 <tcp_accept_null+0x10>)
  403b8e:	4798      	blx	r3
}
  403b90:	f06f 000c 	mvn.w	r0, #12
  403b94:	bd08      	pop	{r3, pc}
  403b96:	bf00      	nop
  403b98:	00403b79 	.word	0x00403b79

00403b9c <tcp_netif_ip_addr_changed_pcblist>:
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
  403b9c:	b179      	cbz	r1, 403bbe <tcp_netif_ip_addr_changed_pcblist+0x22>
{
  403b9e:	b570      	push	{r4, r5, r6, lr}
  403ba0:	4604      	mov	r4, r0
  403ba2:	4608      	mov	r0, r1
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  403ba4:	4e06      	ldr	r6, [pc, #24]	; (403bc0 <tcp_netif_ip_addr_changed_pcblist+0x24>)
  403ba6:	e003      	b.n	403bb0 <tcp_netif_ip_addr_changed_pcblist+0x14>
      struct tcp_pcb *next = pcb->next;
  403ba8:	68c5      	ldr	r5, [r0, #12]
      tcp_abort(pcb);
  403baa:	47b0      	blx	r6
      pcb = next;
  403bac:	4628      	mov	r0, r5
  while (pcb != NULL) {
  403bae:	b128      	cbz	r0, 403bbc <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  403bb0:	6802      	ldr	r2, [r0, #0]
  403bb2:	6823      	ldr	r3, [r4, #0]
  403bb4:	429a      	cmp	r2, r3
  403bb6:	d0f7      	beq.n	403ba8 <tcp_netif_ip_addr_changed_pcblist+0xc>
    } else {
      pcb = pcb->next;
  403bb8:	68c0      	ldr	r0, [r0, #12]
  403bba:	e7f8      	b.n	403bae <tcp_netif_ip_addr_changed_pcblist+0x12>
  403bbc:	bd70      	pop	{r4, r5, r6, pc}
  403bbe:	4770      	bx	lr
  403bc0:	00403b79 	.word	0x00403b79

00403bc4 <tcp_kill_state>:
{
  403bc4:	b538      	push	{r3, r4, r5, lr}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403bc6:	4b0d      	ldr	r3, [pc, #52]	; (403bfc <tcp_kill_state+0x38>)
  403bc8:	681b      	ldr	r3, [r3, #0]
  403bca:	b1ab      	cbz	r3, 403bf8 <tcp_kill_state+0x34>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403bcc:	4a0c      	ldr	r2, [pc, #48]	; (403c00 <tcp_kill_state+0x3c>)
  403bce:	6815      	ldr	r5, [r2, #0]
  403bd0:	2100      	movs	r1, #0
  403bd2:	460c      	mov	r4, r1
  403bd4:	e001      	b.n	403bda <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403bd6:	68db      	ldr	r3, [r3, #12]
  403bd8:	b14b      	cbz	r3, 403bee <tcp_kill_state+0x2a>
    if (pcb->state == state) {
  403bda:	7d1a      	ldrb	r2, [r3, #20]
  403bdc:	4282      	cmp	r2, r0
  403bde:	d1fa      	bne.n	403bd6 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403be0:	6a1a      	ldr	r2, [r3, #32]
  403be2:	1aaa      	subs	r2, r5, r2
  403be4:	428a      	cmp	r2, r1
  403be6:	d3f6      	bcc.n	403bd6 <tcp_kill_state+0x12>
        inactivity = tcp_ticks - pcb->tmr;
  403be8:	4611      	mov	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403bea:	461c      	mov	r4, r3
  403bec:	e7f3      	b.n	403bd6 <tcp_kill_state+0x12>
  if (inactive != NULL) {
  403bee:	b11c      	cbz	r4, 403bf8 <tcp_kill_state+0x34>
    tcp_abandon(inactive, 0);
  403bf0:	2100      	movs	r1, #0
  403bf2:	4620      	mov	r0, r4
  403bf4:	4b03      	ldr	r3, [pc, #12]	; (403c04 <tcp_kill_state+0x40>)
  403bf6:	4798      	blx	r3
  403bf8:	bd38      	pop	{r3, r4, r5, pc}
  403bfa:	bf00      	nop
  403bfc:	20404980 	.word	0x20404980
  403c00:	20404984 	.word	0x20404984
  403c04:	00403a8d 	.word	0x00403a8d

00403c08 <tcp_alloc>:
{
  403c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c0a:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403c0c:	2001      	movs	r0, #1
  403c0e:	4b3f      	ldr	r3, [pc, #252]	; (403d0c <tcp_alloc+0x104>)
  403c10:	4798      	blx	r3
  if (pcb == NULL) {
  403c12:	4604      	mov	r4, r0
  403c14:	b350      	cbz	r0, 403c6c <tcp_alloc+0x64>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  403c16:	2298      	movs	r2, #152	; 0x98
  403c18:	2100      	movs	r1, #0
  403c1a:	4620      	mov	r0, r4
  403c1c:	4b3c      	ldr	r3, [pc, #240]	; (403d10 <tcp_alloc+0x108>)
  403c1e:	4798      	blx	r3
    pcb->prio = prio;
  403c20:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
  403c22:	f640 3368 	movw	r3, #2920	; 0xb68
  403c26:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  403c2a:	8563      	strh	r3, [r4, #42]	; 0x2a
  403c2c:	8523      	strh	r3, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
  403c2e:	22ff      	movs	r2, #255	; 0xff
  403c30:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
  403c32:	f44f 7206 	mov.w	r2, #536	; 0x218
  403c36:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  403c38:	2206      	movs	r2, #6
  403c3a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  403c3e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
  403c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403c44:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
  403c46:	2201      	movs	r2, #1
  403c48:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
  403c4c:	4a31      	ldr	r2, [pc, #196]	; (403d14 <tcp_alloc+0x10c>)
  403c4e:	6812      	ldr	r2, [r2, #0]
  403c50:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
  403c52:	4a31      	ldr	r2, [pc, #196]	; (403d18 <tcp_alloc+0x110>)
  403c54:	7812      	ldrb	r2, [r2, #0]
  403c56:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
  403c58:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
  403c5c:	4b2f      	ldr	r3, [pc, #188]	; (403d1c <tcp_alloc+0x114>)
  403c5e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  403c62:	4b2f      	ldr	r3, [pc, #188]	; (403d20 <tcp_alloc+0x118>)
  403c64:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
  403c68:	4620      	mov	r0, r4
  403c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403c6c:	4b2d      	ldr	r3, [pc, #180]	; (403d24 <tcp_alloc+0x11c>)
  403c6e:	681b      	ldr	r3, [r3, #0]
  403c70:	b183      	cbz	r3, 403c94 <tcp_alloc+0x8c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403c72:	4a28      	ldr	r2, [pc, #160]	; (403d14 <tcp_alloc+0x10c>)
  403c74:	6810      	ldr	r0, [r2, #0]
  403c76:	2100      	movs	r1, #0
  403c78:	e001      	b.n	403c7e <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403c7a:	68db      	ldr	r3, [r3, #12]
  403c7c:	b133      	cbz	r3, 403c8c <tcp_alloc+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403c7e:	6a1a      	ldr	r2, [r3, #32]
  403c80:	1a82      	subs	r2, r0, r2
  403c82:	428a      	cmp	r2, r1
  403c84:	d3f9      	bcc.n	403c7a <tcp_alloc+0x72>
      inactivity = tcp_ticks - pcb->tmr;
  403c86:	4611      	mov	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403c88:	461c      	mov	r4, r3
  403c8a:	e7f6      	b.n	403c7a <tcp_alloc+0x72>
  if (inactive != NULL) {
  403c8c:	b114      	cbz	r4, 403c94 <tcp_alloc+0x8c>
    tcp_abort(inactive);
  403c8e:	4620      	mov	r0, r4
  403c90:	4b25      	ldr	r3, [pc, #148]	; (403d28 <tcp_alloc+0x120>)
  403c92:	4798      	blx	r3
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403c94:	2001      	movs	r0, #1
  403c96:	4b1d      	ldr	r3, [pc, #116]	; (403d0c <tcp_alloc+0x104>)
  403c98:	4798      	blx	r3
    if (pcb == NULL) {
  403c9a:	4604      	mov	r4, r0
  403c9c:	2800      	cmp	r0, #0
  403c9e:	d1ba      	bne.n	403c16 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
  403ca0:	2009      	movs	r0, #9
  403ca2:	4b22      	ldr	r3, [pc, #136]	; (403d2c <tcp_alloc+0x124>)
  403ca4:	4798      	blx	r3
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403ca6:	2001      	movs	r0, #1
  403ca8:	4b18      	ldr	r3, [pc, #96]	; (403d0c <tcp_alloc+0x104>)
  403caa:	4798      	blx	r3
      if (pcb == NULL) {
  403cac:	4604      	mov	r4, r0
  403cae:	2800      	cmp	r0, #0
  403cb0:	d1b1      	bne.n	403c16 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
  403cb2:	2008      	movs	r0, #8
  403cb4:	4b1d      	ldr	r3, [pc, #116]	; (403d2c <tcp_alloc+0x124>)
  403cb6:	4798      	blx	r3
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403cb8:	2001      	movs	r0, #1
  403cba:	4b14      	ldr	r3, [pc, #80]	; (403d0c <tcp_alloc+0x104>)
  403cbc:	4798      	blx	r3
        if (pcb == NULL) {
  403cbe:	4604      	mov	r4, r0
  403cc0:	2800      	cmp	r0, #0
  403cc2:	d1a8      	bne.n	403c16 <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  403cc4:	b26b      	sxtb	r3, r5
  403cc6:	2b00      	cmp	r3, #0
  403cc8:	bfac      	ite	ge
  403cca:	4628      	movge	r0, r5
  403ccc:	207f      	movlt	r0, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403cce:	4b18      	ldr	r3, [pc, #96]	; (403d30 <tcp_alloc+0x128>)
  403cd0:	681b      	ldr	r3, [r3, #0]
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403cd2:	4a10      	ldr	r2, [pc, #64]	; (403d14 <tcp_alloc+0x10c>)
  403cd4:	6817      	ldr	r7, [r2, #0]
  inactivity = 0;
  403cd6:	2100      	movs	r1, #0
  403cd8:	e000      	b.n	403cdc <tcp_alloc+0xd4>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403cda:	68db      	ldr	r3, [r3, #12]
  403cdc:	b153      	cbz	r3, 403cf4 <tcp_alloc+0xec>
    if (pcb->prio <= mprio &&
  403cde:	7d5e      	ldrb	r6, [r3, #21]
  403ce0:	4286      	cmp	r6, r0
  403ce2:	d8fa      	bhi.n	403cda <tcp_alloc+0xd2>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403ce4:	6a1a      	ldr	r2, [r3, #32]
  403ce6:	1aba      	subs	r2, r7, r2
    if (pcb->prio <= mprio &&
  403ce8:	428a      	cmp	r2, r1
  403cea:	d3f6      	bcc.n	403cda <tcp_alloc+0xd2>
      mprio = pcb->prio;
  403cec:	4630      	mov	r0, r6
      inactivity = tcp_ticks - pcb->tmr;
  403cee:	4611      	mov	r1, r2
      inactive = pcb;
  403cf0:	461c      	mov	r4, r3
  403cf2:	e7f2      	b.n	403cda <tcp_alloc+0xd2>
  if (inactive != NULL) {
  403cf4:	b114      	cbz	r4, 403cfc <tcp_alloc+0xf4>
    tcp_abort(inactive);
  403cf6:	4620      	mov	r0, r4
  403cf8:	4b0b      	ldr	r3, [pc, #44]	; (403d28 <tcp_alloc+0x120>)
  403cfa:	4798      	blx	r3
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403cfc:	2001      	movs	r0, #1
  403cfe:	4b03      	ldr	r3, [pc, #12]	; (403d0c <tcp_alloc+0x104>)
  403d00:	4798      	blx	r3
  if (pcb != NULL) {
  403d02:	4604      	mov	r4, r0
  403d04:	2800      	cmp	r0, #0
  403d06:	d0af      	beq.n	403c68 <tcp_alloc+0x60>
  403d08:	e785      	b.n	403c16 <tcp_alloc+0xe>
  403d0a:	bf00      	nop
  403d0c:	004029b1 	.word	0x004029b1
  403d10:	004070f5 	.word	0x004070f5
  403d14:	20404984 	.word	0x20404984
  403d18:	20400bae 	.word	0x20400bae
  403d1c:	00403925 	.word	0x00403925
  403d20:	006ddd00 	.word	0x006ddd00
  403d24:	20404990 	.word	0x20404990
  403d28:	00403b79 	.word	0x00403b79
  403d2c:	00403bc5 	.word	0x00403bc5
  403d30:	20404980 	.word	0x20404980

00403d34 <tcp_new>:
{
  403d34:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
  403d36:	2040      	movs	r0, #64	; 0x40
  403d38:	4b01      	ldr	r3, [pc, #4]	; (403d40 <tcp_new+0xc>)
  403d3a:	4798      	blx	r3
}
  403d3c:	bd08      	pop	{r3, pc}
  403d3e:	bf00      	nop
  403d40:	00403c09 	.word	0x00403c09

00403d44 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
  403d44:	4b03      	ldr	r3, [pc, #12]	; (403d54 <tcp_next_iss+0x10>)
  403d46:	6818      	ldr	r0, [r3, #0]
  403d48:	4a03      	ldr	r2, [pc, #12]	; (403d58 <tcp_next_iss+0x14>)
  403d4a:	6812      	ldr	r2, [r2, #0]
  403d4c:	4410      	add	r0, r2
  403d4e:	6018      	str	r0, [r3, #0]
}
  403d50:	4770      	bx	lr
  403d52:	bf00      	nop
  403d54:	20400008 	.word	0x20400008
  403d58:	20404984 	.word	0x20404984

00403d5c <tcp_eff_send_mss_impl>:
{
  403d5c:	b510      	push	{r4, lr}
  403d5e:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
  403d60:	4608      	mov	r0, r1
  403d62:	4b07      	ldr	r3, [pc, #28]	; (403d80 <tcp_eff_send_mss_impl+0x24>)
  403d64:	4798      	blx	r3
    if (outif == NULL) {
  403d66:	b138      	cbz	r0, 403d78 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
  403d68:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
  if (mtu != 0) {
  403d6a:	b138      	cbz	r0, 403d7c <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  403d6c:	3828      	subs	r0, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
  403d6e:	b280      	uxth	r0, r0
  403d70:	42a0      	cmp	r0, r4
  403d72:	bf28      	it	cs
  403d74:	4620      	movcs	r0, r4
  403d76:	bd10      	pop	{r4, pc}
      return sendmss;
  403d78:	4620      	mov	r0, r4
  403d7a:	bd10      	pop	{r4, pc}
  403d7c:	4620      	mov	r0, r4
}
  403d7e:	bd10      	pop	{r4, pc}
  403d80:	00401b5d 	.word	0x00401b5d

00403d84 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  403d84:	b308      	cbz	r0, 403dca <tcp_netif_ip_addr_changed+0x46>
{
  403d86:	b570      	push	{r4, r5, r6, lr}
  403d88:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
  403d8a:	6803      	ldr	r3, [r0, #0]
  403d8c:	b903      	cbnz	r3, 403d90 <tcp_netif_ip_addr_changed+0xc>
  403d8e:	bd70      	pop	{r4, r5, r6, pc}
  403d90:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  403d92:	4b0e      	ldr	r3, [pc, #56]	; (403dcc <tcp_netif_ip_addr_changed+0x48>)
  403d94:	6819      	ldr	r1, [r3, #0]
  403d96:	4d0e      	ldr	r5, [pc, #56]	; (403dd0 <tcp_netif_ip_addr_changed+0x4c>)
  403d98:	47a8      	blx	r5
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  403d9a:	4b0e      	ldr	r3, [pc, #56]	; (403dd4 <tcp_netif_ip_addr_changed+0x50>)
  403d9c:	6819      	ldr	r1, [r3, #0]
  403d9e:	4620      	mov	r0, r4
  403da0:	47a8      	blx	r5

    if (!ip_addr_isany(new_addr)) {
  403da2:	2e00      	cmp	r6, #0
  403da4:	d0f3      	beq.n	403d8e <tcp_netif_ip_addr_changed+0xa>
  403da6:	6833      	ldr	r3, [r6, #0]
  403da8:	2b00      	cmp	r3, #0
  403daa:	d0f0      	beq.n	403d8e <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  403dac:	4b0a      	ldr	r3, [pc, #40]	; (403dd8 <tcp_netif_ip_addr_changed+0x54>)
  403dae:	681b      	ldr	r3, [r3, #0]
  403db0:	b91b      	cbnz	r3, 403dba <tcp_netif_ip_addr_changed+0x36>
  403db2:	e7ec      	b.n	403d8e <tcp_netif_ip_addr_changed+0xa>
  403db4:	4613      	mov	r3, r2
  403db6:	2a00      	cmp	r2, #0
  403db8:	d0e9      	beq.n	403d8e <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
  403dba:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  403dbc:	681d      	ldr	r5, [r3, #0]
  403dbe:	6820      	ldr	r0, [r4, #0]
  403dc0:	4285      	cmp	r5, r0
  403dc2:	d1f7      	bne.n	403db4 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  403dc4:	6831      	ldr	r1, [r6, #0]
  403dc6:	6019      	str	r1, [r3, #0]
  403dc8:	e7f4      	b.n	403db4 <tcp_netif_ip_addr_changed+0x30>
  403dca:	4770      	bx	lr
  403dcc:	20404980 	.word	0x20404980
  403dd0:	00403b9d 	.word	0x00403b9d
  403dd4:	2040498c 	.word	0x2040498c
  403dd8:	20404988 	.word	0x20404988

00403ddc <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  403ddc:	4b0d      	ldr	r3, [pc, #52]	; (403e14 <tcp_getoptbyte+0x38>)
  403dde:	681a      	ldr	r2, [r3, #0]
  403de0:	b17a      	cbz	r2, 403e02 <tcp_getoptbyte+0x26>
  403de2:	4b0d      	ldr	r3, [pc, #52]	; (403e18 <tcp_getoptbyte+0x3c>)
  403de4:	881b      	ldrh	r3, [r3, #0]
  403de6:	490d      	ldr	r1, [pc, #52]	; (403e1c <tcp_getoptbyte+0x40>)
  403de8:	8809      	ldrh	r1, [r1, #0]
  403dea:	428b      	cmp	r3, r1
  403dec:	d309      	bcc.n	403e02 <tcp_getoptbyte+0x26>
{
  403dee:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  403df0:	1c5c      	adds	r4, r3, #1
  403df2:	4809      	ldr	r0, [pc, #36]	; (403e18 <tcp_getoptbyte+0x3c>)
  403df4:	8004      	strh	r4, [r0, #0]
  403df6:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
  403df8:	b2db      	uxtb	r3, r3
  403dfa:	5cd0      	ldrb	r0, [r2, r3]
  }
}
  403dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  403e00:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  403e02:	4b07      	ldr	r3, [pc, #28]	; (403e20 <tcp_getoptbyte+0x44>)
  403e04:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
  403e06:	4904      	ldr	r1, [pc, #16]	; (403e18 <tcp_getoptbyte+0x3c>)
  403e08:	880a      	ldrh	r2, [r1, #0]
  403e0a:	1c50      	adds	r0, r2, #1
  403e0c:	8008      	strh	r0, [r1, #0]
  403e0e:	4413      	add	r3, r2
  403e10:	7d18      	ldrb	r0, [r3, #20]
  403e12:	4770      	bx	lr
  403e14:	20400be4 	.word	0x20400be4
  403e18:	20400bd8 	.word	0x20400bd8
  403e1c:	20400be0 	.word	0x20400be0
  403e20:	20400bdc 	.word	0x20400bdc

00403e24 <tcp_parseopt>:
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  403e24:	4b1f      	ldr	r3, [pc, #124]	; (403ea4 <tcp_parseopt+0x80>)
  403e26:	881b      	ldrh	r3, [r3, #0]
  403e28:	2b00      	cmp	r3, #0
  403e2a:	d039      	beq.n	403ea0 <tcp_parseopt+0x7c>
{
  403e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e30:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  403e32:	2200      	movs	r2, #0
  403e34:	4b1c      	ldr	r3, [pc, #112]	; (403ea8 <tcp_parseopt+0x84>)
  403e36:	801a      	strh	r2, [r3, #0]
  403e38:	4e1a      	ldr	r6, [pc, #104]	; (403ea4 <tcp_parseopt+0x80>)
      u8_t opt = tcp_getoptbyte();
  403e3a:	4d1c      	ldr	r5, [pc, #112]	; (403eac <tcp_parseopt+0x88>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  403e3c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 403ea8 <tcp_parseopt+0x84>
  403e40:	8834      	ldrh	r4, [r6, #0]
  403e42:	f8b8 3000 	ldrh.w	r3, [r8]
  403e46:	42a3      	cmp	r3, r4
  403e48:	d228      	bcs.n	403e9c <tcp_parseopt+0x78>
      u8_t opt = tcp_getoptbyte();
  403e4a:	47a8      	blx	r5
      switch (opt) {
  403e4c:	2801      	cmp	r0, #1
  403e4e:	d0f7      	beq.n	403e40 <tcp_parseopt+0x1c>
  403e50:	b320      	cbz	r0, 403e9c <tcp_parseopt+0x78>
  403e52:	2802      	cmp	r0, #2
  403e54:	d119      	bne.n	403e8a <tcp_parseopt+0x66>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  403e56:	47a8      	blx	r5
  403e58:	2804      	cmp	r0, #4
  403e5a:	d11f      	bne.n	403e9c <tcp_parseopt+0x78>
  403e5c:	4b12      	ldr	r3, [pc, #72]	; (403ea8 <tcp_parseopt+0x84>)
  403e5e:	881b      	ldrh	r3, [r3, #0]
  403e60:	3302      	adds	r3, #2
  403e62:	42a3      	cmp	r3, r4
  403e64:	dc1a      	bgt.n	403e9c <tcp_parseopt+0x78>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  403e66:	47a8      	blx	r5
  403e68:	0204      	lsls	r4, r0, #8
  403e6a:	b2a4      	uxth	r4, r4
        mss |= tcp_getoptbyte();
  403e6c:	47a8      	blx	r5
  403e6e:	ea44 0300 	orr.w	r3, r4, r0
  403e72:	b29b      	uxth	r3, r3
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  403e74:	1e5a      	subs	r2, r3, #1
  403e76:	b292      	uxth	r2, r2
  403e78:	f240 51b4 	movw	r1, #1460	; 0x5b4
  403e7c:	f240 50b3 	movw	r0, #1459	; 0x5b3
  403e80:	4282      	cmp	r2, r0
  403e82:	bf88      	it	hi
  403e84:	460b      	movhi	r3, r1
  403e86:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
  403e88:	e7d8      	b.n	403e3c <tcp_parseopt+0x18>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  403e8a:	47a8      	blx	r5
        if (data < 2) {
  403e8c:	2801      	cmp	r0, #1
  403e8e:	d905      	bls.n	403e9c <tcp_parseopt+0x78>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  403e90:	4a05      	ldr	r2, [pc, #20]	; (403ea8 <tcp_parseopt+0x84>)
  403e92:	8813      	ldrh	r3, [r2, #0]
  403e94:	3b02      	subs	r3, #2
  403e96:	4418      	add	r0, r3
  403e98:	8010      	strh	r0, [r2, #0]
  403e9a:	e7cf      	b.n	403e3c <tcp_parseopt+0x18>
  403e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ea0:	4770      	bx	lr
  403ea2:	bf00      	nop
  403ea4:	20400be8 	.word	0x20400be8
  403ea8:	20400bd8 	.word	0x20400bd8
  403eac:	00403ddd 	.word	0x00403ddd

00403eb0 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
  403eb0:	4b0e      	ldr	r3, [pc, #56]	; (403eec <tcp_input_delayed_close+0x3c>)
  403eb2:	781b      	ldrb	r3, [r3, #0]
  403eb4:	f013 0f10 	tst.w	r3, #16
  403eb8:	d016      	beq.n	403ee8 <tcp_input_delayed_close+0x38>
{
  403eba:	b510      	push	{r4, lr}
  403ebc:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
  403ebe:	7e83      	ldrb	r3, [r0, #26]
  403ec0:	f013 0f10 	tst.w	r3, #16
  403ec4:	d106      	bne.n	403ed4 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  403ec6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  403eca:	b11b      	cbz	r3, 403ed4 <tcp_input_delayed_close+0x24>
  403ecc:	f06f 010e 	mvn.w	r1, #14
  403ed0:	6900      	ldr	r0, [r0, #16]
  403ed2:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
  403ed4:	4621      	mov	r1, r4
  403ed6:	4806      	ldr	r0, [pc, #24]	; (403ef0 <tcp_input_delayed_close+0x40>)
  403ed8:	4b06      	ldr	r3, [pc, #24]	; (403ef4 <tcp_input_delayed_close+0x44>)
  403eda:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  403edc:	4621      	mov	r1, r4
  403ede:	2001      	movs	r0, #1
  403ee0:	4b05      	ldr	r3, [pc, #20]	; (403ef8 <tcp_input_delayed_close+0x48>)
  403ee2:	4798      	blx	r3
    return 1;
  403ee4:	2001      	movs	r0, #1
  403ee6:	bd10      	pop	{r4, pc}
  return 0;
  403ee8:	2000      	movs	r0, #0
  403eea:	4770      	bx	lr
  403eec:	20400bd0 	.word	0x20400bd0
  403ef0:	20404980 	.word	0x20404980
  403ef4:	00403725 	.word	0x00403725
  403ef8:	004029d1 	.word	0x004029d1

00403efc <tcp_oos_insert_segment>:
{
  403efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f00:	4605      	mov	r5, r0
  403f02:	4689      	mov	r9, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  403f04:	68c3      	ldr	r3, [r0, #12]
  403f06:	8998      	ldrh	r0, [r3, #12]
  403f08:	4b29      	ldr	r3, [pc, #164]	; (403fb0 <tcp_oos_insert_segment+0xb4>)
  403f0a:	4798      	blx	r3
  403f0c:	f010 0f01 	tst.w	r0, #1
  403f10:	d127      	bne.n	403f62 <tcp_oos_insert_segment+0x66>
    while (next &&
  403f12:	f1b9 0f00 	cmp.w	r9, #0
  403f16:	d049      	beq.n	403fac <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  403f18:	f8d9 200c 	ldr.w	r2, [r9, #12]
  403f1c:	892b      	ldrh	r3, [r5, #8]
  403f1e:	6851      	ldr	r1, [r2, #4]
  403f20:	1a5b      	subs	r3, r3, r1
  403f22:	4924      	ldr	r1, [pc, #144]	; (403fb4 <tcp_oos_insert_segment+0xb8>)
  403f24:	6809      	ldr	r1, [r1, #0]
  403f26:	440b      	add	r3, r1
  403f28:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  403f2c:	1a5b      	subs	r3, r3, r1
    while (next &&
  403f2e:	2b00      	cmp	r3, #0
  403f30:	db04      	blt.n	403f3c <tcp_oos_insert_segment+0x40>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403f32:	4e1f      	ldr	r6, [pc, #124]	; (403fb0 <tcp_oos_insert_segment+0xb4>)
      tcp_seg_free(old_seg);
  403f34:	4f20      	ldr	r7, [pc, #128]	; (403fb8 <tcp_oos_insert_segment+0xbc>)
           TCP_SEQ_GEQ((seqno + cseg->len),
  403f36:	f8df 807c 	ldr.w	r8, [pc, #124]	; 403fb4 <tcp_oos_insert_segment+0xb8>
  403f3a:	e028      	b.n	403f8e <tcp_oos_insert_segment+0x92>
    while (next &&
  403f3c:	464c      	mov	r4, r9
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  403f3e:	4b1d      	ldr	r3, [pc, #116]	; (403fb4 <tcp_oos_insert_segment+0xb8>)
  403f40:	6819      	ldr	r1, [r3, #0]
  403f42:	68e3      	ldr	r3, [r4, #12]
  403f44:	685a      	ldr	r2, [r3, #4]
  403f46:	892b      	ldrh	r3, [r5, #8]
  403f48:	440b      	add	r3, r1
  403f4a:	1a9b      	subs	r3, r3, r2
    if (next &&
  403f4c:	2b00      	cmp	r3, #0
  403f4e:	dd05      	ble.n	403f5c <tcp_oos_insert_segment+0x60>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  403f50:	1a52      	subs	r2, r2, r1
  403f52:	b291      	uxth	r1, r2
  403f54:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
  403f56:	6868      	ldr	r0, [r5, #4]
  403f58:	4b18      	ldr	r3, [pc, #96]	; (403fbc <tcp_oos_insert_segment+0xc0>)
  403f5a:	4798      	blx	r3
  cseg->next = next;
  403f5c:	602c      	str	r4, [r5, #0]
}
  403f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tcp_segs_free(next);
  403f62:	4648      	mov	r0, r9
  403f64:	4b16      	ldr	r3, [pc, #88]	; (403fc0 <tcp_oos_insert_segment+0xc4>)
  403f66:	4798      	blx	r3
    next = NULL;
  403f68:	2400      	movs	r4, #0
  403f6a:	e7f7      	b.n	403f5c <tcp_oos_insert_segment+0x60>
      next = next->next;
  403f6c:	f8d9 4000 	ldr.w	r4, [r9]
      tcp_seg_free(old_seg);
  403f70:	4648      	mov	r0, r9
  403f72:	47b8      	blx	r7
    while (next &&
  403f74:	b1d4      	cbz	r4, 403fac <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  403f76:	68e2      	ldr	r2, [r4, #12]
  403f78:	892b      	ldrh	r3, [r5, #8]
  403f7a:	f8d8 1000 	ldr.w	r1, [r8]
  403f7e:	440b      	add	r3, r1
  403f80:	6851      	ldr	r1, [r2, #4]
  403f82:	1a5b      	subs	r3, r3, r1
  403f84:	8921      	ldrh	r1, [r4, #8]
  403f86:	1a5b      	subs	r3, r3, r1
    while (next &&
  403f88:	2b00      	cmp	r3, #0
  403f8a:	dbd8      	blt.n	403f3e <tcp_oos_insert_segment+0x42>
      next = next->next;
  403f8c:	46a1      	mov	r9, r4
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403f8e:	8990      	ldrh	r0, [r2, #12]
  403f90:	47b0      	blx	r6
  403f92:	f010 0f01 	tst.w	r0, #1
  403f96:	d0e9      	beq.n	403f6c <tcp_oos_insert_segment+0x70>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  403f98:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  403f9c:	f8ba 400c 	ldrh.w	r4, [sl, #12]
  403fa0:	2001      	movs	r0, #1
  403fa2:	47b0      	blx	r6
  403fa4:	4320      	orrs	r0, r4
  403fa6:	f8aa 000c 	strh.w	r0, [sl, #12]
  403faa:	e7df      	b.n	403f6c <tcp_oos_insert_segment+0x70>
    next = NULL;
  403fac:	2400      	movs	r4, #0
  403fae:	e7d5      	b.n	403f5c <tcp_oos_insert_segment+0x60>
  403fb0:	00401059 	.word	0x00401059
  403fb4:	20400bd4 	.word	0x20400bd4
  403fb8:	00403291 	.word	0x00403291
  403fbc:	00402dc5 	.word	0x00402dc5
  403fc0:	004032b5 	.word	0x004032b5

00403fc4 <tcp_receive>:
{
  403fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403fc8:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
  403fca:	4b98      	ldr	r3, [pc, #608]	; (40422c <tcp_receive+0x268>)
  403fcc:	781b      	ldrb	r3, [r3, #0]
  403fce:	f013 0f10 	tst.w	r3, #16
  403fd2:	f000 8152 	beq.w	40427a <tcp_receive+0x2b6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403fd6:	f8b0 505c 	ldrh.w	r5, [r0, #92]	; 0x5c
  403fda:	6d40      	ldr	r0, [r0, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  403fdc:	6d22      	ldr	r2, [r4, #80]	; 0x50
  403fde:	4b94      	ldr	r3, [pc, #592]	; (404230 <tcp_receive+0x26c>)
  403fe0:	681b      	ldr	r3, [r3, #0]
  403fe2:	1ad1      	subs	r1, r2, r3
  403fe4:	2900      	cmp	r1, #0
  403fe6:	db28      	blt.n	40403a <tcp_receive+0x76>
  403fe8:	429a      	cmp	r2, r3
  403fea:	d01b      	beq.n	404024 <tcp_receive+0x60>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  403fec:	4a91      	ldr	r2, [pc, #580]	; (404234 <tcp_receive+0x270>)
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  403fee:	6812      	ldr	r2, [r2, #0]
  403ff0:	4290      	cmp	r0, r2
  403ff2:	d01d      	beq.n	404030 <tcp_receive+0x6c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  403ff4:	4b8f      	ldr	r3, [pc, #572]	; (404234 <tcp_receive+0x270>)
  403ff6:	681b      	ldr	r3, [r3, #0]
  403ff8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403ffa:	1a5a      	subs	r2, r3, r1
  403ffc:	2a00      	cmp	r2, #0
  403ffe:	dd3f      	ble.n	404080 <tcp_receive+0xbc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  404000:	2a01      	cmp	r2, #1
  404002:	d403      	bmi.n	40400c <tcp_receive+0x48>
  404004:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  404006:	1a9a      	subs	r2, r3, r2
  404008:	2a00      	cmp	r2, #0
  40400a:	dd69      	ble.n	4040e0 <tcp_receive+0x11c>
      tcp_send_empty_ack(pcb);
  40400c:	4620      	mov	r0, r4
  40400e:	4b8a      	ldr	r3, [pc, #552]	; (404238 <tcp_receive+0x274>)
  404010:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  404012:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  404014:	2b00      	cmp	r3, #0
  404016:	f000 8121 	beq.w	40425c <tcp_receive+0x298>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  40401a:	4e86      	ldr	r6, [pc, #536]	; (404234 <tcp_receive+0x270>)
  40401c:	f8df 8238 	ldr.w	r8, [pc, #568]	; 404258 <tcp_receive+0x294>
  404020:	4f86      	ldr	r7, [pc, #536]	; (40423c <tcp_receive+0x278>)
  404022:	e0e0      	b.n	4041e6 <tcp_receive+0x222>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  404024:	4a83      	ldr	r2, [pc, #524]	; (404234 <tcp_receive+0x270>)
  404026:	6812      	ldr	r2, [r2, #0]
  404028:	1a82      	subs	r2, r0, r2
  40402a:	2a00      	cmp	r2, #0
  40402c:	dade      	bge.n	403fec <tcp_receive+0x28>
  40402e:	e004      	b.n	40403a <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  404030:	4a83      	ldr	r2, [pc, #524]	; (404240 <tcp_receive+0x27c>)
  404032:	6812      	ldr	r2, [r2, #0]
  404034:	89d2      	ldrh	r2, [r2, #14]
  404036:	42aa      	cmp	r2, r5
  404038:	d9dc      	bls.n	403ff4 <tcp_receive+0x30>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  40403a:	4a81      	ldr	r2, [pc, #516]	; (404240 <tcp_receive+0x27c>)
  40403c:	6812      	ldr	r2, [r2, #0]
  40403e:	89d2      	ldrh	r2, [r2, #14]
  404040:	b291      	uxth	r1, r2
  404042:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  404046:	f8b4 605e 	ldrh.w	r6, [r4, #94]	; 0x5e
  40404a:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
  40404c:	bf38      	it	cc
  40404e:	f8a4 205e 	strhcc.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
  404052:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
  404054:	4b77      	ldr	r3, [pc, #476]	; (404234 <tcp_receive+0x270>)
  404056:	681b      	ldr	r3, [r3, #0]
  404058:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
  40405a:	b949      	cbnz	r1, 404070 <tcp_receive+0xac>
        if (pcb->persist_backoff == 0) {
  40405c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  404060:	2b00      	cmp	r3, #0
  404062:	d1c7      	bne.n	403ff4 <tcp_receive+0x30>
          pcb->persist_cnt = 0;
  404064:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
  404068:	2301      	movs	r3, #1
  40406a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  40406e:	e7c1      	b.n	403ff4 <tcp_receive+0x30>
      } else if (pcb->persist_backoff > 0) {
  404070:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  404074:	2b00      	cmp	r3, #0
  404076:	d0bd      	beq.n	403ff4 <tcp_receive+0x30>
          pcb->persist_backoff = 0;
  404078:	2300      	movs	r3, #0
  40407a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  40407e:	e7b9      	b.n	403ff4 <tcp_receive+0x30>
      if (tcplen == 0) {
  404080:	4a70      	ldr	r2, [pc, #448]	; (404244 <tcp_receive+0x280>)
  404082:	8812      	ldrh	r2, [r2, #0]
  404084:	b932      	cbnz	r2, 404094 <tcp_receive+0xd0>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  404086:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  404088:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
  40408c:	6d65      	ldr	r5, [r4, #84]	; 0x54
  40408e:	442a      	add	r2, r5
  404090:	4290      	cmp	r0, r2
  404092:	d003      	beq.n	40409c <tcp_receive+0xd8>
        pcb->dupacks = 0;
  404094:	2300      	movs	r3, #0
  404096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40409a:	e7ba      	b.n	404012 <tcp_receive+0x4e>
          if (pcb->rtime >= 0) {
  40409c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
  40409e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  4040a2:	d1f7      	bne.n	404094 <tcp_receive+0xd0>
  4040a4:	428b      	cmp	r3, r1
  4040a6:	d1f5      	bne.n	404094 <tcp_receive+0xd0>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  4040a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
  4040ac:	1c53      	adds	r3, r2, #1
  4040ae:	b2db      	uxtb	r3, r3
  4040b0:	429a      	cmp	r2, r3
                ++pcb->dupacks;
  4040b2:	bf38      	it	cc
  4040b4:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
  4040b8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4040bc:	2b03      	cmp	r3, #3
  4040be:	d909      	bls.n	4040d4 <tcp_receive+0x110>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  4040c0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
  4040c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  4040c6:	4413      	add	r3, r2
  4040c8:	b29b      	uxth	r3, r3
  4040ca:	429a      	cmp	r2, r3
  4040cc:	d2a1      	bcs.n	404012 <tcp_receive+0x4e>
                  pcb->cwnd += pcb->mss;
  4040ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  4040d2:	e79e      	b.n	404012 <tcp_receive+0x4e>
              } else if (pcb->dupacks == 3) {
  4040d4:	2b03      	cmp	r3, #3
  4040d6:	d19c      	bne.n	404012 <tcp_receive+0x4e>
                tcp_rexmit_fast(pcb);
  4040d8:	4620      	mov	r0, r4
  4040da:	4b5b      	ldr	r3, [pc, #364]	; (404248 <tcp_receive+0x284>)
  4040dc:	4798      	blx	r3
  4040de:	e798      	b.n	404012 <tcp_receive+0x4e>
      if (pcb->flags & TF_INFR) {
  4040e0:	7ea2      	ldrb	r2, [r4, #26]
  4040e2:	f012 0f04 	tst.w	r2, #4
  4040e6:	d006      	beq.n	4040f6 <tcp_receive+0x132>
        pcb->flags &= ~TF_INFR;
  4040e8:	f022 0204 	bic.w	r2, r2, #4
  4040ec:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
  4040ee:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
  4040f2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
  4040f6:	2100      	movs	r1, #0
  4040f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4040fc:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
  404100:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  404102:	eb02 02e0 	add.w	r2, r2, r0, asr #3
  404106:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
  40410a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
  40410e:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
  404110:	7d23      	ldrb	r3, [r4, #20]
  404112:	2b03      	cmp	r3, #3
  404114:	d90c      	bls.n	404130 <tcp_receive+0x16c>
        if (pcb->cwnd < pcb->ssthresh) {
  404116:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
  40411a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
  40411e:	4293      	cmp	r3, r2
  404120:	d93a      	bls.n	404198 <tcp_receive+0x1d4>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  404122:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  404124:	4413      	add	r3, r2
  404126:	b29b      	uxth	r3, r3
  404128:	429a      	cmp	r2, r3
            pcb->cwnd += pcb->mss;
  40412a:	bf38      	it	cc
  40412c:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
  404130:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  404132:	2b00      	cmp	r3, #0
  404134:	d02c      	beq.n	404190 <tcp_receive+0x1cc>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  404136:	f8df 8120 	ldr.w	r8, [pc, #288]	; 404258 <tcp_receive+0x294>
  40413a:	4f40      	ldr	r7, [pc, #256]	; (40423c <tcp_receive+0x278>)
  40413c:	4e3d      	ldr	r6, [pc, #244]	; (404234 <tcp_receive+0x270>)
  40413e:	68db      	ldr	r3, [r3, #12]
  404140:	6858      	ldr	r0, [r3, #4]
  404142:	47c0      	blx	r8
  404144:	4681      	mov	r9, r0
  404146:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  404148:	891d      	ldrh	r5, [r3, #8]
  40414a:	68db      	ldr	r3, [r3, #12]
  40414c:	8998      	ldrh	r0, [r3, #12]
  40414e:	47b8      	blx	r7
  404150:	6833      	ldr	r3, [r6, #0]
  404152:	1aed      	subs	r5, r5, r3
  404154:	444d      	add	r5, r9
  404156:	f010 0003 	ands.w	r0, r0, #3
  40415a:	bf18      	it	ne
  40415c:	2001      	movne	r0, #1
  40415e:	4405      	add	r5, r0
      while (pcb->unacked != NULL &&
  404160:	2d00      	cmp	r5, #0
  404162:	dc25      	bgt.n	4041b0 <tcp_receive+0x1ec>
        next = pcb->unacked;
  404164:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
  404166:	682b      	ldr	r3, [r5, #0]
  404168:	66e3      	str	r3, [r4, #108]	; 0x6c
        pcb->snd_queuelen -= pbuf_clen(next->p);
  40416a:	6868      	ldr	r0, [r5, #4]
  40416c:	4b37      	ldr	r3, [pc, #220]	; (40424c <tcp_receive+0x288>)
  40416e:	4798      	blx	r3
  404170:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  404174:	1a18      	subs	r0, r3, r0
  404176:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
  40417a:	4a35      	ldr	r2, [pc, #212]	; (404250 <tcp_receive+0x28c>)
  40417c:	892b      	ldrh	r3, [r5, #8]
  40417e:	8811      	ldrh	r1, [r2, #0]
  404180:	440b      	add	r3, r1
  404182:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
  404184:	4628      	mov	r0, r5
  404186:	4b33      	ldr	r3, [pc, #204]	; (404254 <tcp_receive+0x290>)
  404188:	4798      	blx	r3
      while (pcb->unacked != NULL &&
  40418a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40418c:	2b00      	cmp	r3, #0
  40418e:	d1d6      	bne.n	40413e <tcp_receive+0x17a>
        pcb->rtime = -1;
  404190:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404194:	8623      	strh	r3, [r4, #48]	; 0x30
  404196:	e010      	b.n	4041ba <tcp_receive+0x1f6>
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  404198:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  40419a:	fb03 f303 	mul.w	r3, r3, r3
  40419e:	fb93 f3f2 	sdiv	r3, r3, r2
  4041a2:	4413      	add	r3, r2
  4041a4:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
  4041a6:	429a      	cmp	r2, r3
  4041a8:	d2c2      	bcs.n	404130 <tcp_receive+0x16c>
            pcb->cwnd = new_cwnd;
  4041aa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  4041ae:	e7bf      	b.n	404130 <tcp_receive+0x16c>
      if (pcb->unacked == NULL) {
  4041b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4041b2:	2b00      	cmp	r3, #0
  4041b4:	d0ec      	beq.n	404190 <tcp_receive+0x1cc>
        pcb->rtime = 0;
  4041b6:	2300      	movs	r3, #0
  4041b8:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
  4041ba:	2300      	movs	r3, #0
  4041bc:	76e3      	strb	r3, [r4, #27]
  4041be:	e728      	b.n	404012 <tcp_receive+0x4e>
      pcb->snd_queuelen -= pbuf_clen(next->p);
  4041c0:	6868      	ldr	r0, [r5, #4]
  4041c2:	4b22      	ldr	r3, [pc, #136]	; (40424c <tcp_receive+0x288>)
  4041c4:	4798      	blx	r3
  4041c6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  4041ca:	1a18      	subs	r0, r3, r0
  4041cc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
  4041d0:	4a1f      	ldr	r2, [pc, #124]	; (404250 <tcp_receive+0x28c>)
  4041d2:	892b      	ldrh	r3, [r5, #8]
  4041d4:	8811      	ldrh	r1, [r2, #0]
  4041d6:	440b      	add	r3, r1
  4041d8:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
  4041da:	4628      	mov	r0, r5
  4041dc:	4b1d      	ldr	r3, [pc, #116]	; (404254 <tcp_receive+0x290>)
  4041de:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  4041e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4041e2:	2b00      	cmp	r3, #0
  4041e4:	d03a      	beq.n	40425c <tcp_receive+0x298>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  4041e6:	6835      	ldr	r5, [r6, #0]
  4041e8:	68db      	ldr	r3, [r3, #12]
  4041ea:	6858      	ldr	r0, [r3, #4]
  4041ec:	47c0      	blx	r8
  4041ee:	4681      	mov	r9, r0
  4041f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4041f2:	f8b3 a008 	ldrh.w	sl, [r3, #8]
  4041f6:	68db      	ldr	r3, [r3, #12]
  4041f8:	8998      	ldrh	r0, [r3, #12]
  4041fa:	47b8      	blx	r7
  4041fc:	eba5 050a 	sub.w	r5, r5, sl
  404200:	eba5 0509 	sub.w	r5, r5, r9
  404204:	f010 0003 	ands.w	r0, r0, #3
  404208:	bf18      	it	ne
  40420a:	2001      	movne	r0, #1
  40420c:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
  40420e:	2d00      	cmp	r5, #0
  404210:	db24      	blt.n	40425c <tcp_receive+0x298>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  404212:	6833      	ldr	r3, [r6, #0]
  404214:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  404216:	1a9b      	subs	r3, r3, r2
  404218:	2b00      	cmp	r3, #0
  40421a:	dc1f      	bgt.n	40425c <tcp_receive+0x298>
      next = pcb->unsent;
  40421c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
  40421e:	682b      	ldr	r3, [r5, #0]
  404220:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
  404222:	2b00      	cmp	r3, #0
  404224:	d1cc      	bne.n	4041c0 <tcp_receive+0x1fc>
        pcb->unsent_oversize = 0;
  404226:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  40422a:	e7c9      	b.n	4041c0 <tcp_receive+0x1fc>
  40422c:	20400bb4 	.word	0x20400bb4
  404230:	20400bd4 	.word	0x20400bd4
  404234:	20400bb0 	.word	0x20400bb0
  404238:	00405849 	.word	0x00405849
  40423c:	00401059 	.word	0x00401059
  404240:	20400bdc 	.word	0x20400bdc
  404244:	20400bea 	.word	0x20400bea
  404248:	00405d51 	.word	0x00405d51
  40424c:	00402e25 	.word	0x00402e25
  404250:	20400bc8 	.word	0x20400bc8
  404254:	00403291 	.word	0x00403291
  404258:	0040105f 	.word	0x0040105f
    pcb->snd_buf += recv_acked;
  40425c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
  404260:	4aa2      	ldr	r2, [pc, #648]	; (4044ec <tcp_receive+0x528>)
  404262:	8812      	ldrh	r2, [r2, #0]
  404264:	4413      	add	r3, r2
  404266:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  40426a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40426c:	b12b      	cbz	r3, 40427a <tcp_receive+0x2b6>
  40426e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404270:	499f      	ldr	r1, [pc, #636]	; (4044f0 <tcp_receive+0x52c>)
  404272:	6809      	ldr	r1, [r1, #0]
  404274:	1a52      	subs	r2, r2, r1
  404276:	2a00      	cmp	r2, #0
  404278:	db23      	blt.n	4042c2 <tcp_receive+0x2fe>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  40427a:	4b9e      	ldr	r3, [pc, #632]	; (4044f4 <tcp_receive+0x530>)
  40427c:	881b      	ldrh	r3, [r3, #0]
  40427e:	2b00      	cmp	r3, #0
  404280:	f000 825a 	beq.w	404738 <tcp_receive+0x774>
  404284:	7d22      	ldrb	r2, [r4, #20]
  404286:	2a06      	cmp	r2, #6
  404288:	f200 8256 	bhi.w	404738 <tcp_receive+0x774>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  40428c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40428e:	4a9a      	ldr	r2, [pc, #616]	; (4044f8 <tcp_receive+0x534>)
  404290:	6812      	ldr	r2, [r2, #0]
  404292:	1a8d      	subs	r5, r1, r2
  404294:	2d01      	cmp	r5, #1
  404296:	d405      	bmi.n	4042a4 <tcp_receive+0x2e0>
  404298:	f1c2 0001 	rsb	r0, r2, #1
  40429c:	1ac3      	subs	r3, r0, r3
  40429e:	440b      	add	r3, r1
  4042a0:	2b00      	cmp	r3, #0
  4042a2:	dd2d      	ble.n	404300 <tcp_receive+0x33c>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  4042a4:	1a53      	subs	r3, r2, r1
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	db54      	blt.n	404354 <tcp_receive+0x390>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  4042aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  4042ac:	f1c3 0301 	rsb	r3, r3, #1
  4042b0:	4413      	add	r3, r2
  4042b2:	1a5b      	subs	r3, r3, r1
  4042b4:	2b00      	cmp	r3, #0
  4042b6:	dd52      	ble.n	40435e <tcp_receive+0x39a>
      tcp_send_empty_ack(pcb);
  4042b8:	4620      	mov	r0, r4
  4042ba:	4b90      	ldr	r3, [pc, #576]	; (4044fc <tcp_receive+0x538>)
  4042bc:	4798      	blx	r3
  4042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      m = m - (pcb->sa >> 3);
  4042c2:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
  4042c6:	4a8e      	ldr	r2, [pc, #568]	; (404500 <tcp_receive+0x53c>)
  4042c8:	6812      	ldr	r2, [r2, #0]
  4042ca:	1ad3      	subs	r3, r2, r3
      m = m - (pcb->sa >> 3);
  4042cc:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
  4042d0:	b29b      	uxth	r3, r3
  4042d2:	b218      	sxth	r0, r3
      pcb->sa += m;
  4042d4:	185a      	adds	r2, r3, r1
  4042d6:	b212      	sxth	r2, r2
  4042d8:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
  4042da:	2800      	cmp	r0, #0
  4042dc:	db0d      	blt.n	4042fa <tcp_receive+0x336>
      m = m - (pcb->sv >> 2);
  4042de:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->sv += m;
  4042e2:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
  4042e6:	4403      	add	r3, r0
  4042e8:	b29b      	uxth	r3, r3
  4042ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4042ec:	eb03 03e2 	add.w	r3, r3, r2, asr #3
  4042f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
  4042f4:	2300      	movs	r3, #0
  4042f6:	6363      	str	r3, [r4, #52]	; 0x34
  4042f8:	e7bf      	b.n	40427a <tcp_receive+0x2b6>
        m = -m;
  4042fa:	425b      	negs	r3, r3
  4042fc:	b218      	sxth	r0, r3
  4042fe:	e7ee      	b.n	4042de <tcp_receive+0x31a>
      struct pbuf *p = inseg.p;
  404300:	4b80      	ldr	r3, [pc, #512]	; (404504 <tcp_receive+0x540>)
  404302:	6858      	ldr	r0, [r3, #4]
      off = pcb->rcv_nxt - seqno;
  404304:	462b      	mov	r3, r5
      if (inseg.p->len < off) {
  404306:	8942      	ldrh	r2, [r0, #10]
  404308:	4295      	cmp	r5, r2
  40430a:	dd1e      	ble.n	40434a <tcp_receive+0x386>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  40430c:	8901      	ldrh	r1, [r0, #8]
  40430e:	1b49      	subs	r1, r1, r5
  404310:	b289      	uxth	r1, r1
          p->len = 0;
  404312:	2500      	movs	r5, #0
          off -= p->len;
  404314:	1a9b      	subs	r3, r3, r2
          p->tot_len = new_tot_len;
  404316:	8101      	strh	r1, [r0, #8]
          p->len = 0;
  404318:	8145      	strh	r5, [r0, #10]
          p = p->next;
  40431a:	6800      	ldr	r0, [r0, #0]
        while (p->len < off) {
  40431c:	8942      	ldrh	r2, [r0, #10]
  40431e:	429a      	cmp	r2, r3
  404320:	dbf8      	blt.n	404314 <tcp_receive+0x350>
        if (pbuf_header(p, (s16_t)-off)) {
  404322:	425b      	negs	r3, r3
  404324:	b219      	sxth	r1, r3
  404326:	4b78      	ldr	r3, [pc, #480]	; (404508 <tcp_receive+0x544>)
  404328:	4798      	blx	r3
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  40432a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40432c:	4975      	ldr	r1, [pc, #468]	; (404504 <tcp_receive+0x540>)
  40432e:	4872      	ldr	r0, [pc, #456]	; (4044f8 <tcp_receive+0x534>)
  404330:	6803      	ldr	r3, [r0, #0]
  404332:	890d      	ldrh	r5, [r1, #8]
  404334:	442b      	add	r3, r5
  404336:	1a9b      	subs	r3, r3, r2
  404338:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  40433a:	68cb      	ldr	r3, [r1, #12]
  40433c:	6002      	str	r2, [r0, #0]
  40433e:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  404340:	6a61      	ldr	r1, [r4, #36]	; 0x24
  404342:	1a53      	subs	r3, r2, r1
  404344:	2b00      	cmp	r3, #0
  404346:	dab0      	bge.n	4042aa <tcp_receive+0x2e6>
  404348:	e7b6      	b.n	4042b8 <tcp_receive+0x2f4>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  40434a:	4269      	negs	r1, r5
  40434c:	b209      	sxth	r1, r1
  40434e:	4b6e      	ldr	r3, [pc, #440]	; (404508 <tcp_receive+0x544>)
  404350:	4798      	blx	r3
  404352:	e7ea      	b.n	40432a <tcp_receive+0x366>
        tcp_ack_now(pcb);
  404354:	7ea3      	ldrb	r3, [r4, #26]
  404356:	f043 0302 	orr.w	r3, r3, #2
  40435a:	76a3      	strb	r3, [r4, #26]
  40435c:	e7ac      	b.n	4042b8 <tcp_receive+0x2f4>
      if (pcb->rcv_nxt == seqno) {
  40435e:	428a      	cmp	r2, r1
  404360:	d013      	beq.n	40438a <tcp_receive+0x3c6>
        tcp_send_empty_ack(pcb);
  404362:	4620      	mov	r0, r4
  404364:	4b65      	ldr	r3, [pc, #404]	; (4044fc <tcp_receive+0x538>)
  404366:	4798      	blx	r3
        if (pcb->ooseq == NULL) {
  404368:	6f26      	ldr	r6, [r4, #112]	; 0x70
  40436a:	2e00      	cmp	r6, #0
  40436c:	f000 812c 	beq.w	4045c8 <tcp_receive+0x604>
            if (seqno == next->tcphdr->seqno) {
  404370:	68f1      	ldr	r1, [r6, #12]
  404372:	684a      	ldr	r2, [r1, #4]
  404374:	4b60      	ldr	r3, [pc, #384]	; (4044f8 <tcp_receive+0x534>)
  404376:	6818      	ldr	r0, [r3, #0]
  404378:	4282      	cmp	r2, r0
  40437a:	f000 812b 	beq.w	4045d4 <tcp_receive+0x610>
  40437e:	2700      	movs	r7, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  404380:	f100 3eff 	add.w	lr, r0, #4294967295
  404384:	f100 0c01 	add.w	ip, r0, #1
  404388:	e147      	b.n	40461a <tcp_receive+0x656>
        tcplen = TCP_TCPLEN(&inseg);
  40438a:	4b5e      	ldr	r3, [pc, #376]	; (404504 <tcp_receive+0x540>)
  40438c:	891d      	ldrh	r5, [r3, #8]
  40438e:	68db      	ldr	r3, [r3, #12]
  404390:	8998      	ldrh	r0, [r3, #12]
  404392:	4b5e      	ldr	r3, [pc, #376]	; (40450c <tcp_receive+0x548>)
  404394:	4798      	blx	r3
  404396:	f010 0303 	ands.w	r3, r0, #3
  40439a:	bf18      	it	ne
  40439c:	2301      	movne	r3, #1
  40439e:	442b      	add	r3, r5
  4043a0:	b29b      	uxth	r3, r3
  4043a2:	4a54      	ldr	r2, [pc, #336]	; (4044f4 <tcp_receive+0x530>)
  4043a4:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
  4043a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  4043a8:	429a      	cmp	r2, r3
  4043aa:	d317      	bcc.n	4043dc <tcp_receive+0x418>
        if (pcb->ooseq != NULL) {
  4043ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4043ae:	2b00      	cmp	r3, #0
  4043b0:	f000 81ec 	beq.w	40478c <tcp_receive+0x7c8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4043b4:	4b53      	ldr	r3, [pc, #332]	; (404504 <tcp_receive+0x540>)
  4043b6:	68db      	ldr	r3, [r3, #12]
  4043b8:	8998      	ldrh	r0, [r3, #12]
  4043ba:	4b54      	ldr	r3, [pc, #336]	; (40450c <tcp_receive+0x548>)
  4043bc:	4798      	blx	r3
  4043be:	f010 0f01 	tst.w	r0, #1
  4043c2:	d041      	beq.n	404448 <tcp_receive+0x484>
            while (pcb->ooseq != NULL) {
  4043c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4043c6:	2800      	cmp	r0, #0
  4043c8:	f000 81e0 	beq.w	40478c <tcp_receive+0x7c8>
              tcp_seg_free(old_ooseq);
  4043cc:	4d50      	ldr	r5, [pc, #320]	; (404510 <tcp_receive+0x54c>)
              pcb->ooseq = pcb->ooseq->next;
  4043ce:	6803      	ldr	r3, [r0, #0]
  4043d0:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
  4043d2:	47a8      	blx	r5
            while (pcb->ooseq != NULL) {
  4043d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4043d6:	2800      	cmp	r0, #0
  4043d8:	d1f9      	bne.n	4043ce <tcp_receive+0x40a>
  4043da:	e1d7      	b.n	40478c <tcp_receive+0x7c8>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4043dc:	4b49      	ldr	r3, [pc, #292]	; (404504 <tcp_receive+0x540>)
  4043de:	68db      	ldr	r3, [r3, #12]
  4043e0:	8998      	ldrh	r0, [r3, #12]
  4043e2:	4b4a      	ldr	r3, [pc, #296]	; (40450c <tcp_receive+0x548>)
  4043e4:	4798      	blx	r3
  4043e6:	f010 0f01 	tst.w	r0, #1
  4043ea:	d11f      	bne.n	40442c <tcp_receive+0x468>
          inseg.len = (u16_t)pcb->rcv_wnd;
  4043ec:	4b45      	ldr	r3, [pc, #276]	; (404504 <tcp_receive+0x540>)
  4043ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  4043f0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  4043f2:	68db      	ldr	r3, [r3, #12]
  4043f4:	8998      	ldrh	r0, [r3, #12]
  4043f6:	4b45      	ldr	r3, [pc, #276]	; (40450c <tcp_receive+0x548>)
  4043f8:	4798      	blx	r3
  4043fa:	f010 0f02 	tst.w	r0, #2
  4043fe:	d003      	beq.n	404408 <tcp_receive+0x444>
            inseg.len -= 1;
  404400:	4a40      	ldr	r2, [pc, #256]	; (404504 <tcp_receive+0x540>)
  404402:	8913      	ldrh	r3, [r2, #8]
  404404:	3b01      	subs	r3, #1
  404406:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
  404408:	4d3e      	ldr	r5, [pc, #248]	; (404504 <tcp_receive+0x540>)
  40440a:	8929      	ldrh	r1, [r5, #8]
  40440c:	6868      	ldr	r0, [r5, #4]
  40440e:	4b41      	ldr	r3, [pc, #260]	; (404514 <tcp_receive+0x550>)
  404410:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  404412:	892e      	ldrh	r6, [r5, #8]
  404414:	68eb      	ldr	r3, [r5, #12]
  404416:	8998      	ldrh	r0, [r3, #12]
  404418:	4b3c      	ldr	r3, [pc, #240]	; (40450c <tcp_receive+0x548>)
  40441a:	4798      	blx	r3
  40441c:	f010 0003 	ands.w	r0, r0, #3
  404420:	bf18      	it	ne
  404422:	2001      	movne	r0, #1
  404424:	4406      	add	r6, r0
  404426:	4b33      	ldr	r3, [pc, #204]	; (4044f4 <tcp_receive+0x530>)
  404428:	801e      	strh	r6, [r3, #0]
  40442a:	e7bf      	b.n	4043ac <tcp_receive+0x3e8>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  40442c:	4b35      	ldr	r3, [pc, #212]	; (404504 <tcp_receive+0x540>)
  40442e:	68de      	ldr	r6, [r3, #12]
  404430:	89b5      	ldrh	r5, [r6, #12]
  404432:	4628      	mov	r0, r5
  404434:	4f35      	ldr	r7, [pc, #212]	; (40450c <tcp_receive+0x548>)
  404436:	47b8      	blx	r7
  404438:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  40443c:	47b8      	blx	r7
  40443e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  404442:	4305      	orrs	r5, r0
  404444:	81b5      	strh	r5, [r6, #12]
  404446:	e7d1      	b.n	4043ec <tcp_receive+0x428>
            next = pcb->ooseq;
  404448:	f8d4 9070 	ldr.w	r9, [r4, #112]	; 0x70
            while (next &&
  40444c:	f1b9 0f00 	cmp.w	r9, #0
  404450:	f000 819a 	beq.w	404788 <tcp_receive+0x7c4>
                   TCP_SEQ_GEQ(seqno + tcplen,
  404454:	f8d9 200c 	ldr.w	r2, [r9, #12]
  404458:	4b26      	ldr	r3, [pc, #152]	; (4044f4 <tcp_receive+0x530>)
  40445a:	881b      	ldrh	r3, [r3, #0]
  40445c:	4926      	ldr	r1, [pc, #152]	; (4044f8 <tcp_receive+0x534>)
  40445e:	6809      	ldr	r1, [r1, #0]
  404460:	440b      	add	r3, r1
  404462:	6851      	ldr	r1, [r2, #4]
  404464:	1a5b      	subs	r3, r3, r1
  404466:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  40446a:	1a5b      	subs	r3, r3, r1
            while (next &&
  40446c:	2b00      	cmp	r3, #0
  40446e:	f2c0 81bf 	blt.w	4047f0 <tcp_receive+0x82c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  404472:	4e26      	ldr	r6, [pc, #152]	; (40450c <tcp_receive+0x548>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  404474:	f8df 808c 	ldr.w	r8, [pc, #140]	; 404504 <tcp_receive+0x540>
                tcplen = TCP_TCPLEN(&inseg);
  404478:	4f1e      	ldr	r7, [pc, #120]	; (4044f4 <tcp_receive+0x530>)
  40447a:	e014      	b.n	4044a6 <tcp_receive+0x4e2>
              next = next->next;
  40447c:	f8d9 5000 	ldr.w	r5, [r9]
              tcp_seg_free(prev);
  404480:	4648      	mov	r0, r9
  404482:	4b23      	ldr	r3, [pc, #140]	; (404510 <tcp_receive+0x54c>)
  404484:	4798      	blx	r3
            while (next &&
  404486:	2d00      	cmp	r5, #0
  404488:	f000 817e 	beq.w	404788 <tcp_receive+0x7c4>
                   TCP_SEQ_GEQ(seqno + tcplen,
  40448c:	68ea      	ldr	r2, [r5, #12]
  40448e:	883b      	ldrh	r3, [r7, #0]
  404490:	4919      	ldr	r1, [pc, #100]	; (4044f8 <tcp_receive+0x534>)
  404492:	6809      	ldr	r1, [r1, #0]
  404494:	440b      	add	r3, r1
  404496:	6851      	ldr	r1, [r2, #4]
  404498:	1a5b      	subs	r3, r3, r1
  40449a:	8929      	ldrh	r1, [r5, #8]
  40449c:	1a5b      	subs	r3, r3, r1
            while (next &&
  40449e:	2b00      	cmp	r3, #0
  4044a0:	f2c0 81a7 	blt.w	4047f2 <tcp_receive+0x82e>
              next = next->next;
  4044a4:	46a9      	mov	r9, r5
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  4044a6:	8990      	ldrh	r0, [r2, #12]
  4044a8:	47b0      	blx	r6
  4044aa:	f010 0f01 	tst.w	r0, #1
  4044ae:	d0e5      	beq.n	40447c <tcp_receive+0x4b8>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  4044b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4044b4:	8998      	ldrh	r0, [r3, #12]
  4044b6:	47b0      	blx	r6
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  4044b8:	f010 0f02 	tst.w	r0, #2
  4044bc:	d1de      	bne.n	40447c <tcp_receive+0x4b8>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  4044be:	f8d8 a00c 	ldr.w	sl, [r8, #12]
  4044c2:	f8ba 500c 	ldrh.w	r5, [sl, #12]
  4044c6:	2001      	movs	r0, #1
  4044c8:	47b0      	blx	r6
  4044ca:	4328      	orrs	r0, r5
  4044cc:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
  4044d0:	f8b8 5008 	ldrh.w	r5, [r8, #8]
  4044d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4044d8:	8998      	ldrh	r0, [r3, #12]
  4044da:	47b0      	blx	r6
  4044dc:	f010 0003 	ands.w	r0, r0, #3
  4044e0:	bf18      	it	ne
  4044e2:	2001      	movne	r0, #1
  4044e4:	4405      	add	r5, r0
  4044e6:	803d      	strh	r5, [r7, #0]
  4044e8:	e7c8      	b.n	40447c <tcp_receive+0x4b8>
  4044ea:	bf00      	nop
  4044ec:	20400bc8 	.word	0x20400bc8
  4044f0:	20400bb0 	.word	0x20400bb0
  4044f4:	20400bea 	.word	0x20400bea
  4044f8:	20400bd4 	.word	0x20400bd4
  4044fc:	00405849 	.word	0x00405849
  404500:	20404984 	.word	0x20404984
  404504:	20400bb8 	.word	0x20400bb8
  404508:	00402bf9 	.word	0x00402bf9
  40450c:	00401059 	.word	0x00401059
  404510:	00403291 	.word	0x00403291
  404514:	00402dc5 	.word	0x00402dc5
              recv_data = cseg->p;
  404518:	4b90      	ldr	r3, [pc, #576]	; (40475c <tcp_receive+0x798>)
  40451a:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
  40451c:	2300      	movs	r3, #0
  40451e:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  404520:	68eb      	ldr	r3, [r5, #12]
  404522:	8998      	ldrh	r0, [r3, #12]
  404524:	47b8      	blx	r7
  404526:	f010 0f01 	tst.w	r0, #1
  40452a:	d007      	beq.n	40453c <tcp_receive+0x578>
            recv_flags |= TF_GOT_FIN;
  40452c:	4a8c      	ldr	r2, [pc, #560]	; (404760 <tcp_receive+0x79c>)
  40452e:	7813      	ldrb	r3, [r2, #0]
  404530:	f043 0320 	orr.w	r3, r3, #32
  404534:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  404536:	7d23      	ldrb	r3, [r4, #20]
  404538:	2b04      	cmp	r3, #4
  40453a:	d032      	beq.n	4045a2 <tcp_receive+0x5de>
          pcb->ooseq = cseg->next;
  40453c:	682b      	ldr	r3, [r5, #0]
  40453e:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
  404540:	4628      	mov	r0, r5
  404542:	4b88      	ldr	r3, [pc, #544]	; (404764 <tcp_receive+0x7a0>)
  404544:	4798      	blx	r3
        while (pcb->ooseq != NULL &&
  404546:	6f25      	ldr	r5, [r4, #112]	; 0x70
  404548:	2d00      	cmp	r5, #0
  40454a:	d02d      	beq.n	4045a8 <tcp_receive+0x5e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  40454c:	68eb      	ldr	r3, [r5, #12]
  40454e:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  404550:	6a61      	ldr	r1, [r4, #36]	; 0x24
  404552:	428a      	cmp	r2, r1
  404554:	d128      	bne.n	4045a8 <tcp_receive+0x5e4>
          seqno = pcb->ooseq->tcphdr->seqno;
  404556:	f8c9 2000 	str.w	r2, [r9]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  40455a:	892e      	ldrh	r6, [r5, #8]
  40455c:	8998      	ldrh	r0, [r3, #12]
  40455e:	47b8      	blx	r7
  404560:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404562:	441e      	add	r6, r3
  404564:	f010 0003 	ands.w	r0, r0, #3
  404568:	bf18      	it	ne
  40456a:	2001      	movne	r0, #1
  40456c:	4406      	add	r6, r0
  40456e:	6266      	str	r6, [r4, #36]	; 0x24
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  404570:	892e      	ldrh	r6, [r5, #8]
  404572:	68eb      	ldr	r3, [r5, #12]
  404574:	8998      	ldrh	r0, [r3, #12]
  404576:	47b8      	blx	r7
  404578:	f010 0003 	ands.w	r0, r0, #3
  40457c:	bf18      	it	ne
  40457e:	2001      	movne	r0, #1
  404580:	4430      	add	r0, r6
  404582:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  404584:	1a18      	subs	r0, r3, r0
  404586:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
  404588:	4620      	mov	r0, r4
  40458a:	47c0      	blx	r8
          if (cseg->p->tot_len > 0) {
  40458c:	6869      	ldr	r1, [r5, #4]
  40458e:	890b      	ldrh	r3, [r1, #8]
  404590:	2b00      	cmp	r3, #0
  404592:	d0c5      	beq.n	404520 <tcp_receive+0x55c>
            if (recv_data) {
  404594:	4b71      	ldr	r3, [pc, #452]	; (40475c <tcp_receive+0x798>)
  404596:	6818      	ldr	r0, [r3, #0]
  404598:	2800      	cmp	r0, #0
  40459a:	d0bd      	beq.n	404518 <tcp_receive+0x554>
              pbuf_cat(recv_data, cseg->p);
  40459c:	4b72      	ldr	r3, [pc, #456]	; (404768 <tcp_receive+0x7a4>)
  40459e:	4798      	blx	r3
  4045a0:	e7bc      	b.n	40451c <tcp_receive+0x558>
              pcb->state = CLOSE_WAIT;
  4045a2:	2307      	movs	r3, #7
  4045a4:	7523      	strb	r3, [r4, #20]
  4045a6:	e7c9      	b.n	40453c <tcp_receive+0x578>
        tcp_ack(pcb);
  4045a8:	7ea3      	ldrb	r3, [r4, #26]
  4045aa:	f013 0f01 	tst.w	r3, #1
  4045ae:	d006      	beq.n	4045be <tcp_receive+0x5fa>
  4045b0:	f023 0301 	bic.w	r3, r3, #1
  4045b4:	f043 0302 	orr.w	r3, r3, #2
  4045b8:	76a3      	strb	r3, [r4, #26]
  4045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045be:	f043 0301 	orr.w	r3, r3, #1
  4045c2:	76a3      	strb	r3, [r4, #26]
  4045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
  4045c8:	4868      	ldr	r0, [pc, #416]	; (40476c <tcp_receive+0x7a8>)
  4045ca:	4b69      	ldr	r3, [pc, #420]	; (404770 <tcp_receive+0x7ac>)
  4045cc:	4798      	blx	r3
  4045ce:	6720      	str	r0, [r4, #112]	; 0x70
  4045d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
  4045d4:	4635      	mov	r5, r6
  4045d6:	2600      	movs	r6, #0
              if (inseg.len > next->len) {
  4045d8:	4b64      	ldr	r3, [pc, #400]	; (40476c <tcp_receive+0x7a8>)
  4045da:	891a      	ldrh	r2, [r3, #8]
  4045dc:	892b      	ldrh	r3, [r5, #8]
  4045de:	429a      	cmp	r2, r3
  4045e0:	d94f      	bls.n	404682 <tcp_receive+0x6be>
                cseg = tcp_seg_copy(&inseg);
  4045e2:	4862      	ldr	r0, [pc, #392]	; (40476c <tcp_receive+0x7a8>)
  4045e4:	4b62      	ldr	r3, [pc, #392]	; (404770 <tcp_receive+0x7ac>)
  4045e6:	4798      	blx	r3
                if (cseg != NULL) {
  4045e8:	4603      	mov	r3, r0
  4045ea:	2800      	cmp	r0, #0
  4045ec:	d049      	beq.n	404682 <tcp_receive+0x6be>
                  if (prev != NULL) {
  4045ee:	b136      	cbz	r6, 4045fe <tcp_receive+0x63a>
                    prev->next = cseg;
  4045f0:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
  4045f2:	4629      	mov	r1, r5
  4045f4:	4618      	mov	r0, r3
  4045f6:	4b5f      	ldr	r3, [pc, #380]	; (404774 <tcp_receive+0x7b0>)
  4045f8:	4798      	blx	r3
  4045fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    pcb->ooseq = cseg;
  4045fe:	6720      	str	r0, [r4, #112]	; 0x70
  404600:	e7f7      	b.n	4045f2 <tcp_receive+0x62e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  404602:	1a83      	subs	r3, r0, r2
  404604:	2b00      	cmp	r3, #0
  404606:	db2f      	blt.n	404668 <tcp_receive+0x6a4>
              if (next->next == NULL &&
  404608:	6835      	ldr	r5, [r6, #0]
  40460a:	2d00      	cmp	r5, #0
  40460c:	d036      	beq.n	40467c <tcp_receive+0x6b8>
            if (seqno == next->tcphdr->seqno) {
  40460e:	68e9      	ldr	r1, [r5, #12]
  404610:	684a      	ldr	r2, [r1, #4]
  404612:	4637      	mov	r7, r6
  404614:	4282      	cmp	r2, r0
  404616:	d0df      	beq.n	4045d8 <tcp_receive+0x614>
              if (next->next == NULL &&
  404618:	462e      	mov	r6, r5
              if (prev == NULL) {
  40461a:	2f00      	cmp	r7, #0
  40461c:	d0f1      	beq.n	404602 <tcp_receive+0x63e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  40461e:	68fb      	ldr	r3, [r7, #12]
  404620:	685b      	ldr	r3, [r3, #4]
  404622:	ebae 0303 	sub.w	r3, lr, r3
  404626:	2b00      	cmp	r3, #0
  404628:	dbee      	blt.n	404608 <tcp_receive+0x644>
  40462a:	ebac 0302 	sub.w	r3, ip, r2
  40462e:	2b00      	cmp	r3, #0
  404630:	dcea      	bgt.n	404608 <tcp_receive+0x644>
                  cseg = tcp_seg_copy(&inseg);
  404632:	484e      	ldr	r0, [pc, #312]	; (40476c <tcp_receive+0x7a8>)
  404634:	4b4e      	ldr	r3, [pc, #312]	; (404770 <tcp_receive+0x7ac>)
  404636:	4798      	blx	r3
                  if (cseg != NULL) {
  404638:	4604      	mov	r4, r0
  40463a:	b310      	cbz	r0, 404682 <tcp_receive+0x6be>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  40463c:	68fb      	ldr	r3, [r7, #12]
  40463e:	6859      	ldr	r1, [r3, #4]
  404640:	4b4d      	ldr	r3, [pc, #308]	; (404778 <tcp_receive+0x7b4>)
  404642:	681b      	ldr	r3, [r3, #0]
  404644:	893a      	ldrh	r2, [r7, #8]
  404646:	440a      	add	r2, r1
  404648:	1ad2      	subs	r2, r2, r3
  40464a:	2a00      	cmp	r2, #0
  40464c:	dd05      	ble.n	40465a <tcp_receive+0x696>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  40464e:	1a5b      	subs	r3, r3, r1
  404650:	b299      	uxth	r1, r3
  404652:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
  404654:	6878      	ldr	r0, [r7, #4]
  404656:	4b49      	ldr	r3, [pc, #292]	; (40477c <tcp_receive+0x7b8>)
  404658:	4798      	blx	r3
                    prev->next = cseg;
  40465a:	603c      	str	r4, [r7, #0]
                    tcp_oos_insert_segment(cseg, next);
  40465c:	4631      	mov	r1, r6
  40465e:	4620      	mov	r0, r4
  404660:	4b44      	ldr	r3, [pc, #272]	; (404774 <tcp_receive+0x7b0>)
  404662:	4798      	blx	r3
  404664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  cseg = tcp_seg_copy(&inseg);
  404668:	4840      	ldr	r0, [pc, #256]	; (40476c <tcp_receive+0x7a8>)
  40466a:	4b41      	ldr	r3, [pc, #260]	; (404770 <tcp_receive+0x7ac>)
  40466c:	4798      	blx	r3
                  if (cseg != NULL) {
  40466e:	b140      	cbz	r0, 404682 <tcp_receive+0x6be>
                    pcb->ooseq = cseg;
  404670:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
  404672:	4631      	mov	r1, r6
  404674:	4b3f      	ldr	r3, [pc, #252]	; (404774 <tcp_receive+0x7b0>)
  404676:	4798      	blx	r3
  404678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  40467c:	1a82      	subs	r2, r0, r2
              if (next->next == NULL &&
  40467e:	2a00      	cmp	r2, #0
  404680:	dc01      	bgt.n	404686 <tcp_receive+0x6c2>
  404682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  404686:	8988      	ldrh	r0, [r1, #12]
  404688:	4b3d      	ldr	r3, [pc, #244]	; (404780 <tcp_receive+0x7bc>)
  40468a:	4798      	blx	r3
  40468c:	f010 0f01 	tst.w	r0, #1
  404690:	d1f7      	bne.n	404682 <tcp_receive+0x6be>
                next->next = tcp_seg_copy(&inseg);
  404692:	4836      	ldr	r0, [pc, #216]	; (40476c <tcp_receive+0x7a8>)
  404694:	4b36      	ldr	r3, [pc, #216]	; (404770 <tcp_receive+0x7ac>)
  404696:	4798      	blx	r3
  404698:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
  40469a:	2800      	cmp	r0, #0
  40469c:	d0f1      	beq.n	404682 <tcp_receive+0x6be>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  40469e:	68f3      	ldr	r3, [r6, #12]
  4046a0:	6859      	ldr	r1, [r3, #4]
  4046a2:	4b35      	ldr	r3, [pc, #212]	; (404778 <tcp_receive+0x7b4>)
  4046a4:	681b      	ldr	r3, [r3, #0]
  4046a6:	8932      	ldrh	r2, [r6, #8]
  4046a8:	440a      	add	r2, r1
  4046aa:	1ad2      	subs	r2, r2, r3
  4046ac:	2a00      	cmp	r2, #0
  4046ae:	dd05      	ble.n	4046bc <tcp_receive+0x6f8>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  4046b0:	1a5b      	subs	r3, r3, r1
  4046b2:	b299      	uxth	r1, r3
  4046b4:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
  4046b6:	6870      	ldr	r0, [r6, #4]
  4046b8:	4b30      	ldr	r3, [pc, #192]	; (40477c <tcp_receive+0x7b8>)
  4046ba:	4798      	blx	r3
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  4046bc:	4b31      	ldr	r3, [pc, #196]	; (404784 <tcp_receive+0x7c0>)
  4046be:	881b      	ldrh	r3, [r3, #0]
  4046c0:	4a2d      	ldr	r2, [pc, #180]	; (404778 <tcp_receive+0x7b4>)
  4046c2:	6812      	ldr	r2, [r2, #0]
  4046c4:	4413      	add	r3, r2
  4046c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4046c8:	1a9b      	subs	r3, r3, r2
  4046ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  4046cc:	1a9b      	subs	r3, r3, r2
  4046ce:	2b00      	cmp	r3, #0
  4046d0:	ddd7      	ble.n	404682 <tcp_receive+0x6be>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  4046d2:	6833      	ldr	r3, [r6, #0]
  4046d4:	68db      	ldr	r3, [r3, #12]
  4046d6:	8998      	ldrh	r0, [r3, #12]
  4046d8:	4b29      	ldr	r3, [pc, #164]	; (404780 <tcp_receive+0x7bc>)
  4046da:	4798      	blx	r3
  4046dc:	f010 0f01 	tst.w	r0, #1
  4046e0:	d11b      	bne.n	40471a <tcp_receive+0x756>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  4046e2:	6832      	ldr	r2, [r6, #0]
  4046e4:	4b24      	ldr	r3, [pc, #144]	; (404778 <tcp_receive+0x7b4>)
  4046e6:	6819      	ldr	r1, [r3, #0]
  4046e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  4046ea:	1a5b      	subs	r3, r3, r1
  4046ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4046ee:	440b      	add	r3, r1
  4046f0:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  4046f2:	6833      	ldr	r3, [r6, #0]
  4046f4:	8919      	ldrh	r1, [r3, #8]
  4046f6:	6858      	ldr	r0, [r3, #4]
  4046f8:	4b20      	ldr	r3, [pc, #128]	; (40477c <tcp_receive+0x7b8>)
  4046fa:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  4046fc:	6833      	ldr	r3, [r6, #0]
  4046fe:	891c      	ldrh	r4, [r3, #8]
  404700:	68db      	ldr	r3, [r3, #12]
  404702:	8998      	ldrh	r0, [r3, #12]
  404704:	4b1e      	ldr	r3, [pc, #120]	; (404780 <tcp_receive+0x7bc>)
  404706:	4798      	blx	r3
  404708:	f010 0003 	ands.w	r0, r0, #3
  40470c:	bf18      	it	ne
  40470e:	2001      	movne	r0, #1
  404710:	4404      	add	r4, r0
  404712:	4b1c      	ldr	r3, [pc, #112]	; (404784 <tcp_receive+0x7c0>)
  404714:	801c      	strh	r4, [r3, #0]
  404716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  40471a:	6833      	ldr	r3, [r6, #0]
  40471c:	68df      	ldr	r7, [r3, #12]
  40471e:	89bd      	ldrh	r5, [r7, #12]
  404720:	4628      	mov	r0, r5
  404722:	f8df 805c 	ldr.w	r8, [pc, #92]	; 404780 <tcp_receive+0x7bc>
  404726:	47c0      	blx	r8
  404728:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  40472c:	47c0      	blx	r8
  40472e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  404732:	4305      	orrs	r5, r0
  404734:	81bd      	strh	r5, [r7, #12]
  404736:	e7d4      	b.n	4046e2 <tcp_receive+0x71e>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  404738:	4b0f      	ldr	r3, [pc, #60]	; (404778 <tcp_receive+0x7b4>)
  40473a:	681b      	ldr	r3, [r3, #0]
  40473c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40473e:	1a99      	subs	r1, r3, r2
  404740:	2900      	cmp	r1, #0
  404742:	db05      	blt.n	404750 <tcp_receive+0x78c>
  404744:	3301      	adds	r3, #1
  404746:	1a9b      	subs	r3, r3, r2
  404748:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40474a:	1a9b      	subs	r3, r3, r2
  40474c:	2b00      	cmp	r3, #0
  40474e:	dd98      	ble.n	404682 <tcp_receive+0x6be>
      tcp_ack_now(pcb);
  404750:	7ea3      	ldrb	r3, [r4, #26]
  404752:	f043 0302 	orr.w	r3, r3, #2
  404756:	76a3      	strb	r3, [r4, #26]
}
  404758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40475c:	20400bcc 	.word	0x20400bcc
  404760:	20400bd0 	.word	0x20400bd0
  404764:	00403291 	.word	0x00403291
  404768:	00402e45 	.word	0x00402e45
  40476c:	20400bb8 	.word	0x20400bb8
  404770:	004032d5 	.word	0x004032d5
  404774:	00403efd 	.word	0x00403efd
  404778:	20400bd4 	.word	0x20400bd4
  40477c:	00402dc5 	.word	0x00402dc5
  404780:	00401059 	.word	0x00401059
  404784:	20400bea 	.word	0x20400bea
              next = next->next;
  404788:	2500      	movs	r5, #0
            pcb->ooseq = next;
  40478a:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
  40478c:	4b2e      	ldr	r3, [pc, #184]	; (404848 <tcp_receive+0x884>)
  40478e:	881a      	ldrh	r2, [r3, #0]
  404790:	4b2e      	ldr	r3, [pc, #184]	; (40484c <tcp_receive+0x888>)
  404792:	681b      	ldr	r3, [r3, #0]
  404794:	4413      	add	r3, r2
  404796:	6263      	str	r3, [r4, #36]	; 0x24
        pcb->rcv_wnd -= tcplen;
  404798:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  40479a:	1a9b      	subs	r3, r3, r2
  40479c:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
  40479e:	4620      	mov	r0, r4
  4047a0:	4b2b      	ldr	r3, [pc, #172]	; (404850 <tcp_receive+0x88c>)
  4047a2:	4798      	blx	r3
        if (inseg.p->tot_len > 0) {
  4047a4:	4b2b      	ldr	r3, [pc, #172]	; (404854 <tcp_receive+0x890>)
  4047a6:	685b      	ldr	r3, [r3, #4]
  4047a8:	891a      	ldrh	r2, [r3, #8]
  4047aa:	b122      	cbz	r2, 4047b6 <tcp_receive+0x7f2>
          recv_data = inseg.p;
  4047ac:	4a2a      	ldr	r2, [pc, #168]	; (404858 <tcp_receive+0x894>)
  4047ae:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
  4047b0:	2200      	movs	r2, #0
  4047b2:	4b28      	ldr	r3, [pc, #160]	; (404854 <tcp_receive+0x890>)
  4047b4:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4047b6:	4b27      	ldr	r3, [pc, #156]	; (404854 <tcp_receive+0x890>)
  4047b8:	68db      	ldr	r3, [r3, #12]
  4047ba:	8998      	ldrh	r0, [r3, #12]
  4047bc:	4b27      	ldr	r3, [pc, #156]	; (40485c <tcp_receive+0x898>)
  4047be:	4798      	blx	r3
  4047c0:	f010 0f01 	tst.w	r0, #1
  4047c4:	d004      	beq.n	4047d0 <tcp_receive+0x80c>
          recv_flags |= TF_GOT_FIN;
  4047c6:	4a26      	ldr	r2, [pc, #152]	; (404860 <tcp_receive+0x89c>)
  4047c8:	7813      	ldrb	r3, [r2, #0]
  4047ca:	f043 0320 	orr.w	r3, r3, #32
  4047ce:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
  4047d0:	6f25      	ldr	r5, [r4, #112]	; 0x70
  4047d2:	2d00      	cmp	r5, #0
  4047d4:	f43f aee8 	beq.w	4045a8 <tcp_receive+0x5e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  4047d8:	68eb      	ldr	r3, [r5, #12]
  4047da:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  4047dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4047de:	428a      	cmp	r2, r1
  4047e0:	f47f aee2 	bne.w	4045a8 <tcp_receive+0x5e4>
          seqno = pcb->ooseq->tcphdr->seqno;
  4047e4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 40484c <tcp_receive+0x888>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  4047e8:	4f1c      	ldr	r7, [pc, #112]	; (40485c <tcp_receive+0x898>)
          tcp_update_rcv_ann_wnd(pcb);
  4047ea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 404850 <tcp_receive+0x88c>
  4047ee:	e6b2      	b.n	404556 <tcp_receive+0x592>
            next = pcb->ooseq;
  4047f0:	464d      	mov	r5, r9
                TCP_SEQ_GT(seqno + tcplen,
  4047f2:	4b16      	ldr	r3, [pc, #88]	; (40484c <tcp_receive+0x888>)
  4047f4:	6819      	ldr	r1, [r3, #0]
  4047f6:	68eb      	ldr	r3, [r5, #12]
  4047f8:	685a      	ldr	r2, [r3, #4]
  4047fa:	4b13      	ldr	r3, [pc, #76]	; (404848 <tcp_receive+0x884>)
  4047fc:	881b      	ldrh	r3, [r3, #0]
  4047fe:	440b      	add	r3, r1
  404800:	1a9b      	subs	r3, r3, r2
            if (next &&
  404802:	2b00      	cmp	r3, #0
  404804:	ddc1      	ble.n	40478a <tcp_receive+0x7c6>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  404806:	4b13      	ldr	r3, [pc, #76]	; (404854 <tcp_receive+0x890>)
  404808:	1a52      	subs	r2, r2, r1
  40480a:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  40480c:	68db      	ldr	r3, [r3, #12]
  40480e:	8998      	ldrh	r0, [r3, #12]
  404810:	4b12      	ldr	r3, [pc, #72]	; (40485c <tcp_receive+0x898>)
  404812:	4798      	blx	r3
  404814:	f010 0f02 	tst.w	r0, #2
  404818:	d003      	beq.n	404822 <tcp_receive+0x85e>
                inseg.len -= 1;
  40481a:	4a0e      	ldr	r2, [pc, #56]	; (404854 <tcp_receive+0x890>)
  40481c:	8913      	ldrh	r3, [r2, #8]
  40481e:	3b01      	subs	r3, #1
  404820:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
  404822:	4e0c      	ldr	r6, [pc, #48]	; (404854 <tcp_receive+0x890>)
  404824:	8931      	ldrh	r1, [r6, #8]
  404826:	6870      	ldr	r0, [r6, #4]
  404828:	4b0e      	ldr	r3, [pc, #56]	; (404864 <tcp_receive+0x8a0>)
  40482a:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  40482c:	8937      	ldrh	r7, [r6, #8]
  40482e:	68f3      	ldr	r3, [r6, #12]
  404830:	8998      	ldrh	r0, [r3, #12]
  404832:	4b0a      	ldr	r3, [pc, #40]	; (40485c <tcp_receive+0x898>)
  404834:	4798      	blx	r3
  404836:	f010 0003 	ands.w	r0, r0, #3
  40483a:	bf18      	it	ne
  40483c:	2001      	movne	r0, #1
  40483e:	4407      	add	r7, r0
  404840:	4b01      	ldr	r3, [pc, #4]	; (404848 <tcp_receive+0x884>)
  404842:	801f      	strh	r7, [r3, #0]
  404844:	e7a1      	b.n	40478a <tcp_receive+0x7c6>
  404846:	bf00      	nop
  404848:	20400bea 	.word	0x20400bea
  40484c:	20400bd4 	.word	0x20400bd4
  404850:	00403201 	.word	0x00403201
  404854:	20400bb8 	.word	0x20400bb8
  404858:	20400bcc 	.word	0x20400bcc
  40485c:	00401059 	.word	0x00401059
  404860:	20400bd0 	.word	0x20400bd0
  404864:	00402dc5 	.word	0x00402dc5

00404868 <tcp_input>:
{
  404868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40486c:	b083      	sub	sp, #12
  40486e:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
  404870:	6842      	ldr	r2, [r0, #4]
  404872:	4b85      	ldr	r3, [pc, #532]	; (404a88 <tcp_input+0x220>)
  404874:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
  404876:	8943      	ldrh	r3, [r0, #10]
  404878:	2b13      	cmp	r3, #19
  40487a:	d914      	bls.n	4048a6 <tcp_input+0x3e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  40487c:	4b83      	ldr	r3, [pc, #524]	; (404a8c <tcp_input+0x224>)
  40487e:	6819      	ldr	r1, [r3, #0]
  404880:	6958      	ldr	r0, [r3, #20]
  404882:	4b83      	ldr	r3, [pc, #524]	; (404a90 <tcp_input+0x228>)
  404884:	4798      	blx	r3
  404886:	b970      	cbnz	r0, 4048a6 <tcp_input+0x3e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  404888:	4b80      	ldr	r3, [pc, #512]	; (404a8c <tcp_input+0x224>)
  40488a:	695b      	ldr	r3, [r3, #20]
  40488c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  404890:	2be0      	cmp	r3, #224	; 0xe0
  404892:	d008      	beq.n	4048a6 <tcp_input+0x3e>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  404894:	4b7f      	ldr	r3, [pc, #508]	; (404a94 <tcp_input+0x22c>)
  404896:	8922      	ldrh	r2, [r4, #8]
  404898:	1d19      	adds	r1, r3, #4
  40489a:	9100      	str	r1, [sp, #0]
  40489c:	2106      	movs	r1, #6
  40489e:	4620      	mov	r0, r4
  4048a0:	4d7d      	ldr	r5, [pc, #500]	; (404a98 <tcp_input+0x230>)
  4048a2:	47a8      	blx	r5
    if (chksum != 0) {
  4048a4:	b128      	cbz	r0, 4048b2 <tcp_input+0x4a>
  pbuf_free(p);
  4048a6:	4620      	mov	r0, r4
  4048a8:	4b7c      	ldr	r3, [pc, #496]	; (404a9c <tcp_input+0x234>)
  4048aa:	4798      	blx	r3
}
  4048ac:	b003      	add	sp, #12
  4048ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  4048b2:	4b75      	ldr	r3, [pc, #468]	; (404a88 <tcp_input+0x220>)
  4048b4:	681b      	ldr	r3, [r3, #0]
  4048b6:	8998      	ldrh	r0, [r3, #12]
  4048b8:	4b79      	ldr	r3, [pc, #484]	; (404aa0 <tcp_input+0x238>)
  4048ba:	4798      	blx	r3
  4048bc:	0a80      	lsrs	r0, r0, #10
  4048be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  4048c2:	2813      	cmp	r0, #19
  4048c4:	d9ef      	bls.n	4048a6 <tcp_input+0x3e>
  4048c6:	b280      	uxth	r0, r0
  4048c8:	8923      	ldrh	r3, [r4, #8]
  4048ca:	4283      	cmp	r3, r0
  4048cc:	d3eb      	bcc.n	4048a6 <tcp_input+0x3e>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  4048ce:	f1a0 0314 	sub.w	r3, r0, #20
  4048d2:	b29b      	uxth	r3, r3
  4048d4:	4a73      	ldr	r2, [pc, #460]	; (404aa4 <tcp_input+0x23c>)
  4048d6:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
  4048d8:	2100      	movs	r1, #0
  4048da:	4a73      	ldr	r2, [pc, #460]	; (404aa8 <tcp_input+0x240>)
  4048dc:	6011      	str	r1, [r2, #0]
  if (p->len >= hdrlen_bytes) {
  4048de:	8962      	ldrh	r2, [r4, #10]
  4048e0:	4282      	cmp	r2, r0
  4048e2:	d341      	bcc.n	404968 <tcp_input+0x100>
    tcphdr_opt1len = tcphdr_optlen;
  4048e4:	4a71      	ldr	r2, [pc, #452]	; (404aac <tcp_input+0x244>)
  4048e6:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  4048e8:	4241      	negs	r1, r0
  4048ea:	4620      	mov	r0, r4
  4048ec:	4b70      	ldr	r3, [pc, #448]	; (404ab0 <tcp_input+0x248>)
  4048ee:	4798      	blx	r3
  tcphdr->src = lwip_ntohs(tcphdr->src);
  4048f0:	4d65      	ldr	r5, [pc, #404]	; (404a88 <tcp_input+0x220>)
  4048f2:	682f      	ldr	r7, [r5, #0]
  4048f4:	8838      	ldrh	r0, [r7, #0]
  4048f6:	4e6a      	ldr	r6, [pc, #424]	; (404aa0 <tcp_input+0x238>)
  4048f8:	47b0      	blx	r6
  4048fa:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  4048fc:	682f      	ldr	r7, [r5, #0]
  4048fe:	8878      	ldrh	r0, [r7, #2]
  404900:	47b0      	blx	r6
  404902:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  404904:	682f      	ldr	r7, [r5, #0]
  404906:	6878      	ldr	r0, [r7, #4]
  404908:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 404aec <tcp_input+0x284>
  40490c:	47c0      	blx	r8
  40490e:	6078      	str	r0, [r7, #4]
  404910:	4b68      	ldr	r3, [pc, #416]	; (404ab4 <tcp_input+0x24c>)
  404912:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  404914:	682f      	ldr	r7, [r5, #0]
  404916:	68b8      	ldr	r0, [r7, #8]
  404918:	47c0      	blx	r8
  40491a:	60b8      	str	r0, [r7, #8]
  40491c:	4b66      	ldr	r3, [pc, #408]	; (404ab8 <tcp_input+0x250>)
  40491e:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  404920:	682f      	ldr	r7, [r5, #0]
  404922:	89f8      	ldrh	r0, [r7, #14]
  404924:	47b0      	blx	r6
  404926:	81f8      	strh	r0, [r7, #14]
  flags = TCPH_FLAGS(tcphdr);
  404928:	682b      	ldr	r3, [r5, #0]
  40492a:	8998      	ldrh	r0, [r3, #12]
  40492c:	47b0      	blx	r6
  40492e:	fa5f fe80 	uxtb.w	lr, r0
  404932:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
  404936:	4b61      	ldr	r3, [pc, #388]	; (404abc <tcp_input+0x254>)
  404938:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  40493a:	f01e 0303 	ands.w	r3, lr, #3
  40493e:	bf18      	it	ne
  404940:	2301      	movne	r3, #1
  404942:	8921      	ldrh	r1, [r4, #8]
  404944:	440b      	add	r3, r1
  404946:	b299      	uxth	r1, r3
  404948:	4b5d      	ldr	r3, [pc, #372]	; (404ac0 <tcp_input+0x258>)
  40494a:	8019      	strh	r1, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40494c:	4b5d      	ldr	r3, [pc, #372]	; (404ac4 <tcp_input+0x25c>)
  40494e:	6818      	ldr	r0, [r3, #0]
  404950:	2800      	cmp	r0, #0
  404952:	d07d      	beq.n	404a50 <tcp_input+0x1e8>
    if (pcb->remote_port == tcphdr->src &&
  404954:	682f      	ldr	r7, [r5, #0]
  404956:	883e      	ldrh	r6, [r7, #0]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  404958:	4b4c      	ldr	r3, [pc, #304]	; (404a8c <tcp_input+0x224>)
  40495a:	f8d3 c010 	ldr.w	ip, [r3, #16]
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  40495e:	f8d3 8014 	ldr.w	r8, [r3, #20]
  404962:	4605      	mov	r5, r0
  404964:	2200      	movs	r2, #0
  404966:	e022      	b.n	4049ae <tcp_input+0x146>
    pbuf_header(p, -TCP_HLEN);
  404968:	f06f 0113 	mvn.w	r1, #19
  40496c:	4620      	mov	r0, r4
  40496e:	4e50      	ldr	r6, [pc, #320]	; (404ab0 <tcp_input+0x248>)
  404970:	47b0      	blx	r6
    tcphdr_opt1len = p->len;
  404972:	8963      	ldrh	r3, [r4, #10]
  404974:	4a4d      	ldr	r2, [pc, #308]	; (404aac <tcp_input+0x244>)
  404976:	8013      	strh	r3, [r2, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  404978:	4a4a      	ldr	r2, [pc, #296]	; (404aa4 <tcp_input+0x23c>)
  40497a:	8815      	ldrh	r5, [r2, #0]
  40497c:	1aed      	subs	r5, r5, r3
  40497e:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  404980:	425b      	negs	r3, r3
  404982:	b219      	sxth	r1, r3
  404984:	4620      	mov	r0, r4
  404986:	47b0      	blx	r6
    if (opt2len > p->next->len) {
  404988:	6820      	ldr	r0, [r4, #0]
  40498a:	8943      	ldrh	r3, [r0, #10]
  40498c:	42ab      	cmp	r3, r5
  40498e:	d38a      	bcc.n	4048a6 <tcp_input+0x3e>
    tcphdr_opt2 = (u8_t*)p->next->payload;
  404990:	6842      	ldr	r2, [r0, #4]
  404992:	4b45      	ldr	r3, [pc, #276]	; (404aa8 <tcp_input+0x240>)
  404994:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
  404996:	4269      	negs	r1, r5
  404998:	b209      	sxth	r1, r1
  40499a:	47b0      	blx	r6
    p->tot_len -= opt2len;
  40499c:	8923      	ldrh	r3, [r4, #8]
  40499e:	1b5d      	subs	r5, r3, r5
  4049a0:	8125      	strh	r5, [r4, #8]
  4049a2:	e7a5      	b.n	4048f0 <tcp_input+0x88>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4049a4:	68eb      	ldr	r3, [r5, #12]
  4049a6:	462a      	mov	r2, r5
  4049a8:	2b00      	cmp	r3, #0
  4049aa:	d051      	beq.n	404a50 <tcp_input+0x1e8>
  4049ac:	461d      	mov	r5, r3
    if (pcb->remote_port == tcphdr->src &&
  4049ae:	8b2b      	ldrh	r3, [r5, #24]
  4049b0:	42b3      	cmp	r3, r6
  4049b2:	d1f7      	bne.n	4049a4 <tcp_input+0x13c>
  4049b4:	f8b5 9016 	ldrh.w	r9, [r5, #22]
  4049b8:	887b      	ldrh	r3, [r7, #2]
  4049ba:	4599      	cmp	r9, r3
  4049bc:	d1f2      	bne.n	4049a4 <tcp_input+0x13c>
        pcb->local_port == tcphdr->dest &&
  4049be:	686b      	ldr	r3, [r5, #4]
  4049c0:	4563      	cmp	r3, ip
  4049c2:	d1ef      	bne.n	4049a4 <tcp_input+0x13c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  4049c4:	682b      	ldr	r3, [r5, #0]
  4049c6:	4543      	cmp	r3, r8
  4049c8:	d1ec      	bne.n	4049a4 <tcp_input+0x13c>
      if (prev != NULL) {
  4049ca:	b122      	cbz	r2, 4049d6 <tcp_input+0x16e>
        prev->next = pcb->next;
  4049cc:	68eb      	ldr	r3, [r5, #12]
  4049ce:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
  4049d0:	60e8      	str	r0, [r5, #12]
        tcp_active_pcbs = pcb;
  4049d2:	4b3c      	ldr	r3, [pc, #240]	; (404ac4 <tcp_input+0x25c>)
  4049d4:	601d      	str	r5, [r3, #0]
  if (pcb == NULL) {
  4049d6:	2d00      	cmp	r5, #0
  4049d8:	d03a      	beq.n	404a50 <tcp_input+0x1e8>
    inseg.next = NULL;
  4049da:	4a3b      	ldr	r2, [pc, #236]	; (404ac8 <tcp_input+0x260>)
  4049dc:	2300      	movs	r3, #0
  4049de:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
  4049e0:	8921      	ldrh	r1, [r4, #8]
  4049e2:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
  4049e4:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
  4049e6:	60d7      	str	r7, [r2, #12]
    recv_data = NULL;
  4049e8:	4a38      	ldr	r2, [pc, #224]	; (404acc <tcp_input+0x264>)
  4049ea:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
  4049ec:	4a38      	ldr	r2, [pc, #224]	; (404ad0 <tcp_input+0x268>)
  4049ee:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
  4049f0:	4a38      	ldr	r2, [pc, #224]	; (404ad4 <tcp_input+0x26c>)
  4049f2:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
  4049f4:	f01e 0f08 	tst.w	lr, #8
  4049f8:	d003      	beq.n	404a02 <tcp_input+0x19a>
      p->flags |= PBUF_FLAG_PUSH;
  4049fa:	7b63      	ldrb	r3, [r4, #13]
  4049fc:	f043 0301 	orr.w	r3, r3, #1
  404a00:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
  404a02:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  404a04:	2b00      	cmp	r3, #0
  404a06:	f000 813f 	beq.w	404c88 <tcp_input+0x420>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  404a0a:	4628      	mov	r0, r5
  404a0c:	4b32      	ldr	r3, [pc, #200]	; (404ad8 <tcp_input+0x270>)
  404a0e:	4798      	blx	r3
  404a10:	f110 0f0d 	cmn.w	r0, #13
  404a14:	d008      	beq.n	404a28 <tcp_input+0x1c0>
  404a16:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  404a18:	2b00      	cmp	r3, #0
  404a1a:	f000 8135 	beq.w	404c88 <tcp_input+0x420>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  404a1e:	4b28      	ldr	r3, [pc, #160]	; (404ac0 <tcp_input+0x258>)
  404a20:	881b      	ldrh	r3, [r3, #0]
  404a22:	2b00      	cmp	r3, #0
  404a24:	f000 8130 	beq.w	404c88 <tcp_input+0x420>
        if (pcb->rcv_ann_wnd == 0) {
  404a28:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  404a2a:	2b00      	cmp	r3, #0
  404a2c:	f000 8128 	beq.w	404c80 <tcp_input+0x418>
    tcp_input_pcb = NULL;
  404a30:	2300      	movs	r3, #0
  404a32:	4a2a      	ldr	r2, [pc, #168]	; (404adc <tcp_input+0x274>)
  404a34:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
  404a36:	4a25      	ldr	r2, [pc, #148]	; (404acc <tcp_input+0x264>)
  404a38:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
  404a3a:	4b23      	ldr	r3, [pc, #140]	; (404ac8 <tcp_input+0x260>)
  404a3c:	6858      	ldr	r0, [r3, #4]
  404a3e:	2800      	cmp	r0, #0
  404a40:	f43f af34 	beq.w	4048ac <tcp_input+0x44>
      pbuf_free(inseg.p);
  404a44:	4b15      	ldr	r3, [pc, #84]	; (404a9c <tcp_input+0x234>)
  404a46:	4798      	blx	r3
      inseg.p = NULL;
  404a48:	2200      	movs	r2, #0
  404a4a:	4b1f      	ldr	r3, [pc, #124]	; (404ac8 <tcp_input+0x260>)
  404a4c:	605a      	str	r2, [r3, #4]
  404a4e:	e72d      	b.n	4048ac <tcp_input+0x44>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  404a50:	4b23      	ldr	r3, [pc, #140]	; (404ae0 <tcp_input+0x278>)
  404a52:	6818      	ldr	r0, [r3, #0]
  404a54:	2800      	cmp	r0, #0
  404a56:	d077      	beq.n	404b48 <tcp_input+0x2e0>
      if (pcb->remote_port == tcphdr->src &&
  404a58:	4b0b      	ldr	r3, [pc, #44]	; (404a88 <tcp_input+0x220>)
  404a5a:	681f      	ldr	r7, [r3, #0]
  404a5c:	883a      	ldrh	r2, [r7, #0]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  404a5e:	4b0b      	ldr	r3, [pc, #44]	; (404a8c <tcp_input+0x224>)
  404a60:	f8d3 8010 	ldr.w	r8, [r3, #16]
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  404a64:	f8d3 c014 	ldr.w	ip, [r3, #20]
  404a68:	e044      	b.n	404af4 <tcp_input+0x28c>
  } else if (flags & TCP_FIN) {
  404a6a:	f01e 0f01 	tst.w	lr, #1
  404a6e:	d002      	beq.n	404a76 <tcp_input+0x20e>
    pcb->tmr = tcp_ticks;
  404a70:	4b1c      	ldr	r3, [pc, #112]	; (404ae4 <tcp_input+0x27c>)
  404a72:	681b      	ldr	r3, [r3, #0]
  404a74:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
  404a76:	2900      	cmp	r1, #0
  404a78:	d062      	beq.n	404b40 <tcp_input+0x2d8>
    pcb->flags |= TF_ACK_NOW;
  404a7a:	7e83      	ldrb	r3, [r0, #26]
  404a7c:	f043 0302 	orr.w	r3, r3, #2
  404a80:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
  404a82:	4b19      	ldr	r3, [pc, #100]	; (404ae8 <tcp_input+0x280>)
  404a84:	4798      	blx	r3
  404a86:	e05b      	b.n	404b40 <tcp_input+0x2d8>
  404a88:	20400bdc 	.word	0x20400bdc
  404a8c:	20401e68 	.word	0x20401e68
  404a90:	00401ee5 	.word	0x00401ee5
  404a94:	20401e78 	.word	0x20401e78
  404a98:	00401189 	.word	0x00401189
  404a9c:	00402c19 	.word	0x00402c19
  404aa0:	00401059 	.word	0x00401059
  404aa4:	20400be8 	.word	0x20400be8
  404aa8:	20400be4 	.word	0x20400be4
  404aac:	20400be0 	.word	0x20400be0
  404ab0:	00402bf9 	.word	0x00402bf9
  404ab4:	20400bd4 	.word	0x20400bd4
  404ab8:	20400bb0 	.word	0x20400bb0
  404abc:	20400bb4 	.word	0x20400bb4
  404ac0:	20400bea 	.word	0x20400bea
  404ac4:	20404980 	.word	0x20404980
  404ac8:	20400bb8 	.word	0x20400bb8
  404acc:	20400bcc 	.word	0x20400bcc
  404ad0:	20400bd0 	.word	0x20400bd0
  404ad4:	20400bc8 	.word	0x20400bc8
  404ad8:	00403955 	.word	0x00403955
  404adc:	20404994 	.word	0x20404994
  404ae0:	20404990 	.word	0x20404990
  404ae4:	20404984 	.word	0x20404984
  404ae8:	004058f5 	.word	0x004058f5
  404aec:	0040105f 	.word	0x0040105f
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  404af0:	68c0      	ldr	r0, [r0, #12]
  404af2:	b348      	cbz	r0, 404b48 <tcp_input+0x2e0>
      if (pcb->remote_port == tcphdr->src &&
  404af4:	8b03      	ldrh	r3, [r0, #24]
  404af6:	4293      	cmp	r3, r2
  404af8:	d1fa      	bne.n	404af0 <tcp_input+0x288>
          pcb->local_port == tcphdr->dest &&
  404afa:	8ac5      	ldrh	r5, [r0, #22]
      if (pcb->remote_port == tcphdr->src &&
  404afc:	887e      	ldrh	r6, [r7, #2]
  404afe:	42ae      	cmp	r6, r5
  404b00:	d1f6      	bne.n	404af0 <tcp_input+0x288>
          pcb->local_port == tcphdr->dest &&
  404b02:	6846      	ldr	r6, [r0, #4]
  404b04:	4546      	cmp	r6, r8
  404b06:	d1f3      	bne.n	404af0 <tcp_input+0x288>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  404b08:	6806      	ldr	r6, [r0, #0]
  404b0a:	4566      	cmp	r6, ip
  404b0c:	d1f0      	bne.n	404af0 <tcp_input+0x288>
  if (flags & TCP_RST) {
  404b0e:	f01e 0f04 	tst.w	lr, #4
  404b12:	d115      	bne.n	404b40 <tcp_input+0x2d8>
  if (flags & TCP_SYN) {
  404b14:	f01e 0f02 	tst.w	lr, #2
  404b18:	d0a7      	beq.n	404a6a <tcp_input+0x202>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  404b1a:	4a8f      	ldr	r2, [pc, #572]	; (404d58 <tcp_input+0x4f0>)
  404b1c:	6816      	ldr	r6, [r2, #0]
  404b1e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  404b20:	1ab2      	subs	r2, r6, r2
  404b22:	d4a8      	bmi.n	404a76 <tcp_input+0x20e>
  404b24:	8d07      	ldrh	r7, [r0, #40]	; 0x28
  404b26:	1bd2      	subs	r2, r2, r7
  404b28:	2a00      	cmp	r2, #0
  404b2a:	dca4      	bgt.n	404a76 <tcp_input+0x20e>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  404b2c:	4a8b      	ldr	r2, [pc, #556]	; (404d5c <tcp_input+0x4f4>)
  404b2e:	9301      	str	r3, [sp, #4]
  404b30:	9500      	str	r5, [sp, #0]
  404b32:	4613      	mov	r3, r2
  404b34:	3204      	adds	r2, #4
  404b36:	4431      	add	r1, r6
  404b38:	4889      	ldr	r0, [pc, #548]	; (404d60 <tcp_input+0x4f8>)
  404b3a:	6800      	ldr	r0, [r0, #0]
  404b3c:	4d89      	ldr	r5, [pc, #548]	; (404d64 <tcp_input+0x4fc>)
  404b3e:	47a8      	blx	r5
        pbuf_free(p);
  404b40:	4620      	mov	r0, r4
  404b42:	4b89      	ldr	r3, [pc, #548]	; (404d68 <tcp_input+0x500>)
  404b44:	4798      	blx	r3
        return;
  404b46:	e6b1      	b.n	4048ac <tcp_input+0x44>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  404b48:	4b88      	ldr	r3, [pc, #544]	; (404d6c <tcp_input+0x504>)
  404b4a:	f8d3 c000 	ldr.w	ip, [r3]
  404b4e:	f1bc 0f00 	cmp.w	ip, #0
  404b52:	f000 8373 	beq.w	40523c <tcp_input+0x9d4>
      if (lpcb->local_port == tcphdr->dest) {
  404b56:	4b86      	ldr	r3, [pc, #536]	; (404d70 <tcp_input+0x508>)
  404b58:	681f      	ldr	r7, [r3, #0]
  404b5a:	8878      	ldrh	r0, [r7, #2]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  404b5c:	4b85      	ldr	r3, [pc, #532]	; (404d74 <tcp_input+0x50c>)
  404b5e:	695e      	ldr	r6, [r3, #20]
  404b60:	4665      	mov	r5, ip
  404b62:	2200      	movs	r2, #0
  404b64:	e005      	b.n	404b72 <tcp_input+0x30a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  404b66:	68eb      	ldr	r3, [r5, #12]
  404b68:	462a      	mov	r2, r5
  404b6a:	2b00      	cmp	r3, #0
  404b6c:	f000 8366 	beq.w	40523c <tcp_input+0x9d4>
  404b70:	461d      	mov	r5, r3
      if (lpcb->local_port == tcphdr->dest) {
  404b72:	8aeb      	ldrh	r3, [r5, #22]
  404b74:	4283      	cmp	r3, r0
  404b76:	d1f6      	bne.n	404b66 <tcp_input+0x2fe>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  404b78:	682b      	ldr	r3, [r5, #0]
  404b7a:	42b3      	cmp	r3, r6
  404b7c:	d002      	beq.n	404b84 <tcp_input+0x31c>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  404b7e:	b10b      	cbz	r3, 404b84 <tcp_input+0x31c>
  404b80:	2d00      	cmp	r5, #0
  404b82:	d1f0      	bne.n	404b66 <tcp_input+0x2fe>
    if (lpcb != NULL) {
  404b84:	2d00      	cmp	r5, #0
  404b86:	f000 8359 	beq.w	40523c <tcp_input+0x9d4>
      if (prev != NULL) {
  404b8a:	b12a      	cbz	r2, 404b98 <tcp_input+0x330>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  404b8c:	68eb      	ldr	r3, [r5, #12]
  404b8e:	60d3      	str	r3, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  404b90:	f8c5 c00c 	str.w	ip, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
  404b94:	4b75      	ldr	r3, [pc, #468]	; (404d6c <tcp_input+0x504>)
  404b96:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  404b98:	f01e 0f04 	tst.w	lr, #4
  404b9c:	d15e      	bne.n	404c5c <tcp_input+0x3f4>
  if (flags & TCP_ACK) {
  404b9e:	f01e 0f10 	tst.w	lr, #16
  404ba2:	d14d      	bne.n	404c40 <tcp_input+0x3d8>
  } else if (flags & TCP_SYN) {
  404ba4:	f01e 0f02 	tst.w	lr, #2
  404ba8:	d058      	beq.n	404c5c <tcp_input+0x3f4>
    npcb = tcp_alloc(pcb->prio);
  404baa:	7d68      	ldrb	r0, [r5, #21]
  404bac:	4b72      	ldr	r3, [pc, #456]	; (404d78 <tcp_input+0x510>)
  404bae:	4798      	blx	r3
    if (npcb == NULL) {
  404bb0:	4606      	mov	r6, r0
  404bb2:	2800      	cmp	r0, #0
  404bb4:	d056      	beq.n	404c64 <tcp_input+0x3fc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  404bb6:	4b6f      	ldr	r3, [pc, #444]	; (404d74 <tcp_input+0x50c>)
  404bb8:	695a      	ldr	r2, [r3, #20]
  404bba:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  404bbc:	691b      	ldr	r3, [r3, #16]
  404bbe:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
  404bc0:	8aeb      	ldrh	r3, [r5, #22]
  404bc2:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
  404bc4:	4f6a      	ldr	r7, [pc, #424]	; (404d70 <tcp_input+0x508>)
  404bc6:	683b      	ldr	r3, [r7, #0]
  404bc8:	881b      	ldrh	r3, [r3, #0]
  404bca:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
  404bcc:	2303      	movs	r3, #3
  404bce:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
  404bd0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 404d58 <tcp_input+0x4f0>
  404bd4:	f8d8 3000 	ldr.w	r3, [r8]
  404bd8:	3301      	adds	r3, #1
  404bda:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  404bdc:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
  404bde:	4b67      	ldr	r3, [pc, #412]	; (404d7c <tcp_input+0x514>)
  404be0:	4798      	blx	r3
    npcb->snd_wl2 = iss;
  404be2:	6570      	str	r0, [r6, #84]	; 0x54
    npcb->snd_nxt = iss;
  404be4:	64f0      	str	r0, [r6, #76]	; 0x4c
    npcb->lastack = iss;
  404be6:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
  404be8:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  404bea:	f8d8 3000 	ldr.w	r3, [r8]
  404bee:	3b01      	subs	r3, #1
  404bf0:	6533      	str	r3, [r6, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
  404bf2:	692b      	ldr	r3, [r5, #16]
  404bf4:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
  404bf6:	67b5      	str	r5, [r6, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  404bf8:	7a2b      	ldrb	r3, [r5, #8]
  404bfa:	f003 030c 	and.w	r3, r3, #12
  404bfe:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
  404c00:	4b5f      	ldr	r3, [pc, #380]	; (404d80 <tcp_input+0x518>)
  404c02:	681a      	ldr	r2, [r3, #0]
  404c04:	60f2      	str	r2, [r6, #12]
  404c06:	601e      	str	r6, [r3, #0]
  404c08:	4b5e      	ldr	r3, [pc, #376]	; (404d84 <tcp_input+0x51c>)
  404c0a:	4798      	blx	r3
  404c0c:	2201      	movs	r2, #1
  404c0e:	4b5e      	ldr	r3, [pc, #376]	; (404d88 <tcp_input+0x520>)
  404c10:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
  404c12:	4630      	mov	r0, r6
  404c14:	4b5d      	ldr	r3, [pc, #372]	; (404d8c <tcp_input+0x524>)
  404c16:	4798      	blx	r3
    npcb->snd_wnd = tcphdr->wnd;
  404c18:	683b      	ldr	r3, [r7, #0]
  404c1a:	89db      	ldrh	r3, [r3, #14]
  404c1c:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
  404c20:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  404c24:	1d31      	adds	r1, r6, #4
  404c26:	8e70      	ldrh	r0, [r6, #50]	; 0x32
  404c28:	4b59      	ldr	r3, [pc, #356]	; (404d90 <tcp_input+0x528>)
  404c2a:	4798      	blx	r3
  404c2c:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  404c2e:	2112      	movs	r1, #18
  404c30:	4630      	mov	r0, r6
  404c32:	4b58      	ldr	r3, [pc, #352]	; (404d94 <tcp_input+0x52c>)
  404c34:	4798      	blx	r3
    if (rc != ERR_OK) {
  404c36:	b9f0      	cbnz	r0, 404c76 <tcp_input+0x40e>
    tcp_output(npcb);
  404c38:	4630      	mov	r0, r6
  404c3a:	4b57      	ldr	r3, [pc, #348]	; (404d98 <tcp_input+0x530>)
  404c3c:	4798      	blx	r3
  404c3e:	e00d      	b.n	404c5c <tcp_input+0x3f4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  404c40:	4a46      	ldr	r2, [pc, #280]	; (404d5c <tcp_input+0x4f4>)
  404c42:	4b45      	ldr	r3, [pc, #276]	; (404d58 <tcp_input+0x4f0>)
  404c44:	6818      	ldr	r0, [r3, #0]
  404c46:	883b      	ldrh	r3, [r7, #0]
  404c48:	9301      	str	r3, [sp, #4]
  404c4a:	887b      	ldrh	r3, [r7, #2]
  404c4c:	9300      	str	r3, [sp, #0]
  404c4e:	4613      	mov	r3, r2
  404c50:	3204      	adds	r2, #4
  404c52:	4401      	add	r1, r0
  404c54:	4842      	ldr	r0, [pc, #264]	; (404d60 <tcp_input+0x4f8>)
  404c56:	6800      	ldr	r0, [r0, #0]
  404c58:	4d42      	ldr	r5, [pc, #264]	; (404d64 <tcp_input+0x4fc>)
  404c5a:	47a8      	blx	r5
      pbuf_free(p);
  404c5c:	4620      	mov	r0, r4
  404c5e:	4b42      	ldr	r3, [pc, #264]	; (404d68 <tcp_input+0x500>)
  404c60:	4798      	blx	r3
      return;
  404c62:	e623      	b.n	4048ac <tcp_input+0x44>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  404c64:	69ab      	ldr	r3, [r5, #24]
  404c66:	2b00      	cmp	r3, #0
  404c68:	d0f8      	beq.n	404c5c <tcp_input+0x3f4>
  404c6a:	f04f 32ff 	mov.w	r2, #4294967295
  404c6e:	2100      	movs	r1, #0
  404c70:	6928      	ldr	r0, [r5, #16]
  404c72:	4798      	blx	r3
  404c74:	e7f2      	b.n	404c5c <tcp_input+0x3f4>
      tcp_abandon(npcb, 0);
  404c76:	2100      	movs	r1, #0
  404c78:	4630      	mov	r0, r6
  404c7a:	4b48      	ldr	r3, [pc, #288]	; (404d9c <tcp_input+0x534>)
  404c7c:	4798      	blx	r3
  404c7e:	e7ed      	b.n	404c5c <tcp_input+0x3f4>
          tcp_send_empty_ack(pcb);
  404c80:	4628      	mov	r0, r5
  404c82:	4b47      	ldr	r3, [pc, #284]	; (404da0 <tcp_input+0x538>)
  404c84:	4798      	blx	r3
  404c86:	e6d3      	b.n	404a30 <tcp_input+0x1c8>
    tcp_input_pcb = pcb;
  404c88:	4b46      	ldr	r3, [pc, #280]	; (404da4 <tcp_input+0x53c>)
  404c8a:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  404c8c:	4b46      	ldr	r3, [pc, #280]	; (404da8 <tcp_input+0x540>)
  404c8e:	781c      	ldrb	r4, [r3, #0]
  404c90:	f014 0f04 	tst.w	r4, #4
  404c94:	d037      	beq.n	404d06 <tcp_input+0x49e>
    if (pcb->state == SYN_SENT) {
  404c96:	7d2b      	ldrb	r3, [r5, #20]
  404c98:	2b02      	cmp	r3, #2
  404c9a:	d020      	beq.n	404cde <tcp_input+0x476>
      if (seqno == pcb->rcv_nxt) {
  404c9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  404c9e:	4b2e      	ldr	r3, [pc, #184]	; (404d58 <tcp_input+0x4f0>)
  404ca0:	681b      	ldr	r3, [r3, #0]
  404ca2:	429a      	cmp	r2, r3
  404ca4:	d020      	beq.n	404ce8 <tcp_input+0x480>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  404ca6:	1a9b      	subs	r3, r3, r2
  404ca8:	d403      	bmi.n	404cb2 <tcp_input+0x44a>
  404caa:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  404cac:	1a9b      	subs	r3, r3, r2
  404cae:	2b00      	cmp	r3, #0
  404cb0:	dd24      	ble.n	404cfc <tcp_input+0x494>
      if (recv_flags & TF_RESET) {
  404cb2:	4b3e      	ldr	r3, [pc, #248]	; (404dac <tcp_input+0x544>)
  404cb4:	781b      	ldrb	r3, [r3, #0]
  404cb6:	f013 0f08 	tst.w	r3, #8
  404cba:	f000 8259 	beq.w	405170 <tcp_input+0x908>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  404cbe:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  404cc2:	b11b      	cbz	r3, 404ccc <tcp_input+0x464>
  404cc4:	f06f 010d 	mvn.w	r1, #13
  404cc8:	6928      	ldr	r0, [r5, #16]
  404cca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  404ccc:	4629      	mov	r1, r5
  404cce:	482c      	ldr	r0, [pc, #176]	; (404d80 <tcp_input+0x518>)
  404cd0:	4b37      	ldr	r3, [pc, #220]	; (404db0 <tcp_input+0x548>)
  404cd2:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  404cd4:	4629      	mov	r1, r5
  404cd6:	2001      	movs	r0, #1
  404cd8:	4b36      	ldr	r3, [pc, #216]	; (404db4 <tcp_input+0x54c>)
  404cda:	4798      	blx	r3
  404cdc:	e6a8      	b.n	404a30 <tcp_input+0x1c8>
    if (acceptable) {
  404cde:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  404ce0:	4b1f      	ldr	r3, [pc, #124]	; (404d60 <tcp_input+0x4f8>)
  404ce2:	681b      	ldr	r3, [r3, #0]
  404ce4:	429a      	cmp	r2, r3
  404ce6:	d1e4      	bne.n	404cb2 <tcp_input+0x44a>
      recv_flags |= TF_RESET;
  404ce8:	4a30      	ldr	r2, [pc, #192]	; (404dac <tcp_input+0x544>)
  404cea:	7813      	ldrb	r3, [r2, #0]
  404cec:	f043 0308 	orr.w	r3, r3, #8
  404cf0:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  404cf2:	7eab      	ldrb	r3, [r5, #26]
  404cf4:	f023 0301 	bic.w	r3, r3, #1
  404cf8:	76ab      	strb	r3, [r5, #26]
  404cfa:	e7da      	b.n	404cb2 <tcp_input+0x44a>
        tcp_ack_now(pcb);
  404cfc:	7eab      	ldrb	r3, [r5, #26]
  404cfe:	f043 0302 	orr.w	r3, r3, #2
  404d02:	76ab      	strb	r3, [r5, #26]
  404d04:	e7d5      	b.n	404cb2 <tcp_input+0x44a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  404d06:	f014 0602 	ands.w	r6, r4, #2
  404d0a:	d009      	beq.n	404d20 <tcp_input+0x4b8>
  404d0c:	7d2b      	ldrb	r3, [r5, #20]
  404d0e:	3b02      	subs	r3, #2
  404d10:	b2db      	uxtb	r3, r3
  404d12:	2b01      	cmp	r3, #1
  404d14:	d904      	bls.n	404d20 <tcp_input+0x4b8>
    tcp_ack_now(pcb);
  404d16:	7eab      	ldrb	r3, [r5, #26]
  404d18:	f043 0302 	orr.w	r3, r3, #2
  404d1c:	76ab      	strb	r3, [r5, #26]
  404d1e:	e7c8      	b.n	404cb2 <tcp_input+0x44a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  404d20:	7eab      	ldrb	r3, [r5, #26]
  404d22:	f013 0f10 	tst.w	r3, #16
  404d26:	d102      	bne.n	404d2e <tcp_input+0x4c6>
    pcb->tmr = tcp_ticks;
  404d28:	4b23      	ldr	r3, [pc, #140]	; (404db8 <tcp_input+0x550>)
  404d2a:	681b      	ldr	r3, [r3, #0]
  404d2c:	622b      	str	r3, [r5, #32]
  pcb->keep_cnt_sent = 0;
  404d2e:	2300      	movs	r3, #0
  404d30:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96
  tcp_parseopt(pcb);
  404d34:	4628      	mov	r0, r5
  404d36:	4b15      	ldr	r3, [pc, #84]	; (404d8c <tcp_input+0x524>)
  404d38:	4798      	blx	r3
  switch (pcb->state) {
  404d3a:	7d2b      	ldrb	r3, [r5, #20]
  404d3c:	3b02      	subs	r3, #2
  404d3e:	2b07      	cmp	r3, #7
  404d40:	d8b7      	bhi.n	404cb2 <tcp_input+0x44a>
  404d42:	e8df f013 	tbh	[pc, r3, lsl #1]
  404d46:	003b      	.short	0x003b
  404d48:	011300b1 	.word	0x011300b1
  404d4c:	019d0123 	.word	0x019d0123
  404d50:	01ca0113 	.word	0x01ca0113
  404d54:	01fc      	.short	0x01fc
  404d56:	bf00      	nop
  404d58:	20400bd4 	.word	0x20400bd4
  404d5c:	20401e78 	.word	0x20401e78
  404d60:	20400bb0 	.word	0x20400bb0
  404d64:	00405bfd 	.word	0x00405bfd
  404d68:	00402c19 	.word	0x00402c19
  404d6c:	20404988 	.word	0x20404988
  404d70:	20400bdc 	.word	0x20400bdc
  404d74:	20401e68 	.word	0x20401e68
  404d78:	00403c09 	.word	0x00403c09
  404d7c:	00403d45 	.word	0x00403d45
  404d80:	20404980 	.word	0x20404980
  404d84:	00406009 	.word	0x00406009
  404d88:	2040497c 	.word	0x2040497c
  404d8c:	00403e25 	.word	0x00403e25
  404d90:	00403d5d 	.word	0x00403d5d
  404d94:	00405739 	.word	0x00405739
  404d98:	004058f5 	.word	0x004058f5
  404d9c:	00403a8d 	.word	0x00403a8d
  404da0:	00405849 	.word	0x00405849
  404da4:	20404994 	.word	0x20404994
  404da8:	20400bb4 	.word	0x20400bb4
  404dac:	20400bd0 	.word	0x20400bd0
  404db0:	00403725 	.word	0x00403725
  404db4:	004029d1 	.word	0x004029d1
  404db8:	20404984 	.word	0x20404984
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  404dbc:	f004 0312 	and.w	r3, r4, #18
  404dc0:	2b12      	cmp	r3, #18
  404dc2:	d020      	beq.n	404e06 <tcp_input+0x59e>
    else if (flags & TCP_ACK) {
  404dc4:	f014 0f10 	tst.w	r4, #16
  404dc8:	f43f af73 	beq.w	404cb2 <tcp_input+0x44a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  404dcc:	4b98      	ldr	r3, [pc, #608]	; (405030 <tcp_input+0x7c8>)
  404dce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  404dd0:	4a98      	ldr	r2, [pc, #608]	; (405034 <tcp_input+0x7cc>)
  404dd2:	4999      	ldr	r1, [pc, #612]	; (405038 <tcp_input+0x7d0>)
  404dd4:	8808      	ldrh	r0, [r1, #0]
  404dd6:	4999      	ldr	r1, [pc, #612]	; (40503c <tcp_input+0x7d4>)
  404dd8:	6809      	ldr	r1, [r1, #0]
  404dda:	881c      	ldrh	r4, [r3, #0]
  404ddc:	9401      	str	r4, [sp, #4]
  404dde:	885b      	ldrh	r3, [r3, #2]
  404de0:	9300      	str	r3, [sp, #0]
  404de2:	4613      	mov	r3, r2
  404de4:	3204      	adds	r2, #4
  404de6:	4401      	add	r1, r0
  404de8:	4895      	ldr	r0, [pc, #596]	; (405040 <tcp_input+0x7d8>)
  404dea:	6800      	ldr	r0, [r0, #0]
  404dec:	4c95      	ldr	r4, [pc, #596]	; (405044 <tcp_input+0x7dc>)
  404dee:	47a0      	blx	r4
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  404df0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  404df4:	2b05      	cmp	r3, #5
  404df6:	f63f af5c 	bhi.w	404cb2 <tcp_input+0x44a>
        pcb->rtime = 0;
  404dfa:	2300      	movs	r3, #0
  404dfc:	862b      	strh	r3, [r5, #48]	; 0x30
        tcp_rexmit_rto(pcb);
  404dfe:	4628      	mov	r0, r5
  404e00:	4b91      	ldr	r3, [pc, #580]	; (405048 <tcp_input+0x7e0>)
  404e02:	4798      	blx	r3
  404e04:	e755      	b.n	404cb2 <tcp_input+0x44a>
        && (ackno == pcb->lastack + 1)) {
  404e06:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  404e08:	3201      	adds	r2, #1
  404e0a:	4b8d      	ldr	r3, [pc, #564]	; (405040 <tcp_input+0x7d8>)
  404e0c:	681b      	ldr	r3, [r3, #0]
  404e0e:	429a      	cmp	r2, r3
  404e10:	d1d8      	bne.n	404dc4 <tcp_input+0x55c>
      pcb->rcv_nxt = seqno + 1;
  404e12:	4b8a      	ldr	r3, [pc, #552]	; (40503c <tcp_input+0x7d4>)
  404e14:	681b      	ldr	r3, [r3, #0]
  404e16:	1c59      	adds	r1, r3, #1
  404e18:	6269      	str	r1, [r5, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  404e1a:	62e9      	str	r1, [r5, #44]	; 0x2c
      pcb->lastack = ackno;
  404e1c:	646a      	str	r2, [r5, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
  404e1e:	4a84      	ldr	r2, [pc, #528]	; (405030 <tcp_input+0x7c8>)
  404e20:	6812      	ldr	r2, [r2, #0]
  404e22:	89d2      	ldrh	r2, [r2, #14]
  404e24:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
  404e28:	f8a5 205e 	strh.w	r2, [r5, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  404e2c:	3b01      	subs	r3, #1
  404e2e:	652b      	str	r3, [r5, #80]	; 0x50
      pcb->state = ESTABLISHED;
  404e30:	2304      	movs	r3, #4
  404e32:	752b      	strb	r3, [r5, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  404e34:	18e9      	adds	r1, r5, r3
  404e36:	8e68      	ldrh	r0, [r5, #50]	; 0x32
  404e38:	4b84      	ldr	r3, [pc, #528]	; (40504c <tcp_input+0x7e4>)
  404e3a:	4798      	blx	r3
  404e3c:	8668      	strh	r0, [r5, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  404e3e:	0043      	lsls	r3, r0, #1
  404e40:	f241 121c 	movw	r2, #4380	; 0x111c
  404e44:	4293      	cmp	r3, r2
  404e46:	bf38      	it	cc
  404e48:	4613      	movcc	r3, r2
  404e4a:	0080      	lsls	r0, r0, #2
  404e4c:	4283      	cmp	r3, r0
  404e4e:	bf28      	it	cs
  404e50:	4603      	movcs	r3, r0
  404e52:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
      --pcb->snd_queuelen;
  404e56:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  404e5a:	3b01      	subs	r3, #1
  404e5c:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
      rseg = pcb->unacked;
  404e60:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
      if (rseg == NULL) {
  404e62:	b9c8      	cbnz	r0, 404e98 <tcp_input+0x630>
        rseg = pcb->unsent;
  404e64:	6ea8      	ldr	r0, [r5, #104]	; 0x68
        pcb->unsent = rseg->next;
  404e66:	6803      	ldr	r3, [r0, #0]
  404e68:	66ab      	str	r3, [r5, #104]	; 0x68
      tcp_seg_free(rseg);
  404e6a:	4b79      	ldr	r3, [pc, #484]	; (405050 <tcp_input+0x7e8>)
  404e6c:	4798      	blx	r3
      if (pcb->unacked == NULL) {
  404e6e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  404e70:	b9ab      	cbnz	r3, 404e9e <tcp_input+0x636>
        pcb->rtime = -1;
  404e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404e76:	862b      	strh	r3, [r5, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  404e78:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  404e7c:	b13b      	cbz	r3, 404e8e <tcp_input+0x626>
  404e7e:	2200      	movs	r2, #0
  404e80:	4629      	mov	r1, r5
  404e82:	6928      	ldr	r0, [r5, #16]
  404e84:	4798      	blx	r3
      if (err == ERR_ABRT) {
  404e86:	f110 0f0d 	cmn.w	r0, #13
  404e8a:	f43f add1 	beq.w	404a30 <tcp_input+0x1c8>
      tcp_ack_now(pcb);
  404e8e:	7eab      	ldrb	r3, [r5, #26]
  404e90:	f043 0302 	orr.w	r3, r3, #2
  404e94:	76ab      	strb	r3, [r5, #26]
  404e96:	e70c      	b.n	404cb2 <tcp_input+0x44a>
        pcb->unacked = rseg->next;
  404e98:	6803      	ldr	r3, [r0, #0]
  404e9a:	66eb      	str	r3, [r5, #108]	; 0x6c
  404e9c:	e7e5      	b.n	404e6a <tcp_input+0x602>
        pcb->rtime = 0;
  404e9e:	2300      	movs	r3, #0
  404ea0:	862b      	strh	r3, [r5, #48]	; 0x30
        pcb->nrtx = 0;
  404ea2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  404ea6:	e7e7      	b.n	404e78 <tcp_input+0x610>
    if (flags & TCP_ACK) {
  404ea8:	f014 0f10 	tst.w	r4, #16
  404eac:	d050      	beq.n	404f50 <tcp_input+0x6e8>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  404eae:	4b64      	ldr	r3, [pc, #400]	; (405040 <tcp_input+0x7d8>)
  404eb0:	6818      	ldr	r0, [r3, #0]
  404eb2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  404eb4:	43db      	mvns	r3, r3
  404eb6:	42c3      	cmn	r3, r0
  404eb8:	d439      	bmi.n	404f2e <tcp_input+0x6c6>
  404eba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  404ebc:	1ac3      	subs	r3, r0, r3
  404ebe:	2b00      	cmp	r3, #0
  404ec0:	dc35      	bgt.n	404f2e <tcp_input+0x6c6>
        pcb->state = ESTABLISHED;
  404ec2:	2304      	movs	r3, #4
  404ec4:	752b      	strb	r3, [r5, #20]
        if (pcb->listener == NULL) {
  404ec6:	6fab      	ldr	r3, [r5, #120]	; 0x78
  404ec8:	b153      	cbz	r3, 404ee0 <tcp_input+0x678>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  404eca:	699b      	ldr	r3, [r3, #24]
  404ecc:	b143      	cbz	r3, 404ee0 <tcp_input+0x678>
  404ece:	2200      	movs	r2, #0
  404ed0:	4629      	mov	r1, r5
  404ed2:	6928      	ldr	r0, [r5, #16]
  404ed4:	4798      	blx	r3
        if (err != ERR_OK) {
  404ed6:	b138      	cbz	r0, 404ee8 <tcp_input+0x680>
          if (err != ERR_ABRT) {
  404ed8:	f110 0f0d 	cmn.w	r0, #13
  404edc:	f43f ada8 	beq.w	404a30 <tcp_input+0x1c8>
            tcp_abort(pcb);
  404ee0:	4628      	mov	r0, r5
  404ee2:	4b5c      	ldr	r3, [pc, #368]	; (405054 <tcp_input+0x7ec>)
  404ee4:	4798      	blx	r3
  404ee6:	e5a3      	b.n	404a30 <tcp_input+0x1c8>
        tcp_receive(pcb);
  404ee8:	4628      	mov	r0, r5
  404eea:	4b5b      	ldr	r3, [pc, #364]	; (405058 <tcp_input+0x7f0>)
  404eec:	4798      	blx	r3
        if (recv_acked != 0) {
  404eee:	4b5b      	ldr	r3, [pc, #364]	; (40505c <tcp_input+0x7f4>)
  404ef0:	881b      	ldrh	r3, [r3, #0]
  404ef2:	b113      	cbz	r3, 404efa <tcp_input+0x692>
          recv_acked--;
  404ef4:	3b01      	subs	r3, #1
  404ef6:	4a59      	ldr	r2, [pc, #356]	; (40505c <tcp_input+0x7f4>)
  404ef8:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  404efa:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
  404efc:	0053      	lsls	r3, r2, #1
  404efe:	f241 111c 	movw	r1, #4380	; 0x111c
  404f02:	428b      	cmp	r3, r1
  404f04:	bf38      	it	cc
  404f06:	460b      	movcc	r3, r1
  404f08:	0092      	lsls	r2, r2, #2
  404f0a:	4293      	cmp	r3, r2
  404f0c:	bf28      	it	cs
  404f0e:	4613      	movcs	r3, r2
  404f10:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
  404f14:	4b52      	ldr	r3, [pc, #328]	; (405060 <tcp_input+0x7f8>)
  404f16:	781b      	ldrb	r3, [r3, #0]
  404f18:	f013 0f20 	tst.w	r3, #32
  404f1c:	f43f aec9 	beq.w	404cb2 <tcp_input+0x44a>
          tcp_ack_now(pcb);
  404f20:	7eab      	ldrb	r3, [r5, #26]
  404f22:	f043 0302 	orr.w	r3, r3, #2
  404f26:	76ab      	strb	r3, [r5, #26]
          pcb->state = CLOSE_WAIT;
  404f28:	2307      	movs	r3, #7
  404f2a:	752b      	strb	r3, [r5, #20]
  404f2c:	e6c1      	b.n	404cb2 <tcp_input+0x44a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  404f2e:	4b40      	ldr	r3, [pc, #256]	; (405030 <tcp_input+0x7c8>)
  404f30:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  404f32:	4a40      	ldr	r2, [pc, #256]	; (405034 <tcp_input+0x7cc>)
  404f34:	4940      	ldr	r1, [pc, #256]	; (405038 <tcp_input+0x7d0>)
  404f36:	880c      	ldrh	r4, [r1, #0]
  404f38:	4940      	ldr	r1, [pc, #256]	; (40503c <tcp_input+0x7d4>)
  404f3a:	6809      	ldr	r1, [r1, #0]
  404f3c:	881e      	ldrh	r6, [r3, #0]
  404f3e:	9601      	str	r6, [sp, #4]
  404f40:	885b      	ldrh	r3, [r3, #2]
  404f42:	9300      	str	r3, [sp, #0]
  404f44:	4613      	mov	r3, r2
  404f46:	3204      	adds	r2, #4
  404f48:	4421      	add	r1, r4
  404f4a:	4c3e      	ldr	r4, [pc, #248]	; (405044 <tcp_input+0x7dc>)
  404f4c:	47a0      	blx	r4
  404f4e:	e6b0      	b.n	404cb2 <tcp_input+0x44a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  404f50:	2e00      	cmp	r6, #0
  404f52:	f43f aeae 	beq.w	404cb2 <tcp_input+0x44a>
  404f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  404f58:	3b01      	subs	r3, #1
  404f5a:	4a38      	ldr	r2, [pc, #224]	; (40503c <tcp_input+0x7d4>)
  404f5c:	6812      	ldr	r2, [r2, #0]
  404f5e:	4293      	cmp	r3, r2
  404f60:	f47f aea7 	bne.w	404cb2 <tcp_input+0x44a>
      tcp_rexmit(pcb);
  404f64:	4628      	mov	r0, r5
  404f66:	4b3f      	ldr	r3, [pc, #252]	; (405064 <tcp_input+0x7fc>)
  404f68:	4798      	blx	r3
  404f6a:	e6a2      	b.n	404cb2 <tcp_input+0x44a>
    tcp_receive(pcb);
  404f6c:	4628      	mov	r0, r5
  404f6e:	4b3a      	ldr	r3, [pc, #232]	; (405058 <tcp_input+0x7f0>)
  404f70:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  404f72:	4b3b      	ldr	r3, [pc, #236]	; (405060 <tcp_input+0x7f8>)
  404f74:	781b      	ldrb	r3, [r3, #0]
  404f76:	f013 0f20 	tst.w	r3, #32
  404f7a:	f43f ae9a 	beq.w	404cb2 <tcp_input+0x44a>
      tcp_ack_now(pcb);
  404f7e:	7eab      	ldrb	r3, [r5, #26]
  404f80:	f043 0302 	orr.w	r3, r3, #2
  404f84:	76ab      	strb	r3, [r5, #26]
      pcb->state = CLOSE_WAIT;
  404f86:	2307      	movs	r3, #7
  404f88:	752b      	strb	r3, [r5, #20]
  404f8a:	e692      	b.n	404cb2 <tcp_input+0x44a>
    tcp_receive(pcb);
  404f8c:	4628      	mov	r0, r5
  404f8e:	4b32      	ldr	r3, [pc, #200]	; (405058 <tcp_input+0x7f0>)
  404f90:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  404f92:	4b33      	ldr	r3, [pc, #204]	; (405060 <tcp_input+0x7f8>)
  404f94:	781b      	ldrb	r3, [r3, #0]
  404f96:	f013 0f20 	tst.w	r3, #32
  404f9a:	d035      	beq.n	405008 <tcp_input+0x7a0>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  404f9c:	4b32      	ldr	r3, [pc, #200]	; (405068 <tcp_input+0x800>)
  404f9e:	781b      	ldrb	r3, [r3, #0]
  404fa0:	f013 0f10 	tst.w	r3, #16
  404fa4:	d029      	beq.n	404ffa <tcp_input+0x792>
  404fa6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  404fa8:	4b25      	ldr	r3, [pc, #148]	; (405040 <tcp_input+0x7d8>)
  404faa:	681b      	ldr	r3, [r3, #0]
  404fac:	429a      	cmp	r2, r3
  404fae:	d124      	bne.n	404ffa <tcp_input+0x792>
  404fb0:	6eab      	ldr	r3, [r5, #104]	; 0x68
  404fb2:	bb13      	cbnz	r3, 404ffa <tcp_input+0x792>
        tcp_ack_now(pcb);
  404fb4:	7eab      	ldrb	r3, [r5, #26]
  404fb6:	f043 0302 	orr.w	r3, r3, #2
  404fba:	76ab      	strb	r3, [r5, #26]
        tcp_pcb_purge(pcb);
  404fbc:	4628      	mov	r0, r5
  404fbe:	4b2b      	ldr	r3, [pc, #172]	; (40506c <tcp_input+0x804>)
  404fc0:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  404fc2:	4b2b      	ldr	r3, [pc, #172]	; (405070 <tcp_input+0x808>)
  404fc4:	681b      	ldr	r3, [r3, #0]
  404fc6:	42ab      	cmp	r3, r5
  404fc8:	d10f      	bne.n	404fea <tcp_input+0x782>
  404fca:	68ea      	ldr	r2, [r5, #12]
  404fcc:	4b28      	ldr	r3, [pc, #160]	; (405070 <tcp_input+0x808>)
  404fce:	601a      	str	r2, [r3, #0]
  404fd0:	2201      	movs	r2, #1
  404fd2:	4b28      	ldr	r3, [pc, #160]	; (405074 <tcp_input+0x80c>)
  404fd4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  404fd6:	230a      	movs	r3, #10
  404fd8:	752b      	strb	r3, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  404fda:	4b27      	ldr	r3, [pc, #156]	; (405078 <tcp_input+0x810>)
  404fdc:	681a      	ldr	r2, [r3, #0]
  404fde:	60ea      	str	r2, [r5, #12]
  404fe0:	601d      	str	r5, [r3, #0]
  404fe2:	4b26      	ldr	r3, [pc, #152]	; (40507c <tcp_input+0x814>)
  404fe4:	4798      	blx	r3
  404fe6:	e664      	b.n	404cb2 <tcp_input+0x44a>
        TCP_RMV_ACTIVE(pcb);
  404fe8:	4613      	mov	r3, r2
  404fea:	2b00      	cmp	r3, #0
  404fec:	d0f0      	beq.n	404fd0 <tcp_input+0x768>
  404fee:	68da      	ldr	r2, [r3, #12]
  404ff0:	42aa      	cmp	r2, r5
  404ff2:	d1f9      	bne.n	404fe8 <tcp_input+0x780>
  404ff4:	68d2      	ldr	r2, [r2, #12]
  404ff6:	60da      	str	r2, [r3, #12]
  404ff8:	e7ea      	b.n	404fd0 <tcp_input+0x768>
        tcp_ack_now(pcb);
  404ffa:	7eab      	ldrb	r3, [r5, #26]
  404ffc:	f043 0302 	orr.w	r3, r3, #2
  405000:	76ab      	strb	r3, [r5, #26]
        pcb->state = CLOSING;
  405002:	2308      	movs	r3, #8
  405004:	752b      	strb	r3, [r5, #20]
  405006:	e654      	b.n	404cb2 <tcp_input+0x44a>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  405008:	4b17      	ldr	r3, [pc, #92]	; (405068 <tcp_input+0x800>)
  40500a:	781b      	ldrb	r3, [r3, #0]
  40500c:	f013 0f10 	tst.w	r3, #16
  405010:	f43f ae4f 	beq.w	404cb2 <tcp_input+0x44a>
  405014:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  405016:	4b0a      	ldr	r3, [pc, #40]	; (405040 <tcp_input+0x7d8>)
  405018:	681b      	ldr	r3, [r3, #0]
  40501a:	429a      	cmp	r2, r3
  40501c:	f47f ae49 	bne.w	404cb2 <tcp_input+0x44a>
  405020:	6eab      	ldr	r3, [r5, #104]	; 0x68
  405022:	2b00      	cmp	r3, #0
  405024:	f47f ae45 	bne.w	404cb2 <tcp_input+0x44a>
      pcb->state = FIN_WAIT_2;
  405028:	2306      	movs	r3, #6
  40502a:	752b      	strb	r3, [r5, #20]
  40502c:	e641      	b.n	404cb2 <tcp_input+0x44a>
  40502e:	bf00      	nop
  405030:	20400bdc 	.word	0x20400bdc
  405034:	20401e78 	.word	0x20401e78
  405038:	20400bea 	.word	0x20400bea
  40503c:	20400bd4 	.word	0x20400bd4
  405040:	20400bb0 	.word	0x20400bb0
  405044:	00405bfd 	.word	0x00405bfd
  405048:	00405cb5 	.word	0x00405cb5
  40504c:	00403d5d 	.word	0x00403d5d
  405050:	00403291 	.word	0x00403291
  405054:	00403b79 	.word	0x00403b79
  405058:	00403fc5 	.word	0x00403fc5
  40505c:	20400bc8 	.word	0x20400bc8
  405060:	20400bd0 	.word	0x20400bd0
  405064:	00405cf1 	.word	0x00405cf1
  405068:	20400bb4 	.word	0x20400bb4
  40506c:	00403335 	.word	0x00403335
  405070:	20404980 	.word	0x20404980
  405074:	2040497c 	.word	0x2040497c
  405078:	20404990 	.word	0x20404990
  40507c:	00406009 	.word	0x00406009
    tcp_receive(pcb);
  405080:	4628      	mov	r0, r5
  405082:	4b7e      	ldr	r3, [pc, #504]	; (40527c <tcp_input+0xa14>)
  405084:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  405086:	4b7e      	ldr	r3, [pc, #504]	; (405280 <tcp_input+0xa18>)
  405088:	781b      	ldrb	r3, [r3, #0]
  40508a:	f013 0f20 	tst.w	r3, #32
  40508e:	f43f ae10 	beq.w	404cb2 <tcp_input+0x44a>
      tcp_ack_now(pcb);
  405092:	7eab      	ldrb	r3, [r5, #26]
  405094:	f043 0302 	orr.w	r3, r3, #2
  405098:	76ab      	strb	r3, [r5, #26]
      tcp_pcb_purge(pcb);
  40509a:	4628      	mov	r0, r5
  40509c:	4b79      	ldr	r3, [pc, #484]	; (405284 <tcp_input+0xa1c>)
  40509e:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4050a0:	4b79      	ldr	r3, [pc, #484]	; (405288 <tcp_input+0xa20>)
  4050a2:	681b      	ldr	r3, [r3, #0]
  4050a4:	42ab      	cmp	r3, r5
  4050a6:	d112      	bne.n	4050ce <tcp_input+0x866>
  4050a8:	68ea      	ldr	r2, [r5, #12]
  4050aa:	4b77      	ldr	r3, [pc, #476]	; (405288 <tcp_input+0xa20>)
  4050ac:	601a      	str	r2, [r3, #0]
  4050ae:	2201      	movs	r2, #1
  4050b0:	4b76      	ldr	r3, [pc, #472]	; (40528c <tcp_input+0xa24>)
  4050b2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  4050b4:	230a      	movs	r3, #10
  4050b6:	752b      	strb	r3, [r5, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  4050b8:	4b75      	ldr	r3, [pc, #468]	; (405290 <tcp_input+0xa28>)
  4050ba:	681a      	ldr	r2, [r3, #0]
  4050bc:	60ea      	str	r2, [r5, #12]
  4050be:	601d      	str	r5, [r3, #0]
  4050c0:	4b74      	ldr	r3, [pc, #464]	; (405294 <tcp_input+0xa2c>)
  4050c2:	4798      	blx	r3
  4050c4:	e5f5      	b.n	404cb2 <tcp_input+0x44a>
      TCP_RMV_ACTIVE(pcb);
  4050c6:	68da      	ldr	r2, [r3, #12]
  4050c8:	42aa      	cmp	r2, r5
  4050ca:	d003      	beq.n	4050d4 <tcp_input+0x86c>
  4050cc:	4613      	mov	r3, r2
  4050ce:	2b00      	cmp	r3, #0
  4050d0:	d1f9      	bne.n	4050c6 <tcp_input+0x85e>
  4050d2:	e7ec      	b.n	4050ae <tcp_input+0x846>
  4050d4:	68d2      	ldr	r2, [r2, #12]
  4050d6:	60da      	str	r2, [r3, #12]
  4050d8:	e7e9      	b.n	4050ae <tcp_input+0x846>
    tcp_receive(pcb);
  4050da:	4628      	mov	r0, r5
  4050dc:	4b67      	ldr	r3, [pc, #412]	; (40527c <tcp_input+0xa14>)
  4050de:	4798      	blx	r3
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  4050e0:	4b6d      	ldr	r3, [pc, #436]	; (405298 <tcp_input+0xa30>)
  4050e2:	781b      	ldrb	r3, [r3, #0]
  4050e4:	f013 0f10 	tst.w	r3, #16
  4050e8:	f43f ade3 	beq.w	404cb2 <tcp_input+0x44a>
  4050ec:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  4050ee:	4b6b      	ldr	r3, [pc, #428]	; (40529c <tcp_input+0xa34>)
  4050f0:	681b      	ldr	r3, [r3, #0]
  4050f2:	429a      	cmp	r2, r3
  4050f4:	f47f addd 	bne.w	404cb2 <tcp_input+0x44a>
  4050f8:	6eab      	ldr	r3, [r5, #104]	; 0x68
  4050fa:	2b00      	cmp	r3, #0
  4050fc:	f47f add9 	bne.w	404cb2 <tcp_input+0x44a>
      tcp_pcb_purge(pcb);
  405100:	4628      	mov	r0, r5
  405102:	4b60      	ldr	r3, [pc, #384]	; (405284 <tcp_input+0xa1c>)
  405104:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  405106:	4b60      	ldr	r3, [pc, #384]	; (405288 <tcp_input+0xa20>)
  405108:	681b      	ldr	r3, [r3, #0]
  40510a:	42ab      	cmp	r3, r5
  40510c:	d10f      	bne.n	40512e <tcp_input+0x8c6>
  40510e:	68ea      	ldr	r2, [r5, #12]
  405110:	4b5d      	ldr	r3, [pc, #372]	; (405288 <tcp_input+0xa20>)
  405112:	601a      	str	r2, [r3, #0]
  405114:	2201      	movs	r2, #1
  405116:	4b5d      	ldr	r3, [pc, #372]	; (40528c <tcp_input+0xa24>)
  405118:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  40511a:	230a      	movs	r3, #10
  40511c:	752b      	strb	r3, [r5, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  40511e:	4b5c      	ldr	r3, [pc, #368]	; (405290 <tcp_input+0xa28>)
  405120:	681a      	ldr	r2, [r3, #0]
  405122:	60ea      	str	r2, [r5, #12]
  405124:	601d      	str	r5, [r3, #0]
  405126:	4b5b      	ldr	r3, [pc, #364]	; (405294 <tcp_input+0xa2c>)
  405128:	4798      	blx	r3
  40512a:	e5c2      	b.n	404cb2 <tcp_input+0x44a>
      TCP_RMV_ACTIVE(pcb);
  40512c:	4613      	mov	r3, r2
  40512e:	2b00      	cmp	r3, #0
  405130:	d0f0      	beq.n	405114 <tcp_input+0x8ac>
  405132:	68da      	ldr	r2, [r3, #12]
  405134:	42aa      	cmp	r2, r5
  405136:	d1f9      	bne.n	40512c <tcp_input+0x8c4>
  405138:	68d2      	ldr	r2, [r2, #12]
  40513a:	60da      	str	r2, [r3, #12]
  40513c:	e7ea      	b.n	405114 <tcp_input+0x8ac>
    tcp_receive(pcb);
  40513e:	4628      	mov	r0, r5
  405140:	4b4e      	ldr	r3, [pc, #312]	; (40527c <tcp_input+0xa14>)
  405142:	4798      	blx	r3
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  405144:	4b54      	ldr	r3, [pc, #336]	; (405298 <tcp_input+0xa30>)
  405146:	781b      	ldrb	r3, [r3, #0]
  405148:	f013 0f10 	tst.w	r3, #16
  40514c:	f43f adb1 	beq.w	404cb2 <tcp_input+0x44a>
  405150:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  405152:	4b52      	ldr	r3, [pc, #328]	; (40529c <tcp_input+0xa34>)
  405154:	681b      	ldr	r3, [r3, #0]
  405156:	429a      	cmp	r2, r3
  405158:	f47f adab 	bne.w	404cb2 <tcp_input+0x44a>
  40515c:	6eab      	ldr	r3, [r5, #104]	; 0x68
  40515e:	2b00      	cmp	r3, #0
  405160:	f47f ada7 	bne.w	404cb2 <tcp_input+0x44a>
      recv_flags |= TF_CLOSED;
  405164:	4a46      	ldr	r2, [pc, #280]	; (405280 <tcp_input+0xa18>)
  405166:	7813      	ldrb	r3, [r2, #0]
  405168:	f043 0310 	orr.w	r3, r3, #16
  40516c:	7013      	strb	r3, [r2, #0]
  40516e:	e5a0      	b.n	404cb2 <tcp_input+0x44a>
        if (recv_acked > 0) {
  405170:	4b4b      	ldr	r3, [pc, #300]	; (4052a0 <tcp_input+0xa38>)
  405172:	881a      	ldrh	r2, [r3, #0]
  405174:	b15a      	cbz	r2, 40518e <tcp_input+0x926>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  405176:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  405178:	b133      	cbz	r3, 405188 <tcp_input+0x920>
  40517a:	4629      	mov	r1, r5
  40517c:	6928      	ldr	r0, [r5, #16]
  40517e:	4798      	blx	r3
            if (err == ERR_ABRT) {
  405180:	f110 0f0d 	cmn.w	r0, #13
  405184:	f43f ac54 	beq.w	404a30 <tcp_input+0x1c8>
          recv_acked = 0;
  405188:	2200      	movs	r2, #0
  40518a:	4b45      	ldr	r3, [pc, #276]	; (4052a0 <tcp_input+0xa38>)
  40518c:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
  40518e:	4628      	mov	r0, r5
  405190:	4b44      	ldr	r3, [pc, #272]	; (4052a4 <tcp_input+0xa3c>)
  405192:	4798      	blx	r3
  405194:	2800      	cmp	r0, #0
  405196:	f47f ac4b 	bne.w	404a30 <tcp_input+0x1c8>
        if (recv_data != NULL) {
  40519a:	4b43      	ldr	r3, [pc, #268]	; (4052a8 <tcp_input+0xa40>)
  40519c:	681a      	ldr	r2, [r3, #0]
  40519e:	b19a      	cbz	r2, 4051c8 <tcp_input+0x960>
          if (pcb->flags & TF_RXCLOSED) {
  4051a0:	7eab      	ldrb	r3, [r5, #26]
  4051a2:	f013 0f10 	tst.w	r3, #16
  4051a6:	d127      	bne.n	4051f8 <tcp_input+0x990>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  4051a8:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  4051ac:	2c00      	cmp	r4, #0
  4051ae:	d02a      	beq.n	405206 <tcp_input+0x99e>
  4051b0:	2300      	movs	r3, #0
  4051b2:	4629      	mov	r1, r5
  4051b4:	6928      	ldr	r0, [r5, #16]
  4051b6:	47a0      	blx	r4
          if (err == ERR_ABRT) {
  4051b8:	f110 0f0d 	cmn.w	r0, #13
  4051bc:	f43f ac38 	beq.w	404a30 <tcp_input+0x1c8>
          if (err != ERR_OK) {
  4051c0:	b110      	cbz	r0, 4051c8 <tcp_input+0x960>
            pcb->refused_data = recv_data;
  4051c2:	4b39      	ldr	r3, [pc, #228]	; (4052a8 <tcp_input+0xa40>)
  4051c4:	681b      	ldr	r3, [r3, #0]
  4051c6:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
  4051c8:	4b2d      	ldr	r3, [pc, #180]	; (405280 <tcp_input+0xa18>)
  4051ca:	781b      	ldrb	r3, [r3, #0]
  4051cc:	f013 0f20 	tst.w	r3, #32
  4051d0:	d005      	beq.n	4051de <tcp_input+0x976>
          if (pcb->refused_data != NULL) {
  4051d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  4051d4:	b1eb      	cbz	r3, 405212 <tcp_input+0x9aa>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  4051d6:	7b5a      	ldrb	r2, [r3, #13]
  4051d8:	f042 0220 	orr.w	r2, r2, #32
  4051dc:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
  4051de:	2200      	movs	r2, #0
  4051e0:	4b32      	ldr	r3, [pc, #200]	; (4052ac <tcp_input+0xa44>)
  4051e2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
  4051e4:	4628      	mov	r0, r5
  4051e6:	4b2f      	ldr	r3, [pc, #188]	; (4052a4 <tcp_input+0xa3c>)
  4051e8:	4798      	blx	r3
  4051ea:	2800      	cmp	r0, #0
  4051ec:	f47f ac20 	bne.w	404a30 <tcp_input+0x1c8>
        tcp_output(pcb);
  4051f0:	4628      	mov	r0, r5
  4051f2:	4b2f      	ldr	r3, [pc, #188]	; (4052b0 <tcp_input+0xa48>)
  4051f4:	4798      	blx	r3
  4051f6:	e41b      	b.n	404a30 <tcp_input+0x1c8>
            pbuf_free(recv_data);
  4051f8:	4610      	mov	r0, r2
  4051fa:	4b2e      	ldr	r3, [pc, #184]	; (4052b4 <tcp_input+0xa4c>)
  4051fc:	4798      	blx	r3
            tcp_abort(pcb);
  4051fe:	4628      	mov	r0, r5
  405200:	4b2d      	ldr	r3, [pc, #180]	; (4052b8 <tcp_input+0xa50>)
  405202:	4798      	blx	r3
            goto aborted;
  405204:	e414      	b.n	404a30 <tcp_input+0x1c8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  405206:	2300      	movs	r3, #0
  405208:	4629      	mov	r1, r5
  40520a:	4618      	mov	r0, r3
  40520c:	4c2b      	ldr	r4, [pc, #172]	; (4052bc <tcp_input+0xa54>)
  40520e:	47a0      	blx	r4
  405210:	e7d2      	b.n	4051b8 <tcp_input+0x950>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  405212:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  405214:	f640 3268 	movw	r2, #2920	; 0xb68
  405218:	4293      	cmp	r3, r2
  40521a:	d001      	beq.n	405220 <tcp_input+0x9b8>
              pcb->rcv_wnd++;
  40521c:	3301      	adds	r3, #1
  40521e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
  405220:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  405224:	2c00      	cmp	r4, #0
  405226:	d0da      	beq.n	4051de <tcp_input+0x976>
  405228:	2300      	movs	r3, #0
  40522a:	461a      	mov	r2, r3
  40522c:	4629      	mov	r1, r5
  40522e:	6928      	ldr	r0, [r5, #16]
  405230:	47a0      	blx	r4
            if (err == ERR_ABRT) {
  405232:	f110 0f0d 	cmn.w	r0, #13
  405236:	d1d2      	bne.n	4051de <tcp_input+0x976>
  405238:	f7ff bbfa 	b.w	404a30 <tcp_input+0x1c8>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  40523c:	4b20      	ldr	r3, [pc, #128]	; (4052c0 <tcp_input+0xa58>)
  40523e:	681b      	ldr	r3, [r3, #0]
  405240:	8998      	ldrh	r0, [r3, #12]
  405242:	4b20      	ldr	r3, [pc, #128]	; (4052c4 <tcp_input+0xa5c>)
  405244:	4798      	blx	r3
  405246:	f010 0f04 	tst.w	r0, #4
  40524a:	d111      	bne.n	405270 <tcp_input+0xa08>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  40524c:	4b1c      	ldr	r3, [pc, #112]	; (4052c0 <tcp_input+0xa58>)
  40524e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  405250:	4a1d      	ldr	r2, [pc, #116]	; (4052c8 <tcp_input+0xa60>)
  405252:	491e      	ldr	r1, [pc, #120]	; (4052cc <tcp_input+0xa64>)
  405254:	8808      	ldrh	r0, [r1, #0]
  405256:	491e      	ldr	r1, [pc, #120]	; (4052d0 <tcp_input+0xa68>)
  405258:	6809      	ldr	r1, [r1, #0]
  40525a:	881d      	ldrh	r5, [r3, #0]
  40525c:	9501      	str	r5, [sp, #4]
  40525e:	885b      	ldrh	r3, [r3, #2]
  405260:	9300      	str	r3, [sp, #0]
  405262:	4613      	mov	r3, r2
  405264:	3204      	adds	r2, #4
  405266:	4401      	add	r1, r0
  405268:	480c      	ldr	r0, [pc, #48]	; (40529c <tcp_input+0xa34>)
  40526a:	6800      	ldr	r0, [r0, #0]
  40526c:	4d19      	ldr	r5, [pc, #100]	; (4052d4 <tcp_input+0xa6c>)
  40526e:	47a8      	blx	r5
    pbuf_free(p);
  405270:	4620      	mov	r0, r4
  405272:	4b10      	ldr	r3, [pc, #64]	; (4052b4 <tcp_input+0xa4c>)
  405274:	4798      	blx	r3
  405276:	f7ff bb19 	b.w	4048ac <tcp_input+0x44>
  40527a:	bf00      	nop
  40527c:	00403fc5 	.word	0x00403fc5
  405280:	20400bd0 	.word	0x20400bd0
  405284:	00403335 	.word	0x00403335
  405288:	20404980 	.word	0x20404980
  40528c:	2040497c 	.word	0x2040497c
  405290:	20404990 	.word	0x20404990
  405294:	00406009 	.word	0x00406009
  405298:	20400bb4 	.word	0x20400bb4
  40529c:	20400bb0 	.word	0x20400bb0
  4052a0:	20400bc8 	.word	0x20400bc8
  4052a4:	00403eb1 	.word	0x00403eb1
  4052a8:	20400bcc 	.word	0x20400bcc
  4052ac:	20404994 	.word	0x20404994
  4052b0:	004058f5 	.word	0x004058f5
  4052b4:	00402c19 	.word	0x00402c19
  4052b8:	00403b79 	.word	0x00403b79
  4052bc:	00403925 	.word	0x00403925
  4052c0:	20400bdc 	.word	0x20400bdc
  4052c4:	00401059 	.word	0x00401059
  4052c8:	20401e78 	.word	0x20401e78
  4052cc:	20400bea 	.word	0x20400bea
  4052d0:	20400bd4 	.word	0x20400bd4
  4052d4:	00405bfd 	.word	0x00405bfd

004052d8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
  4052d8:	4a02      	ldr	r2, [pc, #8]	; (4052e4 <tcp_trigger_input_pcb_close+0xc>)
  4052da:	7813      	ldrb	r3, [r2, #0]
  4052dc:	f043 0310 	orr.w	r3, r3, #16
  4052e0:	7013      	strb	r3, [r2, #0]
  4052e2:	4770      	bx	lr
  4052e4:	20400bd0 	.word	0x20400bd0

004052e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  4052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4052ec:	4680      	mov	r8, r0
  4052ee:	460f      	mov	r7, r1
  4052f0:	4616      	mov	r6, r2
  4052f2:	4699      	mov	r9, r3
  4052f4:	f89d a020 	ldrb.w	sl, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  4052f8:	2003      	movs	r0, #3
  4052fa:	4b24      	ldr	r3, [pc, #144]	; (40538c <tcp_create_segment+0xa4>)
  4052fc:	4798      	blx	r3
  4052fe:	4604      	mov	r4, r0
  405300:	2800      	cmp	r0, #0
  405302:	d039      	beq.n	405378 <tcp_create_segment+0x90>
  405304:	f00a 0501 	and.w	r5, sl, #1
  405308:	00ad      	lsls	r5, r5, #2
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  40530a:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
  40530e:	2300      	movs	r3, #0
  405310:	6003      	str	r3, [r0, #0]
  seg->p = p;
  405312:	6047      	str	r7, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
  405314:	893b      	ldrh	r3, [r7, #8]
  405316:	1b5b      	subs	r3, r3, r5
  405318:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  40531a:	2114      	movs	r1, #20
  40531c:	4638      	mov	r0, r7
  40531e:	4b1c      	ldr	r3, [pc, #112]	; (405390 <tcp_create_segment+0xa8>)
  405320:	4798      	blx	r3
  405322:	bb68      	cbnz	r0, 405380 <tcp_create_segment+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  405324:	6863      	ldr	r3, [r4, #4]
  405326:	f8d3 a004 	ldr.w	sl, [r3, #4]
  40532a:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  40532e:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  405332:	4f18      	ldr	r7, [pc, #96]	; (405394 <tcp_create_segment+0xac>)
  405334:	47b8      	blx	r7
  405336:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  40533a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  40533e:	f8b8 0018 	ldrh.w	r0, [r8, #24]
  405342:	47b8      	blx	r7
  405344:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  405348:	f8d4 800c 	ldr.w	r8, [r4, #12]
  40534c:	4648      	mov	r0, r9
  40534e:	4b12      	ldr	r3, [pc, #72]	; (405398 <tcp_create_segment+0xb0>)
  405350:	4798      	blx	r3
  405352:	f8c8 0004 	str.w	r0, [r8, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  405356:	f8d4 800c 	ldr.w	r8, [r4, #12]
  40535a:	08ad      	lsrs	r5, r5, #2
  40535c:	3505      	adds	r5, #5
  40535e:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  405362:	b2a8      	uxth	r0, r5
  405364:	47b8      	blx	r7
  405366:	f8a8 000c 	strh.w	r0, [r8, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  40536a:	68e3      	ldr	r3, [r4, #12]
  40536c:	2200      	movs	r2, #0
  40536e:	749a      	strb	r2, [r3, #18]
  405370:	74da      	strb	r2, [r3, #19]
  return seg;
}
  405372:	4620      	mov	r0, r4
  405374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
  405378:	4638      	mov	r0, r7
  40537a:	4b08      	ldr	r3, [pc, #32]	; (40539c <tcp_create_segment+0xb4>)
  40537c:	4798      	blx	r3
    return NULL;
  40537e:	e7f8      	b.n	405372 <tcp_create_segment+0x8a>
    tcp_seg_free(seg);
  405380:	4620      	mov	r0, r4
  405382:	4b07      	ldr	r3, [pc, #28]	; (4053a0 <tcp_create_segment+0xb8>)
  405384:	4798      	blx	r3
    return NULL;
  405386:	2400      	movs	r4, #0
  405388:	e7f3      	b.n	405372 <tcp_create_segment+0x8a>
  40538a:	bf00      	nop
  40538c:	004029b1 	.word	0x004029b1
  405390:	00402bf9 	.word	0x00402bf9
  405394:	00401059 	.word	0x00401059
  405398:	0040105f 	.word	0x0040105f
  40539c:	00402c19 	.word	0x00402c19
  4053a0:	00403291 	.word	0x00403291

004053a4 <tcp_output_alloc_header>:
{
  4053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4053a8:	4606      	mov	r6, r0
  4053aa:	460c      	mov	r4, r1
  4053ac:	4699      	mov	r9, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  4053ae:	3214      	adds	r2, #20
  4053b0:	4411      	add	r1, r2
  4053b2:	2200      	movs	r2, #0
  4053b4:	b289      	uxth	r1, r1
  4053b6:	2001      	movs	r0, #1
  4053b8:	4b14      	ldr	r3, [pc, #80]	; (40540c <tcp_output_alloc_header+0x68>)
  4053ba:	4798      	blx	r3
  if (p != NULL) {
  4053bc:	4680      	mov	r8, r0
  4053be:	b310      	cbz	r0, 405406 <tcp_output_alloc_header+0x62>
    tcphdr = (struct tcp_hdr *)p->payload;
  4053c0:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
  4053c2:	8af0      	ldrh	r0, [r6, #22]
  4053c4:	4f12      	ldr	r7, [pc, #72]	; (405410 <tcp_output_alloc_header+0x6c>)
  4053c6:	47b8      	blx	r7
  4053c8:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  4053ca:	8b30      	ldrh	r0, [r6, #24]
  4053cc:	47b8      	blx	r7
  4053ce:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
  4053d0:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  4053d4:	6a70      	ldr	r0, [r6, #36]	; 0x24
  4053d6:	4b0f      	ldr	r3, [pc, #60]	; (405414 <tcp_output_alloc_header+0x70>)
  4053d8:	4798      	blx	r3
  4053da:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  4053dc:	08a0      	lsrs	r0, r4, #2
  4053de:	3005      	adds	r0, #5
  4053e0:	0300      	lsls	r0, r0, #12
  4053e2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  4053e6:	f040 0010 	orr.w	r0, r0, #16
  4053ea:	47b8      	blx	r7
  4053ec:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  4053ee:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
  4053f0:	47b8      	blx	r7
  4053f2:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
  4053f4:	2300      	movs	r3, #0
  4053f6:	742b      	strb	r3, [r5, #16]
  4053f8:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
  4053fa:	74ab      	strb	r3, [r5, #18]
  4053fc:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  4053fe:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
  405400:	6a73      	ldr	r3, [r6, #36]	; 0x24
  405402:	4413      	add	r3, r2
  405404:	62f3      	str	r3, [r6, #44]	; 0x2c
}
  405406:	4640      	mov	r0, r8
  405408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40540c:	00402c71 	.word	0x00402c71
  405410:	00401059 	.word	0x00401059
  405414:	0040105f 	.word	0x0040105f

00405418 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  405418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40541c:	b08b      	sub	sp, #44	; 0x2c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  40541e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  405420:	f8b0 a05e 	ldrh.w	sl, [r0, #94]	; 0x5e
  405424:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
  405428:	45a2      	cmp	sl, r4
  40542a:	bf28      	it	cs
  40542c:	46a2      	movcs	sl, r4
  mss_local = mss_local ? mss_local : pcb->mss;
  40542e:	f1ba 0f00 	cmp.w	sl, #0
  405432:	bf08      	it	eq
  405434:	46a2      	moveq	sl, r4
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  405436:	2900      	cmp	r1, #0
  405438:	f000 8147 	beq.w	4056ca <tcp_write+0x2b2>
  40543c:	460d      	mov	r5, r1
  if ((pcb->state != ESTABLISHED) &&
  40543e:	7d04      	ldrb	r4, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
  405440:	1ea1      	subs	r1, r4, #2
  405442:	b2c9      	uxtb	r1, r1
      (pcb->state != SYN_SENT) &&
  405444:	2902      	cmp	r1, #2
  405446:	d902      	bls.n	40544e <tcp_write+0x36>
  405448:	2c07      	cmp	r4, #7
  40544a:	f040 8148 	bne.w	4056de <tcp_write+0x2c6>
  40544e:	9505      	str	r5, [sp, #20]
  405450:	9309      	str	r3, [sp, #36]	; 0x24
  405452:	4693      	mov	fp, r2
  405454:	4681      	mov	r9, r0
  } else if (len == 0) {
  405456:	2a00      	cmp	r2, #0
  405458:	f000 8151 	beq.w	4056fe <tcp_write+0x2e6>
  if (len > pcb->snd_buf) {
  40545c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  405460:	4293      	cmp	r3, r2
  405462:	d30c      	bcc.n	40547e <tcp_write+0x66>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  405464:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  405468:	2b07      	cmp	r3, #7
  40546a:	d80f      	bhi.n	40548c <tcp_write+0x74>

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
  40546c:	f8b0 7062 	ldrh.w	r7, [r0, #98]	; 0x62
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  405470:	6e83      	ldr	r3, [r0, #104]	; 0x68
  405472:	9306      	str	r3, [sp, #24]
  405474:	2b00      	cmp	r3, #0
  405476:	f000 8135 	beq.w	4056e4 <tcp_write+0x2cc>
  40547a:	9a06      	ldr	r2, [sp, #24]
  40547c:	e00e      	b.n	40549c <tcp_write+0x84>
    pcb->flags |= TF_NAGLEMEMERR;
  40547e:	7e83      	ldrb	r3, [r0, #26]
  405480:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405484:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
  405486:	f04f 30ff 	mov.w	r0, #4294967295
  40548a:	e07d      	b.n	405588 <tcp_write+0x170>
    pcb->flags |= TF_NAGLEMEMERR;
  40548c:	7e83      	ldrb	r3, [r0, #26]
  40548e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405492:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
  405494:	f04f 30ff 	mov.w	r0, #4294967295
  405498:	e076      	b.n	405588 <tcp_write+0x170>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  40549a:	461a      	mov	r2, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  40549c:	6813      	ldr	r3, [r2, #0]
  40549e:	2b00      	cmp	r3, #0
  4054a0:	d1fb      	bne.n	40549a <tcp_write+0x82>
  4054a2:	4616      	mov	r6, r2
  4054a4:	9206      	str	r2, [sp, #24]
  4054a6:	4698      	mov	r8, r3

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  4054a8:	7a91      	ldrb	r1, [r2, #10]
  4054aa:	f001 0301 	and.w	r3, r1, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
  4054ae:	8912      	ldrh	r2, [r2, #8]
  4054b0:	ebaa 0102 	sub.w	r1, sl, r2
  4054b4:	eba1 0183 	sub.w	r1, r1, r3, lsl #2
  4054b8:	b289      	uxth	r1, r1
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  4054ba:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  4054be:	9307      	str	r3, [sp, #28]
    if (oversize > 0) {
  4054c0:	461c      	mov	r4, r3
  4054c2:	b1f3      	cbz	r3, 405502 <tcp_write+0xea>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
      seg = last_unsent;
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  4054c4:	455b      	cmp	r3, fp
  4054c6:	bf28      	it	cs
  4054c8:	465b      	movcs	r3, fp
  4054ca:	428b      	cmp	r3, r1
  4054cc:	bfa8      	it	ge
  4054ce:	460b      	movge	r3, r1
      pos += oversize_used;
      oversize -= oversize_used;
  4054d0:	1ae4      	subs	r4, r4, r3
  4054d2:	b2a0      	uxth	r0, r4
  4054d4:	9003      	str	r0, [sp, #12]
      space -= oversize_used;
  4054d6:	1ac9      	subs	r1, r1, r3
  4054d8:	b289      	uxth	r1, r1
      pos += oversize_used;
  4054da:	9307      	str	r3, [sp, #28]
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  4054dc:	9807      	ldr	r0, [sp, #28]
  4054de:	2900      	cmp	r1, #0
  4054e0:	bf18      	it	ne
  4054e2:	4558      	cmpne	r0, fp
  4054e4:	d200      	bcs.n	4054e8 <tcp_write+0xd0>
  4054e6:	b982      	cbnz	r2, 40550a <tcp_write+0xf2>
  4054e8:	9d07      	ldr	r5, [sp, #28]
  struct pbuf *concat_p = NULL;
  4054ea:	2300      	movs	r3, #0
  4054ec:	9308      	str	r3, [sp, #32]
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  4054ee:	45ab      	cmp	fp, r5
  4054f0:	f240 8095 	bls.w	40561e <tcp_write+0x206>
  4054f4:	f04f 0800 	mov.w	r8, #0
  4054f8:	f8cd 800c 	str.w	r8, [sp, #12]
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p);
  4054fc:	f8cd 8010 	str.w	r8, [sp, #16]
  405500:	e04b      	b.n	40559a <tcp_write+0x182>
    oversize = pcb->unsent_oversize;
  405502:	9b07      	ldr	r3, [sp, #28]
  405504:	9303      	str	r3, [sp, #12]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  405506:	4646      	mov	r6, r8
  405508:	e7e8      	b.n	4054dc <tcp_write+0xc4>
      u16_t seglen = LWIP_MIN(space, len - pos);
  40550a:	4606      	mov	r6, r0
  40550c:	ebab 0500 	sub.w	r5, fp, r0
  405510:	428d      	cmp	r5, r1
  405512:	bfa8      	it	ge
  405514:	460d      	movge	r5, r1
  405516:	b2ac      	uxth	r4, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  405518:	2200      	movs	r2, #0
  40551a:	2004      	movs	r0, #4
  40551c:	4b7e      	ldr	r3, [pc, #504]	; (405718 <tcp_write+0x300>)
  40551e:	4798      	blx	r3
  if (p == NULL) {
  405520:	9008      	str	r0, [sp, #32]
  405522:	2800      	cmp	r0, #0
  405524:	f000 80e4 	beq.w	4056f0 <tcp_write+0x2d8>
  *oversize = p->len - length;
  405528:	8943      	ldrh	r3, [r0, #10]
  40552a:	1b1b      	subs	r3, r3, r4
  40552c:	b29b      	uxth	r3, r3
  40552e:	9303      	str	r3, [sp, #12]
  p->len = p->tot_len = length;
  405530:	8104      	strh	r4, [r0, #8]
  405532:	8144      	strh	r4, [r0, #10]
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  405534:	4622      	mov	r2, r4
  405536:	9905      	ldr	r1, [sp, #20]
  405538:	4635      	mov	r5, r6
  40553a:	4431      	add	r1, r6
  40553c:	4606      	mov	r6, r0
  40553e:	6840      	ldr	r0, [r0, #4]
  405540:	4b76      	ldr	r3, [pc, #472]	; (40571c <tcp_write+0x304>)
  405542:	4798      	blx	r3
        queuelen += pbuf_clen(concat_p);
  405544:	4630      	mov	r0, r6
  405546:	4b76      	ldr	r3, [pc, #472]	; (405720 <tcp_write+0x308>)
  405548:	4798      	blx	r3
  40554a:	4407      	add	r7, r0
  40554c:	b2bf      	uxth	r7, r7
      pos += seglen;
  40554e:	442c      	add	r4, r5
  405550:	b2a5      	uxth	r5, r4
  405552:	9e06      	ldr	r6, [sp, #24]
  405554:	e7cb      	b.n	4054ee <tcp_write+0xd6>
  405556:	f8dd 8010 	ldr.w	r8, [sp, #16]
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  40555a:	4630      	mov	r0, r6
  40555c:	4b71      	ldr	r3, [pc, #452]	; (405724 <tcp_write+0x30c>)
  40555e:	4798      	blx	r3
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  405560:	f899 301a 	ldrb.w	r3, [r9, #26]
  405564:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405568:	f889 301a 	strb.w	r3, [r9, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  40556c:	9b08      	ldr	r3, [sp, #32]
  40556e:	b113      	cbz	r3, 405576 <tcp_write+0x15e>
    pbuf_free(concat_p);
  405570:	4618      	mov	r0, r3
  405572:	4b6c      	ldr	r3, [pc, #432]	; (405724 <tcp_write+0x30c>)
  405574:	4798      	blx	r3
  }
  if (queue != NULL) {
  405576:	f1b8 0f00 	cmp.w	r8, #0
  40557a:	f000 80ad 	beq.w	4056d8 <tcp_write+0x2c0>
    tcp_segs_free(queue);
  40557e:	4640      	mov	r0, r8
  405580:	4b69      	ldr	r3, [pc, #420]	; (405728 <tcp_write+0x310>)
  405582:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  405584:	f04f 30ff 	mov.w	r0, #4294967295
}
  405588:	b00b      	add	sp, #44	; 0x2c
  40558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  40558e:	9004      	str	r0, [sp, #16]
    pos += seglen;
  405590:	4425      	add	r5, r4
  405592:	b2ad      	uxth	r5, r5
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  405594:	9603      	str	r6, [sp, #12]
  while (pos < len) {
  405596:	45ab      	cmp	fp, r5
  405598:	d932      	bls.n	405600 <tcp_write+0x1e8>
    u16_t left = len - pos;
  40559a:	ebab 0405 	sub.w	r4, fp, r5
    u16_t seglen = LWIP_MIN(left, max_len);
  40559e:	b2a4      	uxth	r4, r4
  4055a0:	4554      	cmp	r4, sl
  4055a2:	bf28      	it	cs
  4055a4:	4654      	movcs	r4, sl
  4055a6:	b2a4      	uxth	r4, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  4055a8:	2200      	movs	r2, #0
  4055aa:	4651      	mov	r1, sl
  4055ac:	4610      	mov	r0, r2
  4055ae:	4b5a      	ldr	r3, [pc, #360]	; (405718 <tcp_write+0x300>)
  4055b0:	4798      	blx	r3
  if (p == NULL) {
  4055b2:	4606      	mov	r6, r0
  4055b4:	2800      	cmp	r0, #0
  4055b6:	f000 8082 	beq.w	4056be <tcp_write+0x2a6>
  *oversize = p->len - length;
  4055ba:	f8b0 800a 	ldrh.w	r8, [r0, #10]
  p->len = p->tot_len = length;
  4055be:	8104      	strh	r4, [r0, #8]
  4055c0:	8144      	strh	r4, [r0, #10]
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  4055c2:	4622      	mov	r2, r4
  4055c4:	9b05      	ldr	r3, [sp, #20]
  4055c6:	1959      	adds	r1, r3, r5
  4055c8:	6840      	ldr	r0, [r0, #4]
  4055ca:	4b54      	ldr	r3, [pc, #336]	; (40571c <tcp_write+0x304>)
  4055cc:	4798      	blx	r3
    queuelen += pbuf_clen(p);
  4055ce:	4630      	mov	r0, r6
  4055d0:	4b53      	ldr	r3, [pc, #332]	; (405720 <tcp_write+0x308>)
  4055d2:	4798      	blx	r3
  4055d4:	4407      	add	r7, r0
  4055d6:	b2bf      	uxth	r7, r7
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  4055d8:	2f08      	cmp	r7, #8
  4055da:	d8bc      	bhi.n	405556 <tcp_write+0x13e>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  4055dc:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  4055e0:	2200      	movs	r2, #0
  4055e2:	9200      	str	r2, [sp, #0]
  4055e4:	442b      	add	r3, r5
  4055e6:	4631      	mov	r1, r6
  4055e8:	4648      	mov	r0, r9
  4055ea:	4e50      	ldr	r6, [pc, #320]	; (40572c <tcp_write+0x314>)
  4055ec:	47b0      	blx	r6
  4055ee:	4606      	mov	r6, r0
  4055f0:	2800      	cmp	r0, #0
  4055f2:	d067      	beq.n	4056c4 <tcp_write+0x2ac>
    if (queue == NULL) {
  4055f4:	9b04      	ldr	r3, [sp, #16]
  4055f6:	2b00      	cmp	r3, #0
  4055f8:	d0c9      	beq.n	40558e <tcp_write+0x176>
      prev_seg->next = seg;
  4055fa:	9b03      	ldr	r3, [sp, #12]
  4055fc:	6018      	str	r0, [r3, #0]
  4055fe:	e7c7      	b.n	405590 <tcp_write+0x178>
  405600:	4643      	mov	r3, r8
  405602:	f8dd 8010 	ldr.w	r8, [sp, #16]
  *oversize = p->len - length;
  405606:	1b1c      	subs	r4, r3, r4
  405608:	b2a3      	uxth	r3, r4
  40560a:	9303      	str	r3, [sp, #12]
  if (oversize_used > 0) {
  40560c:	9b07      	ldr	r3, [sp, #28]
  40560e:	b30b      	cbz	r3, 405654 <tcp_write+0x23c>
    for (p = last_unsent->p; p; p = p->next) {
  405610:	9b06      	ldr	r3, [sp, #24]
  405612:	685c      	ldr	r4, [r3, #4]
  405614:	b1cc      	cbz	r4, 40564a <tcp_write+0x232>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  405616:	4d41      	ldr	r5, [pc, #260]	; (40571c <tcp_write+0x304>)
  405618:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40561c:	e003      	b.n	405626 <tcp_write+0x20e>
  while (pos < len) {
  40561e:	f04f 0800 	mov.w	r8, #0
  405622:	e7f3      	b.n	40560c <tcp_write+0x1f4>
  struct pbuf *concat_p = NULL;
  405624:	461c      	mov	r4, r3
      p->tot_len += oversize_used;
  405626:	8923      	ldrh	r3, [r4, #8]
  405628:	4453      	add	r3, sl
  40562a:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
  40562c:	6823      	ldr	r3, [r4, #0]
  40562e:	2b00      	cmp	r3, #0
  405630:	d1f8      	bne.n	405624 <tcp_write+0x20c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  405632:	8963      	ldrh	r3, [r4, #10]
  405634:	6860      	ldr	r0, [r4, #4]
  405636:	4652      	mov	r2, sl
  405638:	9905      	ldr	r1, [sp, #20]
  40563a:	4418      	add	r0, r3
  40563c:	47a8      	blx	r5
        p->len += oversize_used;
  40563e:	8963      	ldrh	r3, [r4, #10]
  405640:	4453      	add	r3, sl
  405642:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
  405644:	6823      	ldr	r3, [r4, #0]
  405646:	2b00      	cmp	r3, #0
  405648:	d1ec      	bne.n	405624 <tcp_write+0x20c>
    last_unsent->len += oversize_used;
  40564a:	9a06      	ldr	r2, [sp, #24]
  40564c:	8913      	ldrh	r3, [r2, #8]
  40564e:	9907      	ldr	r1, [sp, #28]
  405650:	4419      	add	r1, r3
  405652:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
  405654:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405658:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
  40565c:	9d08      	ldr	r5, [sp, #32]
  40565e:	b145      	cbz	r5, 405672 <tcp_write+0x25a>
    pbuf_cat(last_unsent->p, concat_p);
  405660:	4629      	mov	r1, r5
  405662:	9c06      	ldr	r4, [sp, #24]
  405664:	6860      	ldr	r0, [r4, #4]
  405666:	4b32      	ldr	r3, [pc, #200]	; (405730 <tcp_write+0x318>)
  405668:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  40566a:	8923      	ldrh	r3, [r4, #8]
  40566c:	892a      	ldrh	r2, [r5, #8]
  40566e:	4413      	add	r3, r2
  405670:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
  405672:	9b06      	ldr	r3, [sp, #24]
  405674:	b1c3      	cbz	r3, 4056a8 <tcp_write+0x290>
    last_unsent->next = queue;
  405676:	9b06      	ldr	r3, [sp, #24]
  405678:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
  40567c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  405680:	445b      	add	r3, fp
  405682:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
  405686:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
  40568a:	eba3 0b0b 	sub.w	fp, r3, fp
  40568e:	f8a9 b060 	strh.w	fp, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
  405692:	f8a9 7062 	strh.w	r7, [r9, #98]	; 0x62
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  405696:	b1de      	cbz	r6, 4056d0 <tcp_write+0x2b8>
  405698:	68f4      	ldr	r4, [r6, #12]
  40569a:	b1dc      	cbz	r4, 4056d4 <tcp_write+0x2bc>
  40569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40569e:	f013 0f02 	tst.w	r3, #2
  4056a2:	d004      	beq.n	4056ae <tcp_write+0x296>
  return ERR_OK;
  4056a4:	2000      	movs	r0, #0
  4056a6:	e76f      	b.n	405588 <tcp_write+0x170>
    pcb->unsent = queue;
  4056a8:	f8c9 8068 	str.w	r8, [r9, #104]	; 0x68
  4056ac:	e7e6      	b.n	40567c <tcp_write+0x264>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  4056ae:	89a5      	ldrh	r5, [r4, #12]
  4056b0:	2008      	movs	r0, #8
  4056b2:	4b20      	ldr	r3, [pc, #128]	; (405734 <tcp_write+0x31c>)
  4056b4:	4798      	blx	r3
  4056b6:	4328      	orrs	r0, r5
  4056b8:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
  4056ba:	2000      	movs	r0, #0
  4056bc:	e764      	b.n	405588 <tcp_write+0x170>
  4056be:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4056c2:	e74d      	b.n	405560 <tcp_write+0x148>
  4056c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4056c8:	e74a      	b.n	405560 <tcp_write+0x148>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  4056ca:	f06f 000f 	mvn.w	r0, #15
  4056ce:	e75b      	b.n	405588 <tcp_write+0x170>
  return ERR_OK;
  4056d0:	2000      	movs	r0, #0
  4056d2:	e759      	b.n	405588 <tcp_write+0x170>
  4056d4:	2000      	movs	r0, #0
  4056d6:	e757      	b.n	405588 <tcp_write+0x170>
  return ERR_MEM;
  4056d8:	f04f 30ff 	mov.w	r0, #4294967295
  4056dc:	e754      	b.n	405588 <tcp_write+0x170>
    return ERR_CONN;
  4056de:	f06f 000a 	mvn.w	r0, #10
  4056e2:	e751      	b.n	405588 <tcp_write+0x170>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  4056e4:	461e      	mov	r6, r3
  u16_t oversize = 0;
  4056e6:	9303      	str	r3, [sp, #12]
  u16_t oversize_used = 0;
  4056e8:	9307      	str	r3, [sp, #28]
  u16_t pos = 0; /* position in 'arg' data */
  4056ea:	461d      	mov	r5, r3
  struct pbuf *concat_p = NULL;
  4056ec:	9308      	str	r3, [sp, #32]
  4056ee:	e6fe      	b.n	4054ee <tcp_write+0xd6>
  pcb->flags |= TF_NAGLEMEMERR;
  4056f0:	f899 301a 	ldrb.w	r3, [r9, #26]
  4056f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4056f8:	f889 301a 	strb.w	r3, [r9, #26]
  4056fc:	e73b      	b.n	405576 <tcp_write+0x15e>
  queuelen = pcb->snd_queuelen;
  4056fe:	f8b0 7062 	ldrh.w	r7, [r0, #98]	; 0x62
  if (pcb->unsent != NULL) {
  405702:	6e83      	ldr	r3, [r0, #104]	; 0x68
  405704:	9306      	str	r3, [sp, #24]
  405706:	b10b      	cbz	r3, 40570c <tcp_write+0x2f4>
  405708:	9a06      	ldr	r2, [sp, #24]
  40570a:	e6c7      	b.n	40549c <tcp_write+0x84>
  u16_t oversize_used = 0;
  40570c:	9207      	str	r2, [sp, #28]
  u16_t oversize = 0;
  40570e:	9203      	str	r2, [sp, #12]
  if (pcb->unsent != NULL) {
  405710:	461e      	mov	r6, r3
  405712:	4698      	mov	r8, r3
  struct pbuf *concat_p = NULL;
  405714:	9308      	str	r3, [sp, #32]
  405716:	e779      	b.n	40560c <tcp_write+0x1f4>
  405718:	00402c71 	.word	0x00402c71
  40571c:	00406fc1 	.word	0x00406fc1
  405720:	00402e25 	.word	0x00402e25
  405724:	00402c19 	.word	0x00402c19
  405728:	004032b5 	.word	0x004032b5
  40572c:	004052e9 	.word	0x004052e9
  405730:	00402e45 	.word	0x00402e45
  405734:	00401059 	.word	0x00401059

00405738 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  405738:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  40573c:	2b07      	cmp	r3, #7
  40573e:	d902      	bls.n	405746 <tcp_enqueue_flags+0xe>
  405740:	f011 0f01 	tst.w	r1, #1
  405744:	d01e      	beq.n	405784 <tcp_enqueue_flags+0x4c>
{
  405746:	b570      	push	{r4, r5, r6, lr}
  405748:	b082      	sub	sp, #8
  40574a:	460d      	mov	r5, r1
  40574c:	4604      	mov	r4, r0
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }

  if (flags & TCP_SYN) {
  40574e:	f001 0302 	and.w	r3, r1, #2
  u8_t optflags = 0;
  405752:	f3c1 0640 	ubfx	r6, r1, #1, #1
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  405756:	2b00      	cmp	r3, #0

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  405758:	f04f 0200 	mov.w	r2, #0
  40575c:	bf14      	ite	ne
  40575e:	2104      	movne	r1, #4
  405760:	4611      	moveq	r1, r2
  405762:	4610      	mov	r0, r2
  405764:	4b22      	ldr	r3, [pc, #136]	; (4057f0 <tcp_enqueue_flags+0xb8>)
  405766:	4798      	blx	r3
  405768:	4601      	mov	r1, r0
  40576a:	b190      	cbz	r0, 405792 <tcp_enqueue_flags+0x5a>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  40576c:	9600      	str	r6, [sp, #0]
  40576e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  405770:	462a      	mov	r2, r5
  405772:	4620      	mov	r0, r4
  405774:	4e1f      	ldr	r6, [pc, #124]	; (4057f4 <tcp_enqueue_flags+0xbc>)
  405776:	47b0      	blx	r6
  405778:	4601      	mov	r1, r0
  40577a:	b188      	cbz	r0, 4057a0 <tcp_enqueue_flags+0x68>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  40577c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  40577e:	b9ba      	cbnz	r2, 4057b0 <tcp_enqueue_flags+0x78>
    pcb->unsent = seg;
  405780:	66a0      	str	r0, [r4, #104]	; 0x68
  405782:	e019      	b.n	4057b8 <tcp_enqueue_flags+0x80>
    pcb->flags |= TF_NAGLEMEMERR;
  405784:	7e83      	ldrb	r3, [r0, #26]
  405786:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40578a:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
  40578c:	f04f 30ff 	mov.w	r0, #4294967295
  405790:	4770      	bx	lr
    pcb->flags |= TF_NAGLEMEMERR;
  405792:	7ea3      	ldrb	r3, [r4, #26]
  405794:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405798:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
  40579a:	f04f 30ff 	mov.w	r0, #4294967295
  40579e:	e024      	b.n	4057ea <tcp_enqueue_flags+0xb2>
    pcb->flags |= TF_NAGLEMEMERR;
  4057a0:	7ea3      	ldrb	r3, [r4, #26]
  4057a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4057a6:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
  4057a8:	f04f 30ff 	mov.w	r0, #4294967295
  4057ac:	e01d      	b.n	4057ea <tcp_enqueue_flags+0xb2>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  4057ae:	461a      	mov	r2, r3
  4057b0:	6813      	ldr	r3, [r2, #0]
  4057b2:	2b00      	cmp	r3, #0
  4057b4:	d1fb      	bne.n	4057ae <tcp_enqueue_flags+0x76>
    useg->next = seg;
  4057b6:	6011      	str	r1, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  4057b8:	2300      	movs	r3, #0
  4057ba:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  4057be:	f015 0f03 	tst.w	r5, #3
  4057c2:	d002      	beq.n	4057ca <tcp_enqueue_flags+0x92>
    pcb->snd_lbb++;
  4057c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4057c6:	3301      	adds	r3, #1
  4057c8:	65a3      	str	r3, [r4, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  4057ca:	f015 0f01 	tst.w	r5, #1
  4057ce:	d003      	beq.n	4057d8 <tcp_enqueue_flags+0xa0>
    pcb->flags |= TF_FIN;
  4057d0:	7ea3      	ldrb	r3, [r4, #26]
  4057d2:	f043 0320 	orr.w	r3, r3, #32
  4057d6:	76a3      	strb	r3, [r4, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  4057d8:	6848      	ldr	r0, [r1, #4]
  4057da:	4b07      	ldr	r3, [pc, #28]	; (4057f8 <tcp_enqueue_flags+0xc0>)
  4057dc:	4798      	blx	r3
  4057de:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  4057e2:	4418      	add	r0, r3
  4057e4:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  4057e8:	2000      	movs	r0, #0
}
  4057ea:	b002      	add	sp, #8
  4057ec:	bd70      	pop	{r4, r5, r6, pc}
  4057ee:	bf00      	nop
  4057f0:	00402c71 	.word	0x00402c71
  4057f4:	004052e9 	.word	0x004052e9
  4057f8:	00402e25 	.word	0x00402e25

004057fc <tcp_send_fin>:
{
  4057fc:	b570      	push	{r4, r5, r6, lr}
  4057fe:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
  405800:	6e84      	ldr	r4, [r0, #104]	; 0x68
  405802:	b90c      	cbnz	r4, 405808 <tcp_send_fin+0xc>
  405804:	e00a      	b.n	40581c <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
  405806:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  405808:	6823      	ldr	r3, [r4, #0]
  40580a:	2b00      	cmp	r3, #0
  40580c:	d1fb      	bne.n	405806 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  40580e:	68e3      	ldr	r3, [r4, #12]
  405810:	8998      	ldrh	r0, [r3, #12]
  405812:	4b0b      	ldr	r3, [pc, #44]	; (405840 <tcp_send_fin+0x44>)
  405814:	4798      	blx	r3
  405816:	f010 0f07 	tst.w	r0, #7
  40581a:	d004      	beq.n	405826 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
  40581c:	2101      	movs	r1, #1
  40581e:	4628      	mov	r0, r5
  405820:	4b08      	ldr	r3, [pc, #32]	; (405844 <tcp_send_fin+0x48>)
  405822:	4798      	blx	r3
}
  405824:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  405826:	68e6      	ldr	r6, [r4, #12]
  405828:	89b4      	ldrh	r4, [r6, #12]
  40582a:	2001      	movs	r0, #1
  40582c:	4b04      	ldr	r3, [pc, #16]	; (405840 <tcp_send_fin+0x44>)
  40582e:	4798      	blx	r3
  405830:	4320      	orrs	r0, r4
  405832:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
  405834:	7eab      	ldrb	r3, [r5, #26]
  405836:	f043 0320 	orr.w	r3, r3, #32
  40583a:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
  40583c:	2000      	movs	r0, #0
  40583e:	bd70      	pop	{r4, r5, r6, pc}
  405840:	00401059 	.word	0x00401059
  405844:	00405739 	.word	0x00405739

00405848 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  405848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40584c:	b085      	sub	sp, #20
  40584e:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  405850:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  405852:	4b22      	ldr	r3, [pc, #136]	; (4058dc <tcp_send_empty_ack+0x94>)
  405854:	4798      	blx	r3
  405856:	4603      	mov	r3, r0
  405858:	2200      	movs	r2, #0
  40585a:	4611      	mov	r1, r2
  40585c:	4620      	mov	r0, r4
  40585e:	4d20      	ldr	r5, [pc, #128]	; (4058e0 <tcp_send_empty_ack+0x98>)
  405860:	47a8      	blx	r5
  if (p == NULL) {
  405862:	b350      	cbz	r0, 4058ba <tcp_send_empty_ack+0x72>
  405864:	4605      	mov	r5, r0
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  405866:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  40586a:	1d26      	adds	r6, r4, #4
  40586c:	4630      	mov	r0, r6
  40586e:	4b1d      	ldr	r3, [pc, #116]	; (4058e4 <tcp_send_empty_ack+0x9c>)
  405870:	4798      	blx	r3
  if (netif == NULL) {
  405872:	4607      	mov	r7, r0
  405874:	b340      	cbz	r0, 4058c8 <tcp_send_empty_ack+0x80>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  405876:	892a      	ldrh	r2, [r5, #8]
  405878:	9600      	str	r6, [sp, #0]
  40587a:	4623      	mov	r3, r4
  40587c:	2106      	movs	r1, #6
  40587e:	4628      	mov	r0, r5
  405880:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4058f0 <tcp_send_empty_ack+0xa8>
  405884:	47c8      	blx	r9
  405886:	f8a8 0010 	strh.w	r0, [r8, #16]
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  40588a:	7aa3      	ldrb	r3, [r4, #10]
  40588c:	9702      	str	r7, [sp, #8]
  40588e:	2206      	movs	r2, #6
  405890:	9201      	str	r2, [sp, #4]
  405892:	7a62      	ldrb	r2, [r4, #9]
  405894:	9200      	str	r2, [sp, #0]
  405896:	4632      	mov	r2, r6
  405898:	4621      	mov	r1, r4
  40589a:	4628      	mov	r0, r5
  40589c:	4e12      	ldr	r6, [pc, #72]	; (4058e8 <tcp_send_empty_ack+0xa0>)
  40589e:	47b0      	blx	r6
  4058a0:	4606      	mov	r6, r0
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  4058a2:	4628      	mov	r0, r5
  4058a4:	4b11      	ldr	r3, [pc, #68]	; (4058ec <tcp_send_empty_ack+0xa4>)
  4058a6:	4798      	blx	r3

  if (err != ERR_OK) {
  4058a8:	b99e      	cbnz	r6, 4058d2 <tcp_send_empty_ack+0x8a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  4058aa:	7ea3      	ldrb	r3, [r4, #26]
  4058ac:	f023 0303 	bic.w	r3, r3, #3
  4058b0:	76a3      	strb	r3, [r4, #26]
  }

  return err;
}
  4058b2:	4630      	mov	r0, r6
  4058b4:	b005      	add	sp, #20
  4058b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  4058ba:	7ea3      	ldrb	r3, [r4, #26]
  4058bc:	f043 0303 	orr.w	r3, r3, #3
  4058c0:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
  4058c2:	f06f 0601 	mvn.w	r6, #1
  4058c6:	e7f4      	b.n	4058b2 <tcp_send_empty_ack+0x6a>
  pbuf_free(p);
  4058c8:	4628      	mov	r0, r5
  4058ca:	4b08      	ldr	r3, [pc, #32]	; (4058ec <tcp_send_empty_ack+0xa4>)
  4058cc:	4798      	blx	r3
    err = ERR_RTE;
  4058ce:	f06f 0603 	mvn.w	r6, #3
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  4058d2:	7ea3      	ldrb	r3, [r4, #26]
  4058d4:	f043 0303 	orr.w	r3, r3, #3
  4058d8:	76a3      	strb	r3, [r4, #26]
  4058da:	e7ea      	b.n	4058b2 <tcp_send_empty_ack+0x6a>
  4058dc:	0040105f 	.word	0x0040105f
  4058e0:	004053a5 	.word	0x004053a5
  4058e4:	00401b5d 	.word	0x00401b5d
  4058e8:	00401eb5 	.word	0x00401eb5
  4058ec:	00402c19 	.word	0x00402c19
  4058f0:	00401189 	.word	0x00401189

004058f4 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  4058f4:	4b9e      	ldr	r3, [pc, #632]	; (405b70 <tcp_output+0x27c>)
  4058f6:	681b      	ldr	r3, [r3, #0]
  4058f8:	4283      	cmp	r3, r0
  4058fa:	f000 8172 	beq.w	405be2 <tcp_output+0x2ee>
{
  4058fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405902:	b089      	sub	sp, #36	; 0x24
  405904:	4605      	mov	r5, r0
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  405906:	f8b0 b05c 	ldrh.w	fp, [r0, #92]	; 0x5c
  40590a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
  40590e:	459b      	cmp	fp, r3
  405910:	bf28      	it	cs
  405912:	469b      	movcs	fp, r3

  seg = pcb->unsent;
  405914:	6e84      	ldr	r4, [r0, #104]	; 0x68
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  405916:	7e83      	ldrb	r3, [r0, #26]
  405918:	f013 0f02 	tst.w	r3, #2
  40591c:	d00a      	beq.n	405934 <tcp_output+0x40>
  40591e:	b17c      	cbz	r4, 405940 <tcp_output+0x4c>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  405920:	68e3      	ldr	r3, [r4, #12]
  405922:	6858      	ldr	r0, [r3, #4]
  405924:	4b93      	ldr	r3, [pc, #588]	; (405b74 <tcp_output+0x280>)
  405926:	4798      	blx	r3
  405928:	8923      	ldrh	r3, [r4, #8]
  40592a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  40592c:	1a9b      	subs	r3, r3, r2
  40592e:	4418      	add	r0, r3
     (seg == NULL ||
  405930:	4583      	cmp	fp, r0
  405932:	d305      	bcc.n	405940 <tcp_output+0x4c>
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  405934:	f8d5 906c 	ldr.w	r9, [r5, #108]	; 0x6c
  if (useg != NULL) {
  405938:	f1b9 0f00 	cmp.w	r9, #0
  40593c:	d106      	bne.n	40594c <tcp_output+0x58>
  40593e:	e009      	b.n	405954 <tcp_output+0x60>
     return tcp_send_empty_ack(pcb);
  405940:	4628      	mov	r0, r5
  405942:	4b8d      	ldr	r3, [pc, #564]	; (405b78 <tcp_output+0x284>)
  405944:	4798      	blx	r3
  405946:	4603      	mov	r3, r0
  405948:	e043      	b.n	4059d2 <tcp_output+0xde>
    for (; useg->next != NULL; useg = useg->next);
  40594a:	4699      	mov	r9, r3
  40594c:	f8d9 3000 	ldr.w	r3, [r9]
  405950:	2b00      	cmp	r3, #0
  405952:	d1fa      	bne.n	40594a <tcp_output+0x56>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  405954:	1d2b      	adds	r3, r5, #4
  405956:	9306      	str	r3, [sp, #24]
  405958:	4618      	mov	r0, r3
  40595a:	4b88      	ldr	r3, [pc, #544]	; (405b7c <tcp_output+0x288>)
  40595c:	4798      	blx	r3
  if (netif == NULL) {
  40595e:	9007      	str	r0, [sp, #28]
  405960:	2800      	cmp	r0, #0
  405962:	f000 8141 	beq.w	405be8 <tcp_output+0x2f4>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  405966:	9504      	str	r5, [sp, #16]
  405968:	b10d      	cbz	r5, 40596e <tcp_output+0x7a>
  40596a:	682b      	ldr	r3, [r5, #0]
  40596c:	b933      	cbnz	r3, 40597c <tcp_output+0x88>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
    if (local_ip == NULL) {
  40596e:	9a07      	ldr	r2, [sp, #28]
  405970:	f112 0f04 	cmn.w	r2, #4
  405974:	f000 813b 	beq.w	405bee <tcp_output+0x2fa>
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  405978:	6853      	ldr	r3, [r2, #4]
  40597a:	602b      	str	r3, [r5, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  40597c:	b304      	cbz	r4, 4059c0 <tcp_output+0xcc>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  40597e:	68e3      	ldr	r3, [r4, #12]
  405980:	6858      	ldr	r0, [r3, #4]
  405982:	4b7c      	ldr	r3, [pc, #496]	; (405b74 <tcp_output+0x280>)
  405984:	4798      	blx	r3
  405986:	8923      	ldrh	r3, [r4, #8]
  405988:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  40598a:	1a9b      	subs	r3, r3, r2
  40598c:	4418      	add	r0, r3
  40598e:	4583      	cmp	fp, r0
  405990:	d206      	bcs.n	4059a0 <tcp_output+0xac>
  405992:	f1bb 0f00 	cmp.w	fp, #0
  405996:	d003      	beq.n	4059a0 <tcp_output+0xac>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  405998:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
  40599c:	459b      	cmp	fp, r3
  40599e:	d004      	beq.n	4059aa <tcp_output+0xb6>
    }
    goto output_done;
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  4059a0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 405b74 <tcp_output+0x280>
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  4059a4:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 405b8c <tcp_output+0x298>
  4059a8:	e06e      	b.n	405a88 <tcp_output+0x194>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  4059aa:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  4059ac:	2b00      	cmp	r3, #0
  4059ae:	d1f7      	bne.n	4059a0 <tcp_output+0xac>
    if (pcb->persist_backoff == 0) {
  4059b0:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
  4059b4:	b923      	cbnz	r3, 4059c0 <tcp_output+0xcc>
      pcb->persist_cnt = 0;
  4059b6:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
  4059ba:	2301      	movs	r3, #1
  4059bc:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
    }
    seg = pcb->unsent;
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  4059c0:	6eab      	ldr	r3, [r5, #104]	; 0x68
  4059c2:	2b00      	cmp	r3, #0
  4059c4:	f000 8109 	beq.w	405bda <tcp_output+0x2e6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  4059c8:	7eab      	ldrb	r3, [r5, #26]
  4059ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4059ce:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
  4059d0:	2300      	movs	r3, #0
}
  4059d2:	4618      	mov	r0, r3
  4059d4:	b009      	add	sp, #36	; 0x24
  4059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((tcp_do_output_nagle(pcb) == 0) &&
  4059da:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
  4059de:	b132      	cbz	r2, 4059ee <tcp_output+0xfa>
  4059e0:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
  4059e4:	2a07      	cmp	r2, #7
  4059e6:	d802      	bhi.n	4059ee <tcp_output+0xfa>
  4059e8:	f013 0fa0 	tst.w	r3, #160	; 0xa0
  4059ec:	d0e8      	beq.n	4059c0 <tcp_output+0xcc>
    if (pcb->state != SYN_SENT) {
  4059ee:	7d2b      	ldrb	r3, [r5, #20]
  4059f0:	2b02      	cmp	r3, #2
  4059f2:	d005      	beq.n	405a00 <tcp_output+0x10c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  4059f4:	68e7      	ldr	r7, [r4, #12]
  4059f6:	89be      	ldrh	r6, [r7, #12]
  4059f8:	2010      	movs	r0, #16
  4059fa:	47d0      	blx	sl
  4059fc:	4330      	orrs	r0, r6
  4059fe:	81b8      	strh	r0, [r7, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  405a00:	6863      	ldr	r3, [r4, #4]
  405a02:	89db      	ldrh	r3, [r3, #14]
  405a04:	2b01      	cmp	r3, #1
  405a06:	d05a      	beq.n	405abe <tcp_output+0x1ca>
    pcb->unsent = seg->next;
  405a08:	6823      	ldr	r3, [r4, #0]
  405a0a:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
  405a0c:	7d2b      	ldrb	r3, [r5, #20]
  405a0e:	2b02      	cmp	r3, #2
  405a10:	d003      	beq.n	405a1a <tcp_output+0x126>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  405a12:	7eab      	ldrb	r3, [r5, #26]
  405a14:	f023 0303 	bic.w	r3, r3, #3
  405a18:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  405a1a:	68e3      	ldr	r3, [r4, #12]
  405a1c:	6858      	ldr	r0, [r3, #4]
  405a1e:	47c0      	blx	r8
  405a20:	4606      	mov	r6, r0
  405a22:	8927      	ldrh	r7, [r4, #8]
  405a24:	68e3      	ldr	r3, [r4, #12]
  405a26:	8998      	ldrh	r0, [r3, #12]
  405a28:	47d0      	blx	sl
  405a2a:	f010 0003 	ands.w	r0, r0, #3
  405a2e:	bf18      	it	ne
  405a30:	2001      	movne	r0, #1
  405a32:	443e      	add	r6, r7
  405a34:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  405a36:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  405a38:	1a1b      	subs	r3, r3, r0
  405a3a:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
  405a3c:	bfb8      	it	lt
  405a3e:	64e8      	strlt	r0, [r5, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
  405a40:	8926      	ldrh	r6, [r4, #8]
  405a42:	68e3      	ldr	r3, [r4, #12]
  405a44:	8998      	ldrh	r0, [r3, #12]
  405a46:	47d0      	blx	sl
  405a48:	f010 0003 	ands.w	r0, r0, #3
  405a4c:	bf18      	it	ne
  405a4e:	2001      	movne	r0, #1
  405a50:	42f0      	cmn	r0, r6
  405a52:	f000 80be 	beq.w	405bd2 <tcp_output+0x2de>
      seg->next = NULL;
  405a56:	2300      	movs	r3, #0
  405a58:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
  405a5a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  405a5c:	2b00      	cmp	r3, #0
  405a5e:	f000 809f 	beq.w	405ba0 <tcp_output+0x2ac>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  405a62:	68e3      	ldr	r3, [r4, #12]
  405a64:	6858      	ldr	r0, [r3, #4]
  405a66:	47c0      	blx	r8
  405a68:	4606      	mov	r6, r0
  405a6a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  405a6e:	6858      	ldr	r0, [r3, #4]
  405a70:	47c0      	blx	r8
  405a72:	1a30      	subs	r0, r6, r0
  405a74:	2800      	cmp	r0, #0
  405a76:	f2c0 8096 	blt.w	405ba6 <tcp_output+0x2b2>
          useg->next = seg;
  405a7a:	f8c9 4000 	str.w	r4, [r9]
  405a7e:	46a1      	mov	r9, r4
    seg = pcb->unsent;
  405a80:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
  405a82:	2c00      	cmp	r4, #0
  405a84:	f000 80a9 	beq.w	405bda <tcp_output+0x2e6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  405a88:	68e3      	ldr	r3, [r4, #12]
  405a8a:	6858      	ldr	r0, [r3, #4]
  405a8c:	47c0      	blx	r8
  405a8e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  405a90:	1ac0      	subs	r0, r0, r3
  405a92:	8923      	ldrh	r3, [r4, #8]
  405a94:	4418      	add	r0, r3
  while (seg != NULL &&
  405a96:	4583      	cmp	fp, r0
  405a98:	d392      	bcc.n	4059c0 <tcp_output+0xcc>
    if ((tcp_do_output_nagle(pcb) == 0) &&
  405a9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  405a9c:	2b00      	cmp	r3, #0
  405a9e:	d0a6      	beq.n	4059ee <tcp_output+0xfa>
  405aa0:	7eab      	ldrb	r3, [r5, #26]
  405aa2:	f013 0f44 	tst.w	r3, #68	; 0x44
  405aa6:	d1a2      	bne.n	4059ee <tcp_output+0xfa>
  405aa8:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  405aaa:	2a00      	cmp	r2, #0
  405aac:	d095      	beq.n	4059da <tcp_output+0xe6>
  405aae:	6811      	ldr	r1, [r2, #0]
  405ab0:	2900      	cmp	r1, #0
  405ab2:	d19c      	bne.n	4059ee <tcp_output+0xfa>
  405ab4:	8911      	ldrh	r1, [r2, #8]
  405ab6:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
  405ab8:	4291      	cmp	r1, r2
  405aba:	d298      	bcs.n	4059ee <tcp_output+0xfa>
  405abc:	e78d      	b.n	4059da <tcp_output+0xe6>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  405abe:	68e6      	ldr	r6, [r4, #12]
  405ac0:	6a68      	ldr	r0, [r5, #36]	; 0x24
  405ac2:	47c0      	blx	r8
  405ac4:	60b0      	str	r0, [r6, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  405ac6:	68e6      	ldr	r6, [r4, #12]
  405ac8:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
  405aca:	47d0      	blx	sl
  405acc:	81f0      	strh	r0, [r6, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  405ace:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
  405ad0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  405ad2:	4413      	add	r3, r2
  405ad4:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
  405ad6:	7aa3      	ldrb	r3, [r4, #10]
  405ad8:	f013 0f01 	tst.w	r3, #1
  405adc:	d13a      	bne.n	405b54 <tcp_output+0x260>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  405ade:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  405ae2:	2b00      	cmp	r3, #0
  405ae4:	db41      	blt.n	405b6a <tcp_output+0x276>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
  405ae6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  405ae8:	2b00      	cmp	r3, #0
  405aea:	d051      	beq.n	405b90 <tcp_output+0x29c>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  405aec:	6862      	ldr	r2, [r4, #4]
  405aee:	68e3      	ldr	r3, [r4, #12]
  405af0:	6851      	ldr	r1, [r2, #4]
  405af2:	1a5b      	subs	r3, r3, r1
  405af4:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
  405af6:	8951      	ldrh	r1, [r2, #10]
  405af8:	1ac9      	subs	r1, r1, r3
  405afa:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
  405afc:	6861      	ldr	r1, [r4, #4]
  405afe:	890a      	ldrh	r2, [r1, #8]
  405b00:	1ad3      	subs	r3, r2, r3
  405b02:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
  405b04:	6863      	ldr	r3, [r4, #4]
  405b06:	68e2      	ldr	r2, [r4, #12]
  405b08:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  405b0a:	68e3      	ldr	r3, [r4, #12]
  405b0c:	2200      	movs	r2, #0
  405b0e:	741a      	strb	r2, [r3, #16]
  405b10:	745a      	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  405b12:	68e3      	ldr	r3, [r4, #12]
  405b14:	9305      	str	r3, [sp, #20]
  405b16:	6860      	ldr	r0, [r4, #4]
  405b18:	8902      	ldrh	r2, [r0, #8]
  405b1a:	9f06      	ldr	r7, [sp, #24]
  405b1c:	9700      	str	r7, [sp, #0]
  405b1e:	9b04      	ldr	r3, [sp, #16]
  405b20:	2106      	movs	r1, #6
  405b22:	4e17      	ldr	r6, [pc, #92]	; (405b80 <tcp_output+0x28c>)
  405b24:	47b0      	blx	r6
  405b26:	9b05      	ldr	r3, [sp, #20]
  405b28:	8218      	strh	r0, [r3, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  405b2a:	7aab      	ldrb	r3, [r5, #10]
  405b2c:	6860      	ldr	r0, [r4, #4]
  405b2e:	9a07      	ldr	r2, [sp, #28]
  405b30:	9202      	str	r2, [sp, #8]
  405b32:	2206      	movs	r2, #6
  405b34:	9201      	str	r2, [sp, #4]
  405b36:	7a6a      	ldrb	r2, [r5, #9]
  405b38:	9200      	str	r2, [sp, #0]
  405b3a:	463a      	mov	r2, r7
  405b3c:	9904      	ldr	r1, [sp, #16]
  405b3e:	4e11      	ldr	r6, [pc, #68]	; (405b84 <tcp_output+0x290>)
  405b40:	47b0      	blx	r6
    if (err != ERR_OK) {
  405b42:	4603      	mov	r3, r0
  405b44:	2800      	cmp	r0, #0
  405b46:	f43f af5f 	beq.w	405a08 <tcp_output+0x114>
      pcb->flags |= TF_NAGLEMEMERR;
  405b4a:	7eaa      	ldrb	r2, [r5, #26]
  405b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
  405b50:	76aa      	strb	r2, [r5, #26]
      return err;
  405b52:	e73e      	b.n	4059d2 <tcp_output+0xde>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  405b54:	68e6      	ldr	r6, [r4, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  405b56:	9906      	ldr	r1, [sp, #24]
  405b58:	f240 50b4 	movw	r0, #1460	; 0x5b4
  405b5c:	4b0a      	ldr	r3, [pc, #40]	; (405b88 <tcp_output+0x294>)
  405b5e:	4798      	blx	r3
    *opts = TCP_BUILD_MSS_OPTION(mss);
  405b60:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
  405b64:	47c0      	blx	r8
  405b66:	6170      	str	r0, [r6, #20]
  405b68:	e7b9      	b.n	405ade <tcp_output+0x1ea>
    pcb->rtime = 0;
  405b6a:	2300      	movs	r3, #0
  405b6c:	862b      	strh	r3, [r5, #48]	; 0x30
  405b6e:	e7ba      	b.n	405ae6 <tcp_output+0x1f2>
  405b70:	20404994 	.word	0x20404994
  405b74:	0040105f 	.word	0x0040105f
  405b78:	00405849 	.word	0x00405849
  405b7c:	00401b5d 	.word	0x00401b5d
  405b80:	00401189 	.word	0x00401189
  405b84:	00401eb5 	.word	0x00401eb5
  405b88:	00403d5d 	.word	0x00403d5d
  405b8c:	00401059 	.word	0x00401059
    pcb->rttest = tcp_ticks;
  405b90:	4b18      	ldr	r3, [pc, #96]	; (405bf4 <tcp_output+0x300>)
  405b92:	681b      	ldr	r3, [r3, #0]
  405b94:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  405b96:	68e3      	ldr	r3, [r4, #12]
  405b98:	6858      	ldr	r0, [r3, #4]
  405b9a:	47c0      	blx	r8
  405b9c:	63a8      	str	r0, [r5, #56]	; 0x38
  405b9e:	e7a5      	b.n	405aec <tcp_output+0x1f8>
        pcb->unacked = seg;
  405ba0:	66ec      	str	r4, [r5, #108]	; 0x6c
  405ba2:	46a1      	mov	r9, r4
  405ba4:	e76c      	b.n	405a80 <tcp_output+0x18c>
          struct tcp_seg **cur_seg = &(pcb->unacked);
  405ba6:	f105 076c 	add.w	r7, r5, #108	; 0x6c
          while (*cur_seg &&
  405baa:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  405bac:	b16b      	cbz	r3, 405bca <tcp_output+0x2d6>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  405bae:	68db      	ldr	r3, [r3, #12]
  405bb0:	6858      	ldr	r0, [r3, #4]
  405bb2:	47c0      	blx	r8
  405bb4:	4606      	mov	r6, r0
  405bb6:	68e3      	ldr	r3, [r4, #12]
  405bb8:	6858      	ldr	r0, [r3, #4]
  405bba:	47c0      	blx	r8
  405bbc:	1a30      	subs	r0, r6, r0
          while (*cur_seg &&
  405bbe:	2800      	cmp	r0, #0
  405bc0:	da03      	bge.n	405bca <tcp_output+0x2d6>
              cur_seg = &((*cur_seg)->next );
  405bc2:	683f      	ldr	r7, [r7, #0]
          while (*cur_seg &&
  405bc4:	683b      	ldr	r3, [r7, #0]
  405bc6:	2b00      	cmp	r3, #0
  405bc8:	d1f1      	bne.n	405bae <tcp_output+0x2ba>
          seg->next = (*cur_seg);
  405bca:	683b      	ldr	r3, [r7, #0]
  405bcc:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
  405bce:	603c      	str	r4, [r7, #0]
  405bd0:	e756      	b.n	405a80 <tcp_output+0x18c>
      tcp_seg_free(seg);
  405bd2:	4620      	mov	r0, r4
  405bd4:	4b08      	ldr	r3, [pc, #32]	; (405bf8 <tcp_output+0x304>)
  405bd6:	4798      	blx	r3
  405bd8:	e752      	b.n	405a80 <tcp_output+0x18c>
    pcb->unsent_oversize = 0;
  405bda:	2300      	movs	r3, #0
  405bdc:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  405be0:	e6f2      	b.n	4059c8 <tcp_output+0xd4>
    return ERR_OK;
  405be2:	2300      	movs	r3, #0
}
  405be4:	4618      	mov	r0, r3
  405be6:	4770      	bx	lr
    return ERR_RTE;
  405be8:	f06f 0303 	mvn.w	r3, #3
  405bec:	e6f1      	b.n	4059d2 <tcp_output+0xde>
      return ERR_RTE;
  405bee:	f06f 0303 	mvn.w	r3, #3
  405bf2:	e6ee      	b.n	4059d2 <tcp_output+0xde>
  405bf4:	20404984 	.word	0x20404984
  405bf8:	00403291 	.word	0x00403291

00405bfc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  405bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c00:	b084      	sub	sp, #16
  405c02:	4680      	mov	r8, r0
  405c04:	468a      	mov	sl, r1
  405c06:	4691      	mov	r9, r2
  405c08:	461f      	mov	r7, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  405c0a:	2200      	movs	r2, #0
  405c0c:	2114      	movs	r1, #20
  405c0e:	2001      	movs	r0, #1
  405c10:	4b21      	ldr	r3, [pc, #132]	; (405c98 <tcp_rst+0x9c>)
  405c12:	4798      	blx	r3
  if (p == NULL) {
  405c14:	2800      	cmp	r0, #0
  405c16:	d03b      	beq.n	405c90 <tcp_rst+0x94>
  405c18:	4605      	mov	r5, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  405c1a:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = lwip_htons(local_port);
  405c1c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  405c20:	4e1e      	ldr	r6, [pc, #120]	; (405c9c <tcp_rst+0xa0>)
  405c22:	47b0      	blx	r6
  405c24:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
  405c26:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  405c2a:	47b0      	blx	r6
  405c2c:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  405c2e:	4640      	mov	r0, r8
  405c30:	f8df 8078 	ldr.w	r8, [pc, #120]	; 405cac <tcp_rst+0xb0>
  405c34:	47c0      	blx	r8
  405c36:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  405c38:	4650      	mov	r0, sl
  405c3a:	47c0      	blx	r8
  405c3c:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  405c3e:	f245 0014 	movw	r0, #20500	; 0x5014
  405c42:	47b0      	blx	r6
  405c44:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  405c46:	2300      	movs	r3, #0
  405c48:	220b      	movs	r2, #11
  405c4a:	73a2      	strb	r2, [r4, #14]
  405c4c:	2268      	movs	r2, #104	; 0x68
  405c4e:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
  405c50:	7423      	strb	r3, [r4, #16]
  405c52:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
  405c54:	74a3      	strb	r3, [r4, #18]
  405c56:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
  405c58:	4638      	mov	r0, r7
  405c5a:	4b11      	ldr	r3, [pc, #68]	; (405ca0 <tcp_rst+0xa4>)
  405c5c:	4798      	blx	r3
  if (netif != NULL) {
  405c5e:	4606      	mov	r6, r0
  405c60:	b198      	cbz	r0, 405c8a <tcp_rst+0x8e>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  405c62:	892a      	ldrh	r2, [r5, #8]
  405c64:	9700      	str	r7, [sp, #0]
  405c66:	464b      	mov	r3, r9
  405c68:	2106      	movs	r1, #6
  405c6a:	4628      	mov	r0, r5
  405c6c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 405cb0 <tcp_rst+0xb4>
  405c70:	47c0      	blx	r8
  405c72:	8220      	strh	r0, [r4, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  405c74:	9602      	str	r6, [sp, #8]
  405c76:	2306      	movs	r3, #6
  405c78:	9301      	str	r3, [sp, #4]
  405c7a:	2300      	movs	r3, #0
  405c7c:	9300      	str	r3, [sp, #0]
  405c7e:	23ff      	movs	r3, #255	; 0xff
  405c80:	463a      	mov	r2, r7
  405c82:	4649      	mov	r1, r9
  405c84:	4628      	mov	r0, r5
  405c86:	4c07      	ldr	r4, [pc, #28]	; (405ca4 <tcp_rst+0xa8>)
  405c88:	47a0      	blx	r4
  }
  pbuf_free(p);
  405c8a:	4628      	mov	r0, r5
  405c8c:	4b06      	ldr	r3, [pc, #24]	; (405ca8 <tcp_rst+0xac>)
  405c8e:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  405c90:	b004      	add	sp, #16
  405c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405c96:	bf00      	nop
  405c98:	00402c71 	.word	0x00402c71
  405c9c:	00401059 	.word	0x00401059
  405ca0:	00401b5d 	.word	0x00401b5d
  405ca4:	00401eb5 	.word	0x00401eb5
  405ca8:	00402c19 	.word	0x00402c19
  405cac:	0040105f 	.word	0x0040105f
  405cb0:	00401189 	.word	0x00401189

00405cb4 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  405cb4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  405cb6:	b10a      	cbz	r2, 405cbc <tcp_rexmit_rto+0x8>
{
  405cb8:	b508      	push	{r3, lr}
  405cba:	e001      	b.n	405cc0 <tcp_rexmit_rto+0xc>
  405cbc:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  405cbe:	461a      	mov	r2, r3
  405cc0:	6813      	ldr	r3, [r2, #0]
  405cc2:	2b00      	cmp	r3, #0
  405cc4:	d1fb      	bne.n	405cbe <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  405cc6:	6e83      	ldr	r3, [r0, #104]	; 0x68
  405cc8:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  405cca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  405ccc:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  405cce:	2300      	movs	r3, #0
  405cd0:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  405cd2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  405cd6:	2bff      	cmp	r3, #255	; 0xff
  405cd8:	d002      	beq.n	405ce0 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
  405cda:	3301      	adds	r3, #1
  405cdc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  405ce0:	2300      	movs	r3, #0
  405ce2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
  405ce4:	4b01      	ldr	r3, [pc, #4]	; (405cec <tcp_rexmit_rto+0x38>)
  405ce6:	4798      	blx	r3
  405ce8:	bd08      	pop	{r3, pc}
  405cea:	bf00      	nop
  405cec:	004058f5 	.word	0x004058f5

00405cf0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  405cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  405cf4:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  405cf6:	b327      	cbz	r7, 405d42 <tcp_rexmit+0x52>
  405cf8:	4680      	mov	r8, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
  405cfa:	683b      	ldr	r3, [r7, #0]
  405cfc:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
  405cfe:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
  405d02:	6e83      	ldr	r3, [r0, #104]	; 0x68
  405d04:	b173      	cbz	r3, 405d24 <tcp_rexmit+0x34>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  405d06:	4e11      	ldr	r6, [pc, #68]	; (405d4c <tcp_rexmit+0x5c>)
  405d08:	68db      	ldr	r3, [r3, #12]
  405d0a:	6858      	ldr	r0, [r3, #4]
  405d0c:	47b0      	blx	r6
  405d0e:	4604      	mov	r4, r0
  405d10:	68fb      	ldr	r3, [r7, #12]
  405d12:	6858      	ldr	r0, [r3, #4]
  405d14:	47b0      	blx	r6
  405d16:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
  405d18:	2800      	cmp	r0, #0
  405d1a:	da03      	bge.n	405d24 <tcp_rexmit+0x34>
      cur_seg = &((*cur_seg)->next );
  405d1c:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
  405d1e:	682b      	ldr	r3, [r5, #0]
  405d20:	2b00      	cmp	r3, #0
  405d22:	d1f1      	bne.n	405d08 <tcp_rexmit+0x18>
  }
  seg->next = *cur_seg;
  405d24:	682b      	ldr	r3, [r5, #0]
  405d26:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
  405d28:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  405d2a:	683b      	ldr	r3, [r7, #0]
  405d2c:	b15b      	cbz	r3, 405d46 <tcp_rexmit+0x56>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  405d2e:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
  405d32:	2bff      	cmp	r3, #255	; 0xff
  405d34:	d002      	beq.n	405d3c <tcp_rexmit+0x4c>
    ++pcb->nrtx;
  405d36:	3301      	adds	r3, #1
  405d38:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  405d3c:	2300      	movs	r3, #0
  405d3e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  405d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pcb->unsent_oversize = 0;
  405d46:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
  405d4a:	e7f0      	b.n	405d2e <tcp_rexmit+0x3e>
  405d4c:	0040105f 	.word	0x0040105f

00405d50 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  405d50:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  405d52:	b11b      	cbz	r3, 405d5c <tcp_rexmit_fast+0xc>
  405d54:	7e83      	ldrb	r3, [r0, #26]
  405d56:	f013 0f04 	tst.w	r3, #4
  405d5a:	d000      	beq.n	405d5e <tcp_rexmit_fast+0xe>
  405d5c:	4770      	bx	lr
{
  405d5e:	b510      	push	{r4, lr}
  405d60:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  405d62:	4b11      	ldr	r3, [pc, #68]	; (405da8 <tcp_rexmit_fast+0x58>)
  405d64:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  405d66:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  405d6a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
  405d6e:	4293      	cmp	r3, r2
  405d70:	bf34      	ite	cc
  405d72:	f3c3 024f 	ubfxcc	r2, r3, #1, #16
  405d76:	f3c2 024f 	ubfxcs	r2, r2, #1, #16
  405d7a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  405d7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  405d80:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  405d84:	d202      	bcs.n	405d8c <tcp_rexmit_fast+0x3c>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  405d86:	005a      	lsls	r2, r3, #1
  405d88:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  405d8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405d90:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
  405d94:	4413      	add	r3, r2
  405d96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
  405d9a:	7ea3      	ldrb	r3, [r4, #26]
  405d9c:	f043 0304 	orr.w	r3, r3, #4
  405da0:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  405da2:	2300      	movs	r3, #0
  405da4:	8623      	strh	r3, [r4, #48]	; 0x30
  405da6:	bd10      	pop	{r4, pc}
  405da8:	00405cf1 	.word	0x00405cf1

00405dac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  405dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405db0:	b085      	sub	sp, #20
  405db2:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  405db4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  405db6:	3801      	subs	r0, #1
  405db8:	4b1a      	ldr	r3, [pc, #104]	; (405e24 <tcp_keepalive+0x78>)
  405dba:	4798      	blx	r3
  405dbc:	4603      	mov	r3, r0
  405dbe:	2200      	movs	r2, #0
  405dc0:	4611      	mov	r1, r2
  405dc2:	4620      	mov	r0, r4
  405dc4:	4d18      	ldr	r5, [pc, #96]	; (405e28 <tcp_keepalive+0x7c>)
  405dc6:	47a8      	blx	r5
  if (p == NULL) {
  405dc8:	b340      	cbz	r0, 405e1c <tcp_keepalive+0x70>
  405dca:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  405dcc:	1d26      	adds	r6, r4, #4
  405dce:	4630      	mov	r0, r6
  405dd0:	4b16      	ldr	r3, [pc, #88]	; (405e2c <tcp_keepalive+0x80>)
  405dd2:	4798      	blx	r3
  if (netif == NULL) {
  405dd4:	4607      	mov	r7, r0
  405dd6:	b1f0      	cbz	r0, 405e16 <tcp_keepalive+0x6a>
    err = ERR_RTE;
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  405dd8:	f8d5 8004 	ldr.w	r8, [r5, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  405ddc:	892a      	ldrh	r2, [r5, #8]
  405dde:	9600      	str	r6, [sp, #0]
  405de0:	4623      	mov	r3, r4
  405de2:	2106      	movs	r1, #6
  405de4:	4628      	mov	r0, r5
  405de6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 405e38 <tcp_keepalive+0x8c>
  405dea:	47c8      	blx	r9
  405dec:	f8a8 0010 	strh.w	r0, [r8, #16]
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  405df0:	7aa3      	ldrb	r3, [r4, #10]
  405df2:	9702      	str	r7, [sp, #8]
  405df4:	2206      	movs	r2, #6
  405df6:	9201      	str	r2, [sp, #4]
  405df8:	2200      	movs	r2, #0
  405dfa:	9200      	str	r2, [sp, #0]
  405dfc:	4632      	mov	r2, r6
  405dfe:	4621      	mov	r1, r4
  405e00:	4628      	mov	r0, r5
  405e02:	4c0b      	ldr	r4, [pc, #44]	; (405e30 <tcp_keepalive+0x84>)
  405e04:	47a0      	blx	r4
  405e06:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  405e08:	4628      	mov	r0, r5
  405e0a:	4b0a      	ldr	r3, [pc, #40]	; (405e34 <tcp_keepalive+0x88>)
  405e0c:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
  405e0e:	4620      	mov	r0, r4
  405e10:	b005      	add	sp, #20
  405e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = ERR_RTE;
  405e16:	f06f 0403 	mvn.w	r4, #3
  405e1a:	e7f5      	b.n	405e08 <tcp_keepalive+0x5c>
    return ERR_MEM;
  405e1c:	f04f 34ff 	mov.w	r4, #4294967295
  405e20:	e7f5      	b.n	405e0e <tcp_keepalive+0x62>
  405e22:	bf00      	nop
  405e24:	0040105f 	.word	0x0040105f
  405e28:	004053a5 	.word	0x004053a5
  405e2c:	00401b5d 	.word	0x00401b5d
  405e30:	00401eb5 	.word	0x00401eb5
  405e34:	00402c19 	.word	0x00402c19
  405e38:	00401189 	.word	0x00401189

00405e3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  405e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405e40:	b085      	sub	sp, #20
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  405e42:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
  405e44:	b1fd      	cbz	r5, 405e86 <tcp_zero_window_probe+0x4a>
  405e46:	4604      	mov	r4, r0
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  405e48:	68eb      	ldr	r3, [r5, #12]
  405e4a:	8998      	ldrh	r0, [r3, #12]
  405e4c:	4b37      	ldr	r3, [pc, #220]	; (405f2c <tcp_zero_window_probe+0xf0>)
  405e4e:	4798      	blx	r3
  405e50:	f010 0f01 	tst.w	r0, #1
  405e54:	d001      	beq.n	405e5a <tcp_zero_window_probe+0x1e>
  405e56:	892b      	ldrh	r3, [r5, #8]
  405e58:	b31b      	cbz	r3, 405ea2 <tcp_zero_window_probe+0x66>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  405e5a:	68eb      	ldr	r3, [r5, #12]
  405e5c:	685b      	ldr	r3, [r3, #4]
  405e5e:	2201      	movs	r2, #1
  405e60:	2100      	movs	r1, #0
  405e62:	4620      	mov	r0, r4
  405e64:	4e32      	ldr	r6, [pc, #200]	; (405f30 <tcp_zero_window_probe+0xf4>)
  405e66:	47b0      	blx	r6
  if (p == NULL) {
  405e68:	4606      	mov	r6, r0
  405e6a:	b1b8      	cbz	r0, 405e9c <tcp_zero_window_probe+0x60>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  405e6c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  405e70:	6868      	ldr	r0, [r5, #4]
  405e72:	8903      	ldrh	r3, [r0, #8]
  405e74:	892a      	ldrh	r2, [r5, #8]
  405e76:	1a9b      	subs	r3, r3, r2
  405e78:	b29b      	uxth	r3, r3
  405e7a:	2201      	movs	r2, #1
  405e7c:	f108 0114 	add.w	r1, r8, #20
  405e80:	4f2c      	ldr	r7, [pc, #176]	; (405f34 <tcp_zero_window_probe+0xf8>)
  405e82:	47b8      	blx	r7
  405e84:	e024      	b.n	405ed0 <tcp_zero_window_probe+0x94>
    seg = pcb->unsent;
  405e86:	6e85      	ldr	r5, [r0, #104]	; 0x68
  if (seg == NULL) {
  405e88:	2d00      	cmp	r5, #0
  405e8a:	d1dc      	bne.n	405e46 <tcp_zero_window_probe+0xa>
    return ERR_OK;
  405e8c:	2400      	movs	r4, #0
  405e8e:	e049      	b.n	405f24 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
  405e90:	f06f 0403 	mvn.w	r4, #3
  405e94:	e043      	b.n	405f1e <tcp_zero_window_probe+0xe2>
    return ERR_MEM;
  405e96:	f04f 34ff 	mov.w	r4, #4294967295
  405e9a:	e043      	b.n	405f24 <tcp_zero_window_probe+0xe8>
  405e9c:	f04f 34ff 	mov.w	r4, #4294967295
  405ea0:	e040      	b.n	405f24 <tcp_zero_window_probe+0xe8>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  405ea2:	68eb      	ldr	r3, [r5, #12]
  405ea4:	685b      	ldr	r3, [r3, #4]
  405ea6:	2200      	movs	r2, #0
  405ea8:	4611      	mov	r1, r2
  405eaa:	4620      	mov	r0, r4
  405eac:	4e20      	ldr	r6, [pc, #128]	; (405f30 <tcp_zero_window_probe+0xf4>)
  405eae:	47b0      	blx	r6
  if (p == NULL) {
  405eb0:	4606      	mov	r6, r0
  405eb2:	2800      	cmp	r0, #0
  405eb4:	d0ef      	beq.n	405e96 <tcp_zero_window_probe+0x5a>
  tcphdr = (struct tcp_hdr *)p->payload;
  405eb6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  405eba:	f8b8 700c 	ldrh.w	r7, [r8, #12]
  405ebe:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
  405ec2:	b2bf      	uxth	r7, r7
  405ec4:	2011      	movs	r0, #17
  405ec6:	4b19      	ldr	r3, [pc, #100]	; (405f2c <tcp_zero_window_probe+0xf0>)
  405ec8:	4798      	blx	r3
  405eca:	4338      	orrs	r0, r7
  405ecc:	f8a8 000c 	strh.w	r0, [r8, #12]
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  405ed0:	68eb      	ldr	r3, [r5, #12]
  405ed2:	6858      	ldr	r0, [r3, #4]
  405ed4:	4b18      	ldr	r3, [pc, #96]	; (405f38 <tcp_zero_window_probe+0xfc>)
  405ed6:	4798      	blx	r3
  405ed8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  405eda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  405edc:	1a1b      	subs	r3, r3, r0
  405ede:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  405ee0:	bfb8      	it	lt
  405ee2:	64e0      	strlt	r0, [r4, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  405ee4:	1d25      	adds	r5, r4, #4
  405ee6:	4628      	mov	r0, r5
  405ee8:	4b14      	ldr	r3, [pc, #80]	; (405f3c <tcp_zero_window_probe+0x100>)
  405eea:	4798      	blx	r3
  if (netif == NULL) {
  405eec:	4607      	mov	r7, r0
  405eee:	2800      	cmp	r0, #0
  405ef0:	d0ce      	beq.n	405e90 <tcp_zero_window_probe+0x54>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  405ef2:	8932      	ldrh	r2, [r6, #8]
  405ef4:	9500      	str	r5, [sp, #0]
  405ef6:	4623      	mov	r3, r4
  405ef8:	2106      	movs	r1, #6
  405efa:	4630      	mov	r0, r6
  405efc:	f8df 9048 	ldr.w	r9, [pc, #72]	; 405f48 <tcp_zero_window_probe+0x10c>
  405f00:	47c8      	blx	r9
  405f02:	f8a8 0010 	strh.w	r0, [r8, #16]
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  405f06:	7aa3      	ldrb	r3, [r4, #10]
  405f08:	9702      	str	r7, [sp, #8]
  405f0a:	2206      	movs	r2, #6
  405f0c:	9201      	str	r2, [sp, #4]
  405f0e:	2200      	movs	r2, #0
  405f10:	9200      	str	r2, [sp, #0]
  405f12:	462a      	mov	r2, r5
  405f14:	4621      	mov	r1, r4
  405f16:	4630      	mov	r0, r6
  405f18:	4c09      	ldr	r4, [pc, #36]	; (405f40 <tcp_zero_window_probe+0x104>)
  405f1a:	47a0      	blx	r4
  405f1c:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  405f1e:	4630      	mov	r0, r6
  405f20:	4b08      	ldr	r3, [pc, #32]	; (405f44 <tcp_zero_window_probe+0x108>)
  405f22:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
  405f24:	4620      	mov	r0, r4
  405f26:	b005      	add	sp, #20
  405f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405f2c:	00401059 	.word	0x00401059
  405f30:	004053a5 	.word	0x004053a5
  405f34:	00402f5d 	.word	0x00402f5d
  405f38:	0040105f 	.word	0x0040105f
  405f3c:	00401b5d 	.word	0x00401b5d
  405f40:	00401eb5 	.word	0x00401eb5
  405f44:	00402c19 	.word	0x00402c19
  405f48:	00401189 	.word	0x00401189

00405f4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  405f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f50:	4605      	mov	r5, r0
  405f52:	4688      	mov	r8, r1
  405f54:	4617      	mov	r7, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  405f56:	2005      	movs	r0, #5
  405f58:	4b27      	ldr	r3, [pc, #156]	; (405ff8 <sys_timeout+0xac>)
  405f5a:	4798      	blx	r3
  if (timeout == NULL) {
  405f5c:	2800      	cmp	r0, #0
  405f5e:	d049      	beq.n	405ff4 <sys_timeout+0xa8>
  405f60:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
  405f62:	4b26      	ldr	r3, [pc, #152]	; (405ffc <sys_timeout+0xb0>)
  405f64:	4798      	blx	r3
  if (next_timeout == NULL) {
  405f66:	4b26      	ldr	r3, [pc, #152]	; (406000 <sys_timeout+0xb4>)
  405f68:	681e      	ldr	r6, [r3, #0]
  405f6a:	b1fe      	cbz	r6, 405fac <sys_timeout+0x60>
    diff = 0;
    timeouts_last_time = now;
  } else {
    diff = now - timeouts_last_time;
  405f6c:	4b25      	ldr	r3, [pc, #148]	; (406004 <sys_timeout+0xb8>)
  405f6e:	681b      	ldr	r3, [r3, #0]
  405f70:	1aeb      	subs	r3, r5, r3
  }

  timeout->next = NULL;
  405f72:	2200      	movs	r2, #0
  405f74:	6022      	str	r2, [r4, #0]
  timeout->h = handler;
  405f76:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
  405f7a:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
  405f7c:	4418      	add	r0, r3
  405f7e:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
  405f80:	6873      	ldr	r3, [r6, #4]
  405f82:	429d      	cmp	r5, r3
  405f84:	d31e      	bcc.n	405fc4 <sys_timeout+0x78>
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  405f86:	1ac0      	subs	r0, r0, r3
  405f88:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  405f8a:	6832      	ldr	r2, [r6, #0]
  405f8c:	2a00      	cmp	r2, #0
  405f8e:	d02a      	beq.n	405fe6 <sys_timeout+0x9a>
  405f90:	6853      	ldr	r3, [r2, #4]
  405f92:	4298      	cmp	r0, r3
  405f94:	d31d      	bcc.n	405fd2 <sys_timeout+0x86>
      timeout->time -= t->time;
  405f96:	6860      	ldr	r0, [r4, #4]
  405f98:	6853      	ldr	r3, [r2, #4]
  405f9a:	1ac0      	subs	r0, r0, r3
  405f9c:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  405f9e:	6813      	ldr	r3, [r2, #0]
  405fa0:	b313      	cbz	r3, 405fe8 <sys_timeout+0x9c>
  405fa2:	6859      	ldr	r1, [r3, #4]
  405fa4:	4288      	cmp	r0, r1
  405fa6:	d316      	bcc.n	405fd6 <sys_timeout+0x8a>
  405fa8:	461a      	mov	r2, r3
  405faa:	e7f4      	b.n	405f96 <sys_timeout+0x4a>
    timeouts_last_time = now;
  405fac:	4b15      	ldr	r3, [pc, #84]	; (406004 <sys_timeout+0xb8>)
  405fae:	6018      	str	r0, [r3, #0]
  timeout->next = NULL;
  405fb0:	2300      	movs	r3, #0
  405fb2:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
  405fb4:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
  405fb8:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
  405fba:	6065      	str	r5, [r4, #4]
    next_timeout = timeout;
  405fbc:	4b10      	ldr	r3, [pc, #64]	; (406000 <sys_timeout+0xb4>)
  405fbe:	601c      	str	r4, [r3, #0]
    return;
  405fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
  405fc4:	1b5b      	subs	r3, r3, r5
  405fc6:	6073      	str	r3, [r6, #4]
    timeout->next = next_timeout;
  405fc8:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
  405fca:	4b0d      	ldr	r3, [pc, #52]	; (406000 <sys_timeout+0xb4>)
  405fcc:	601c      	str	r4, [r3, #0]
  405fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  405fd2:	4613      	mov	r3, r2
  405fd4:	4632      	mov	r2, r6
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  405fd6:	6859      	ldr	r1, [r3, #4]
  405fd8:	1a08      	subs	r0, r1, r0
  405fda:	6058      	str	r0, [r3, #4]
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
        }
        timeout->next = t->next;
  405fdc:	6813      	ldr	r3, [r2, #0]
  405fde:	6023      	str	r3, [r4, #0]
        t->next = timeout;
  405fe0:	6014      	str	r4, [r2, #0]
        break;
  405fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  405fe6:	4632      	mov	r2, r6
        } else if (timeout->time > msecs) {
  405fe8:	4285      	cmp	r5, r0
  405fea:	d2f7      	bcs.n	405fdc <sys_timeout+0x90>
          timeout->time = msecs + next_timeout->time;
  405fec:	6873      	ldr	r3, [r6, #4]
  405fee:	441d      	add	r5, r3
  405ff0:	6065      	str	r5, [r4, #4]
  405ff2:	e7f3      	b.n	405fdc <sys_timeout+0x90>
  405ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ff8:	004029b1 	.word	0x004029b1
  405ffc:	00406c59 	.word	0x00406c59
  406000:	20400bec 	.word	0x20400bec
  406004:	20400bf4 	.word	0x20400bf4

00406008 <tcp_timer_needed>:
{
  406008:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  40600a:	4b0a      	ldr	r3, [pc, #40]	; (406034 <tcp_timer_needed+0x2c>)
  40600c:	681b      	ldr	r3, [r3, #0]
  40600e:	b953      	cbnz	r3, 406026 <tcp_timer_needed+0x1e>
  406010:	4b09      	ldr	r3, [pc, #36]	; (406038 <tcp_timer_needed+0x30>)
  406012:	681b      	ldr	r3, [r3, #0]
  406014:	b143      	cbz	r3, 406028 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
  406016:	2201      	movs	r2, #1
  406018:	4b06      	ldr	r3, [pc, #24]	; (406034 <tcp_timer_needed+0x2c>)
  40601a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  40601c:	2200      	movs	r2, #0
  40601e:	4907      	ldr	r1, [pc, #28]	; (40603c <tcp_timer_needed+0x34>)
  406020:	20fa      	movs	r0, #250	; 0xfa
  406022:	4b07      	ldr	r3, [pc, #28]	; (406040 <tcp_timer_needed+0x38>)
  406024:	4798      	blx	r3
  406026:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  406028:	4b06      	ldr	r3, [pc, #24]	; (406044 <tcp_timer_needed+0x3c>)
  40602a:	681b      	ldr	r3, [r3, #0]
  40602c:	2b00      	cmp	r3, #0
  40602e:	d1f2      	bne.n	406016 <tcp_timer_needed+0xe>
  406030:	e7f9      	b.n	406026 <tcp_timer_needed+0x1e>
  406032:	bf00      	nop
  406034:	20400bf0 	.word	0x20400bf0
  406038:	20404980 	.word	0x20404980
  40603c:	00406049 	.word	0x00406049
  406040:	00405f4d 	.word	0x00405f4d
  406044:	20404990 	.word	0x20404990

00406048 <tcpip_tcp_timer>:
{
  406048:	b508      	push	{r3, lr}
  tcp_tmr();
  40604a:	4b09      	ldr	r3, [pc, #36]	; (406070 <tcpip_tcp_timer+0x28>)
  40604c:	4798      	blx	r3
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  40604e:	4b09      	ldr	r3, [pc, #36]	; (406074 <tcpip_tcp_timer+0x2c>)
  406050:	681b      	ldr	r3, [r3, #0]
  406052:	b12b      	cbz	r3, 406060 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  406054:	2200      	movs	r2, #0
  406056:	4908      	ldr	r1, [pc, #32]	; (406078 <tcpip_tcp_timer+0x30>)
  406058:	20fa      	movs	r0, #250	; 0xfa
  40605a:	4b08      	ldr	r3, [pc, #32]	; (40607c <tcpip_tcp_timer+0x34>)
  40605c:	4798      	blx	r3
  40605e:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  406060:	4b07      	ldr	r3, [pc, #28]	; (406080 <tcpip_tcp_timer+0x38>)
  406062:	681b      	ldr	r3, [r3, #0]
  406064:	2b00      	cmp	r3, #0
  406066:	d1f5      	bne.n	406054 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
  406068:	2200      	movs	r2, #0
  40606a:	4b06      	ldr	r3, [pc, #24]	; (406084 <tcpip_tcp_timer+0x3c>)
  40606c:	601a      	str	r2, [r3, #0]
  40606e:	bd08      	pop	{r3, pc}
  406070:	00403a61 	.word	0x00403a61
  406074:	20404980 	.word	0x20404980
  406078:	00406049 	.word	0x00406049
  40607c:	00405f4d 	.word	0x00405f4d
  406080:	20404990 	.word	0x20404990
  406084:	20400bf0 	.word	0x20400bf0

00406088 <sys_timeouts_init>:
{
  406088:	b570      	push	{r4, r5, r6, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  40608a:	4e0a      	ldr	r6, [pc, #40]	; (4060b4 <sys_timeouts_init+0x2c>)
  40608c:	4d0a      	ldr	r5, [pc, #40]	; (4060b8 <sys_timeouts_init+0x30>)
  40608e:	f106 0208 	add.w	r2, r6, #8
  406092:	4629      	mov	r1, r5
  406094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406098:	4c08      	ldr	r4, [pc, #32]	; (4060bc <sys_timeouts_init+0x34>)
  40609a:	47a0      	blx	r4
  40609c:	f106 0210 	add.w	r2, r6, #16
  4060a0:	4629      	mov	r1, r5
  4060a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4060a6:	47a0      	blx	r4
  timeouts_last_time = sys_now();
  4060a8:	4b05      	ldr	r3, [pc, #20]	; (4060c0 <sys_timeouts_init+0x38>)
  4060aa:	4798      	blx	r3
  4060ac:	4b05      	ldr	r3, [pc, #20]	; (4060c4 <sys_timeouts_init+0x3c>)
  4060ae:	6018      	str	r0, [r3, #0]
  4060b0:	bd70      	pop	{r4, r5, r6, pc}
  4060b2:	bf00      	nop
  4060b4:	0040a490 	.word	0x0040a490
  4060b8:	004060c9 	.word	0x004060c9
  4060bc:	00405f4d 	.word	0x00405f4d
  4060c0:	00406c59 	.word	0x00406c59
  4060c4:	20400bf4 	.word	0x20400bf4

004060c8 <cyclic_timer>:
{
  4060c8:	b510      	push	{r4, lr}
  4060ca:	4604      	mov	r4, r0
  cyclic->handler();
  4060cc:	6843      	ldr	r3, [r0, #4]
  4060ce:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  4060d0:	4622      	mov	r2, r4
  4060d2:	4902      	ldr	r1, [pc, #8]	; (4060dc <cyclic_timer+0x14>)
  4060d4:	6820      	ldr	r0, [r4, #0]
  4060d6:	4b02      	ldr	r3, [pc, #8]	; (4060e0 <cyclic_timer+0x18>)
  4060d8:	4798      	blx	r3
  4060da:	bd10      	pop	{r4, pc}
  4060dc:	004060c9 	.word	0x004060c9
  4060e0:	00405f4d 	.word	0x00405f4d

004060e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  4060e4:	4770      	bx	lr
	...

004060e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  4060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060ec:	b083      	sub	sp, #12
  4060ee:	4606      	mov	r6, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  4060f0:	8943      	ldrh	r3, [r0, #10]
  4060f2:	2b07      	cmp	r3, #7
  4060f4:	d91f      	bls.n	406136 <udp_input+0x4e>
  4060f6:	4689      	mov	r9, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
  4060f8:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  4060fc:	4b53      	ldr	r3, [pc, #332]	; (40624c <udp_input+0x164>)
  4060fe:	6819      	ldr	r1, [r3, #0]
  406100:	6958      	ldr	r0, [r3, #20]
  406102:	4b53      	ldr	r3, [pc, #332]	; (406250 <udp_input+0x168>)
  406104:	4798      	blx	r3
  406106:	4605      	mov	r5, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  406108:	f8b8 0000 	ldrh.w	r0, [r8]
  40610c:	4c51      	ldr	r4, [pc, #324]	; (406254 <udp_input+0x16c>)
  40610e:	47a0      	blx	r4
  406110:	4607      	mov	r7, r0
  dest = lwip_ntohs(udphdr->dest);
  406112:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  406116:	47a0      	blx	r4
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  406118:	4b4f      	ldr	r3, [pc, #316]	; (406258 <udp_input+0x170>)
  40611a:	f8d3 c000 	ldr.w	ip, [r3]
  40611e:	f1bc 0f00 	cmp.w	ip, #0
  406122:	d065      	beq.n	4061f0 <udp_input+0x108>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  406124:	4b49      	ldr	r3, [pc, #292]	; (40624c <udp_input+0x164>)
  406126:	f8d3 e014 	ldr.w	lr, [r3, #20]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  40612a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  40612e:	4663      	mov	r3, ip
  406130:	2400      	movs	r4, #0
  406132:	4621      	mov	r1, r4
  406134:	e01a      	b.n	40616c <udp_input+0x84>
    pbuf_free(p);
  406136:	4b49      	ldr	r3, [pc, #292]	; (40625c <udp_input+0x174>)
  406138:	4798      	blx	r3
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  40613a:	b003      	add	sp, #12
  40613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  406140:	b11b      	cbz	r3, 40614a <udp_input+0x62>
  406142:	681a      	ldr	r2, [r3, #0]
  406144:	b10a      	cbz	r2, 40614a <udp_input+0x62>
  406146:	4572      	cmp	r2, lr
  406148:	d10c      	bne.n	406164 <udp_input+0x7c>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  40614a:	7c1a      	ldrb	r2, [r3, #16]
  40614c:	f012 0f04 	tst.w	r2, #4
  406150:	d105      	bne.n	40615e <udp_input+0x76>
  406152:	fab4 f284 	clz	r2, r4
  406156:	0952      	lsrs	r2, r2, #5
  406158:	2a00      	cmp	r2, #0
  40615a:	bf18      	it	ne
  40615c:	461c      	movne	r4, r3
      if ((pcb->remote_port == src) &&
  40615e:	8a9a      	ldrh	r2, [r3, #20]
  406160:	42ba      	cmp	r2, r7
  406162:	d018      	beq.n	406196 <udp_input+0xae>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  406164:	68da      	ldr	r2, [r3, #12]
  406166:	4619      	mov	r1, r3
  406168:	b31a      	cbz	r2, 4061b2 <udp_input+0xca>
  40616a:	4613      	mov	r3, r2
    if ((pcb->local_port == dest) &&
  40616c:	8a5a      	ldrh	r2, [r3, #18]
  40616e:	4282      	cmp	r2, r0
  406170:	d1f8      	bne.n	406164 <udp_input+0x7c>
    if (broadcast != 0) {
  406172:	2d00      	cmp	r5, #0
  406174:	d0e4      	beq.n	406140 <udp_input+0x58>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  406176:	2b00      	cmp	r3, #0
  406178:	d0e7      	beq.n	40614a <udp_input+0x62>
  40617a:	681a      	ldr	r2, [r3, #0]
  40617c:	2a00      	cmp	r2, #0
  40617e:	d0e4      	beq.n	40614a <udp_input+0x62>
  406180:	f1be 3fff 	cmp.w	lr, #4294967295
  406184:	d0e1      	beq.n	40614a <udp_input+0x62>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  406186:	ea82 0b0e 	eor.w	fp, r2, lr
  40618a:	f8d9 2008 	ldr.w	r2, [r9, #8]
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  40618e:	ea1b 0f02 	tst.w	fp, r2
  406192:	d1e7      	bne.n	406164 <udp_input+0x7c>
  406194:	e7d9      	b.n	40614a <udp_input+0x62>
          (ip_addr_isany_val(pcb->remote_ip) ||
  406196:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
  406198:	b10a      	cbz	r2, 40619e <udp_input+0xb6>
          (ip_addr_isany_val(pcb->remote_ip) ||
  40619a:	4552      	cmp	r2, sl
  40619c:	d1e2      	bne.n	406164 <udp_input+0x7c>
        if (prev != NULL) {
  40619e:	b129      	cbz	r1, 4061ac <udp_input+0xc4>
          prev->next = pcb->next;
  4061a0:	68da      	ldr	r2, [r3, #12]
  4061a2:	60ca      	str	r2, [r1, #12]
          pcb->next = udp_pcbs;
  4061a4:	f8c3 c00c 	str.w	ip, [r3, #12]
          udp_pcbs = pcb;
  4061a8:	4a2b      	ldr	r2, [pc, #172]	; (406258 <udp_input+0x170>)
  4061aa:	6013      	str	r3, [r2, #0]
  if (pcb == NULL) {
  4061ac:	b10b      	cbz	r3, 4061b2 <udp_input+0xca>
  4061ae:	461c      	mov	r4, r3
  4061b0:	e000      	b.n	4061b4 <udp_input+0xcc>
  if (pcb != NULL) {
  4061b2:	b1ec      	cbz	r4, 4061f0 <udp_input+0x108>
        if (udphdr->chksum != 0) {
  4061b4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  4061b8:	b153      	cbz	r3, 4061d0 <udp_input+0xe8>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  4061ba:	4b29      	ldr	r3, [pc, #164]	; (406260 <udp_input+0x178>)
  4061bc:	8932      	ldrh	r2, [r6, #8]
  4061be:	1d19      	adds	r1, r3, #4
  4061c0:	9100      	str	r1, [sp, #0]
  4061c2:	2111      	movs	r1, #17
  4061c4:	4630      	mov	r0, r6
  4061c6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 406270 <udp_input+0x188>
  4061ca:	47c0      	blx	r8
  4061cc:	2800      	cmp	r0, #0
  4061ce:	d139      	bne.n	406244 <udp_input+0x15c>
    if (pbuf_header(p, -UDP_HLEN)) {
  4061d0:	f06f 0107 	mvn.w	r1, #7
  4061d4:	4630      	mov	r0, r6
  4061d6:	4b23      	ldr	r3, [pc, #140]	; (406264 <udp_input+0x17c>)
  4061d8:	4798      	blx	r3
  4061da:	b9a8      	cbnz	r0, 406208 <udp_input+0x120>
    if (pcb != NULL) {
  4061dc:	b1e4      	cbz	r4, 406218 <udp_input+0x130>
      if (pcb->recv != NULL) {
  4061de:	69a5      	ldr	r5, [r4, #24]
  4061e0:	b1b5      	cbz	r5, 406210 <udp_input+0x128>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  4061e2:	69e0      	ldr	r0, [r4, #28]
  4061e4:	9700      	str	r7, [sp, #0]
  4061e6:	4b1e      	ldr	r3, [pc, #120]	; (406260 <udp_input+0x178>)
  4061e8:	4632      	mov	r2, r6
  4061ea:	4621      	mov	r1, r4
  4061ec:	47a8      	blx	r5
  4061ee:	e7a4      	b.n	40613a <udp_input+0x52>
  if (for_us) {
  4061f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4061f4:	4b15      	ldr	r3, [pc, #84]	; (40624c <udp_input+0x164>)
  4061f6:	695b      	ldr	r3, [r3, #20]
  4061f8:	429a      	cmp	r2, r3
  4061fa:	d003      	beq.n	406204 <udp_input+0x11c>
    pbuf_free(p);
  4061fc:	4630      	mov	r0, r6
  4061fe:	4b17      	ldr	r3, [pc, #92]	; (40625c <udp_input+0x174>)
  406200:	4798      	blx	r3
  406202:	e79a      	b.n	40613a <udp_input+0x52>
  406204:	2400      	movs	r4, #0
  406206:	e7d5      	b.n	4061b4 <udp_input+0xcc>
      pbuf_free(p);
  406208:	4630      	mov	r0, r6
  40620a:	4b14      	ldr	r3, [pc, #80]	; (40625c <udp_input+0x174>)
  40620c:	4798      	blx	r3
      goto end;
  40620e:	e794      	b.n	40613a <udp_input+0x52>
        pbuf_free(p);
  406210:	4630      	mov	r0, r6
  406212:	4b12      	ldr	r3, [pc, #72]	; (40625c <udp_input+0x174>)
  406214:	4798      	blx	r3
        goto end;
  406216:	e790      	b.n	40613a <udp_input+0x52>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  406218:	b985      	cbnz	r5, 40623c <udp_input+0x154>
  40621a:	4b0c      	ldr	r3, [pc, #48]	; (40624c <udp_input+0x164>)
  40621c:	695b      	ldr	r3, [r3, #20]
  40621e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  406222:	2be0      	cmp	r3, #224	; 0xe0
  406224:	d00a      	beq.n	40623c <udp_input+0x154>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  406226:	4b09      	ldr	r3, [pc, #36]	; (40624c <udp_input+0x164>)
  406228:	8999      	ldrh	r1, [r3, #12]
  40622a:	3108      	adds	r1, #8
  40622c:	b209      	sxth	r1, r1
  40622e:	4630      	mov	r0, r6
  406230:	4b0d      	ldr	r3, [pc, #52]	; (406268 <udp_input+0x180>)
  406232:	4798      	blx	r3
        icmp_port_unreach(ip_current_is_v6(), p);
  406234:	2103      	movs	r1, #3
  406236:	4630      	mov	r0, r6
  406238:	4b0c      	ldr	r3, [pc, #48]	; (40626c <udp_input+0x184>)
  40623a:	4798      	blx	r3
      pbuf_free(p);
  40623c:	4630      	mov	r0, r6
  40623e:	4b07      	ldr	r3, [pc, #28]	; (40625c <udp_input+0x174>)
  406240:	4798      	blx	r3
  406242:	e77a      	b.n	40613a <udp_input+0x52>
  pbuf_free(p);
  406244:	4630      	mov	r0, r6
  406246:	4b05      	ldr	r3, [pc, #20]	; (40625c <udp_input+0x174>)
  406248:	4798      	blx	r3
  40624a:	e776      	b.n	40613a <udp_input+0x52>
  40624c:	20401e68 	.word	0x20401e68
  406250:	00401ee5 	.word	0x00401ee5
  406254:	00401059 	.word	0x00401059
  406258:	20404998 	.word	0x20404998
  40625c:	00402c19 	.word	0x00402c19
  406260:	20401e78 	.word	0x20401e78
  406264:	00402bf9 	.word	0x00402bf9
  406268:	00402c09 	.word	0x00402c09
  40626c:	00401b3d 	.word	0x00401b3d
  406270:	00401189 	.word	0x00401189

00406274 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  406274:	b158      	cbz	r0, 40628e <udp_netif_ip_addr_changed+0x1a>
{
  406276:	b410      	push	{r4}
  406278:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  40627a:	6803      	ldr	r3, [r0, #0]
  40627c:	b12b      	cbz	r3, 40628a <udp_netif_ip_addr_changed+0x16>
  40627e:	b121      	cbz	r1, 40628a <udp_netif_ip_addr_changed+0x16>
  406280:	680b      	ldr	r3, [r1, #0]
  406282:	b113      	cbz	r3, 40628a <udp_netif_ip_addr_changed+0x16>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  406284:	4b07      	ldr	r3, [pc, #28]	; (4062a4 <udp_netif_ip_addr_changed+0x30>)
  406286:	681b      	ldr	r3, [r3, #0]
  406288:	b92b      	cbnz	r3, 406296 <udp_netif_ip_addr_changed+0x22>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
  40628a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40628e:	4770      	bx	lr
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  406290:	68db      	ldr	r3, [r3, #12]
  406292:	2b00      	cmp	r3, #0
  406294:	d0f9      	beq.n	40628a <udp_netif_ip_addr_changed+0x16>
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  406296:	6818      	ldr	r0, [r3, #0]
  406298:	6822      	ldr	r2, [r4, #0]
  40629a:	4290      	cmp	r0, r2
  40629c:	d1f8      	bne.n	406290 <udp_netif_ip_addr_changed+0x1c>
        ip_addr_copy(upcb->local_ip, *new_addr);
  40629e:	680a      	ldr	r2, [r1, #0]
  4062a0:	601a      	str	r2, [r3, #0]
  4062a2:	e7f5      	b.n	406290 <udp_netif_ip_addr_changed+0x1c>
  4062a4:	20404998 	.word	0x20404998

004062a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  4062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4062aa:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  4062ac:	8945      	ldrh	r5, [r0, #10]
  4062ae:	2d0e      	cmp	r5, #14
  4062b0:	d916      	bls.n	4062e0 <ethernet_input+0x38>
  4062b2:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  4062b4:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  4062b6:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  4062b8:	7803      	ldrb	r3, [r0, #0]
  4062ba:	f013 0f01 	tst.w	r3, #1
  4062be:	d00a      	beq.n	4062d6 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  4062c0:	2b01      	cmp	r3, #1
  4062c2:	d012      	beq.n	4062ea <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  4062c4:	2206      	movs	r2, #6
  4062c6:	4921      	ldr	r1, [pc, #132]	; (40634c <ethernet_input+0xa4>)
  4062c8:	4b21      	ldr	r3, [pc, #132]	; (406350 <ethernet_input+0xa8>)
  4062ca:	4798      	blx	r3
  4062cc:	b918      	cbnz	r0, 4062d6 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  4062ce:	7b63      	ldrb	r3, [r4, #13]
  4062d0:	f043 0308 	orr.w	r3, r3, #8
  4062d4:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
  4062d6:	2e08      	cmp	r6, #8
  4062d8:	d012      	beq.n	406300 <ethernet_input+0x58>
  4062da:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
  4062de:	d022      	beq.n	406326 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  4062e0:	4620      	mov	r0, r4
  4062e2:	4b1c      	ldr	r3, [pc, #112]	; (406354 <ethernet_input+0xac>)
  4062e4:	4798      	blx	r3
  return ERR_OK;
}
  4062e6:	2000      	movs	r0, #0
  4062e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  4062ea:	7843      	ldrb	r3, [r0, #1]
  4062ec:	2b00      	cmp	r3, #0
  4062ee:	d1f2      	bne.n	4062d6 <ethernet_input+0x2e>
  4062f0:	7883      	ldrb	r3, [r0, #2]
  4062f2:	2b5e      	cmp	r3, #94	; 0x5e
  4062f4:	d1ef      	bne.n	4062d6 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
  4062f6:	7b63      	ldrb	r3, [r4, #13]
  4062f8:	f043 0310 	orr.w	r3, r3, #16
  4062fc:	7363      	strb	r3, [r4, #13]
  4062fe:	e7ea      	b.n	4062d6 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  406300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  406304:	f013 0f08 	tst.w	r3, #8
  406308:	d0ea      	beq.n	4062e0 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  40630a:	2d0d      	cmp	r5, #13
  40630c:	dde8      	ble.n	4062e0 <ethernet_input+0x38>
  40630e:	f06f 010d 	mvn.w	r1, #13
  406312:	4620      	mov	r0, r4
  406314:	4b10      	ldr	r3, [pc, #64]	; (406358 <ethernet_input+0xb0>)
  406316:	4798      	blx	r3
  406318:	2800      	cmp	r0, #0
  40631a:	d1e1      	bne.n	4062e0 <ethernet_input+0x38>
        ip4_input(p, netif);
  40631c:	4639      	mov	r1, r7
  40631e:	4620      	mov	r0, r4
  406320:	4b0e      	ldr	r3, [pc, #56]	; (40635c <ethernet_input+0xb4>)
  406322:	4798      	blx	r3
      break;
  406324:	e7df      	b.n	4062e6 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  406326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40632a:	f013 0f08 	tst.w	r3, #8
  40632e:	d0d7      	beq.n	4062e0 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  406330:	2d0d      	cmp	r5, #13
  406332:	ddd5      	ble.n	4062e0 <ethernet_input+0x38>
  406334:	f06f 010d 	mvn.w	r1, #13
  406338:	4620      	mov	r0, r4
  40633a:	4b07      	ldr	r3, [pc, #28]	; (406358 <ethernet_input+0xb0>)
  40633c:	4798      	blx	r3
  40633e:	2800      	cmp	r0, #0
  406340:	d1ce      	bne.n	4062e0 <ethernet_input+0x38>
        etharp_input(p, netif);
  406342:	4639      	mov	r1, r7
  406344:	4620      	mov	r0, r4
  406346:	4b06      	ldr	r3, [pc, #24]	; (406360 <ethernet_input+0xb8>)
  406348:	4798      	blx	r3
      break;
  40634a:	e7cc      	b.n	4062e6 <ethernet_input+0x3e>
  40634c:	0040a4a8 	.word	0x0040a4a8
  406350:	00406f61 	.word	0x00406f61
  406354:	00402c19 	.word	0x00402c19
  406358:	00402bf9 	.word	0x00402bf9
  40635c:	00401bc1 	.word	0x00401bc1
  406360:	004013fd 	.word	0x004013fd

00406364 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  406364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406368:	4605      	mov	r5, r0
  40636a:	460c      	mov	r4, r1
  40636c:	4616      	mov	r6, r2
  40636e:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  406370:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  406374:	4b0e      	ldr	r3, [pc, #56]	; (4063b0 <ethernet_output+0x4c>)
  406376:	4798      	blx	r3
  406378:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  40637a:	210e      	movs	r1, #14
  40637c:	4620      	mov	r0, r4
  40637e:	4b0d      	ldr	r3, [pc, #52]	; (4063b4 <ethernet_output+0x50>)
  406380:	4798      	blx	r3
  406382:	b988      	cbnz	r0, 4063a8 <ethernet_output+0x44>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  406384:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
  406386:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  40638a:	683a      	ldr	r2, [r7, #0]
  40638c:	601a      	str	r2, [r3, #0]
  40638e:	88ba      	ldrh	r2, [r7, #4]
  406390:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
  406392:	6832      	ldr	r2, [r6, #0]
  406394:	f8c3 2006 	str.w	r2, [r3, #6]
  406398:	88b2      	ldrh	r2, [r6, #4]
  40639a:	815a      	strh	r2, [r3, #10]
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  40639c:	69ab      	ldr	r3, [r5, #24]
  40639e:	4621      	mov	r1, r4
  4063a0:	4628      	mov	r0, r5
  4063a2:	4798      	blx	r3
  4063a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
  4063a8:	f06f 0001 	mvn.w	r0, #1
}
  4063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4063b0:	00401059 	.word	0x00401059
  4063b4:	00402bf9 	.word	0x00402bf9

004063b8 <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  4063b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063bc:	4607      	mov	r7, r0
  4063be:	f100 0430 	add.w	r4, r0, #48	; 0x30
  4063c2:	4606      	mov	r6, r0
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  4063c4:	2500      	movs	r5, #0
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  4063c6:	f04f 0b03 	mov.w	fp, #3
  4063ca:	f44f 6ac0 	mov.w	sl, #1536	; 0x600
  4063ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 406414 <gmac_rx_populate_queue+0x5c>
  4063d2:	46a0      	mov	r8, r4
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  4063d4:	6823      	ldr	r3, [r4, #0]
  4063d6:	b133      	cbz	r3, 4063e6 <gmac_rx_populate_queue+0x2e>
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  4063d8:	3501      	adds	r5, #1
  4063da:	3404      	adds	r4, #4
  4063dc:	3608      	adds	r6, #8
  4063de:	2d03      	cmp	r5, #3
  4063e0:	d1f7      	bne.n	4063d2 <gmac_rx_populate_queue+0x1a>
  4063e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  4063e6:	465a      	mov	r2, fp
  4063e8:	4651      	mov	r1, sl
  4063ea:	2004      	movs	r0, #4
  4063ec:	47c8      	blx	r9
			if (p == NULL) {
  4063ee:	4603      	mov	r3, r0
  4063f0:	2800      	cmp	r0, #0
  4063f2:	d0f6      	beq.n	4063e2 <gmac_rx_populate_queue+0x2a>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  4063f4:	2d02      	cmp	r5, #2
  4063f6:	d007      	beq.n	406408 <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  4063f8:	6842      	ldr	r2, [r0, #4]
  4063fa:	f847 2035 	str.w	r2, [r7, r5, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  4063fe:	2200      	movs	r2, #0
  406400:	6072      	str	r2, [r6, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  406402:	f8c8 3000 	str.w	r3, [r8]
  406406:	e7e7      	b.n	4063d8 <gmac_rx_populate_queue+0x20>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  406408:	6842      	ldr	r2, [r0, #4]
  40640a:	f042 0202 	orr.w	r2, r2, #2
  40640e:	613a      	str	r2, [r7, #16]
  406410:	e7f5      	b.n	4063fe <gmac_rx_populate_queue+0x46>
  406412:	bf00      	nop
  406414:	00402c71 	.word	0x00402c71

00406418 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  406418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  40641c:	6a07      	ldr	r7, [r0, #32]
	return p_gmac->GMAC_TSR;
  40641e:	4b1c      	ldr	r3, [pc, #112]	; (406490 <gmac_low_level_output+0x78>)
  406420:	695b      	ldr	r3, [r3, #20]
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  406422:	f241 230c 	movw	r3, #4620	; 0x120c
  406426:	58fb      	ldr	r3, [r7, r3]
  406428:	3303      	adds	r3, #3
  40642a:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40642e:	4688      	mov	r8, r1
  406430:	b151      	cbz	r1, 406448 <gmac_low_level_output+0x30>
  406432:	460c      	mov	r4, r1
		memcpy(buffer, q->payload, q->len);
  406434:	4e17      	ldr	r6, [pc, #92]	; (406494 <gmac_low_level_output+0x7c>)
  406436:	8962      	ldrh	r2, [r4, #10]
  406438:	6861      	ldr	r1, [r4, #4]
  40643a:	4628      	mov	r0, r5
  40643c:	47b0      	blx	r6
		buffer += q->len;
  40643e:	8963      	ldrh	r3, [r4, #10]
  406440:	441d      	add	r5, r3
	for (q = p; q != NULL; q = q->next) {
  406442:	6824      	ldr	r4, [r4, #0]
  406444:	2c00      	cmp	r4, #0
  406446:	d1f6      	bne.n	406436 <gmac_low_level_output+0x1e>
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  406448:	f241 210c 	movw	r1, #4620	; 0x120c
  40644c:	587a      	ldr	r2, [r7, r1]
  40644e:	1cd3      	adds	r3, r2, #3
  406450:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  406454:	8898      	ldrh	r0, [r3, #4]
  406456:	f8b8 4008 	ldrh.w	r4, [r8, #8]
  40645a:	f364 000d 	bfi	r0, r4, #0, #14
  40645e:	8098      	strh	r0, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  406460:	79d8      	ldrb	r0, [r3, #7]
  406462:	f36f 10c7 	bfc	r0, #7, #1
  406466:	71d8      	strb	r0, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  406468:	3201      	adds	r2, #1
  40646a:	4b0b      	ldr	r3, [pc, #44]	; (406498 <gmac_low_level_output+0x80>)
  40646c:	fba3 0302 	umull	r0, r3, r3, r2
  406470:	085b      	lsrs	r3, r3, #1
  406472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406476:	1ad3      	subs	r3, r2, r3
  406478:	507b      	str	r3, [r7, r1]
  __ASM volatile ("dsb");
  40647a:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40647e:	4a04      	ldr	r2, [pc, #16]	; (406490 <gmac_low_level_output+0x78>)
  406480:	6813      	ldr	r3, [r2, #0]
  406482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  406486:	6013      	str	r3, [r2, #0]
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
  406488:	2000      	movs	r0, #0
  40648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40648e:	bf00      	nop
  406490:	40050000 	.word	0x40050000
  406494:	00406fc1 	.word	0x00406fc1
  406498:	aaaaaaab 	.word	0xaaaaaaab

0040649c <GMAC_Handler>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40649c:	2280      	movs	r2, #128	; 0x80
  40649e:	4b02      	ldr	r3, [pc, #8]	; (4064a8 <GMAC_Handler+0xc>)
  4064a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4064a4:	4770      	bx	lr
  4064a6:	bf00      	nop
  4064a8:	e000e100 	.word	0xe000e100

004064ac <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  4064ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  4064b0:	6a04      	ldr	r4, [r0, #32]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  4064b2:	f241 2308 	movw	r3, #4616	; 0x1208
  4064b6:	f854 8003 	ldr.w	r8, [r4, r3]
	return p_gmac->GMAC_RSR;
  4064ba:	4b24      	ldr	r3, [pc, #144]	; (40654c <ethernetif_input+0xa0>)
  4064bc:	6a1b      	ldr	r3, [r3, #32]
  4064be:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  4064c2:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  4064c6:	f013 0f01 	tst.w	r3, #1
  4064ca:	d032      	beq.n	406532 <ethernetif_input+0x86>
  4064cc:	4606      	mov	r6, r0
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  4064ce:	f108 030c 	add.w	r3, r8, #12
  4064d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  4064d6:	6853      	ldr	r3, [r2, #4]
		p->len = length;
  4064d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4064dc:	816b      	strh	r3, [r5, #10]
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  4064de:	f241 2708 	movw	r7, #4616	; 0x1208
  4064e2:	59e2      	ldr	r2, [r4, r7]
  4064e4:	320c      	adds	r2, #12
  4064e6:	2100      	movs	r1, #0
  4064e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		p->tot_len = length;
  4064ec:	812b      	strh	r3, [r5, #8]
		gmac_rx_populate_queue(ps_gmac_dev);
  4064ee:	4620      	mov	r0, r4
  4064f0:	4b17      	ldr	r3, [pc, #92]	; (406550 <ethernetif_input+0xa4>)
  4064f2:	4798      	blx	r3
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4064f4:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  4064f8:	f023 0301 	bic.w	r3, r3, #1
  4064fc:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  406500:	59e2      	ldr	r2, [r4, r7]
  406502:	3201      	adds	r2, #1
  406504:	4b13      	ldr	r3, [pc, #76]	; (406554 <ethernetif_input+0xa8>)
  406506:	fba3 1302 	umull	r1, r3, r3, r2
  40650a:	085b      	lsrs	r3, r3, #1
  40650c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406510:	1ad3      	subs	r3, r2, r3
  406512:	51e3      	str	r3, [r4, r7]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
  406514:	b16d      	cbz	r5, 406532 <ethernetif_input+0x86>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;

	switch (htons(ethhdr->type)) {
  406516:	686b      	ldr	r3, [r5, #4]
  406518:	8998      	ldrh	r0, [r3, #12]
  40651a:	4b0f      	ldr	r3, [pc, #60]	; (406558 <ethernetif_input+0xac>)
  40651c:	4798      	blx	r3
  40651e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
  406522:	d008      	beq.n	406536 <ethernetif_input+0x8a>
  406524:	f640 0306 	movw	r3, #2054	; 0x806
  406528:	4298      	cmp	r0, r3
  40652a:	d004      	beq.n	406536 <ethernetif_input+0x8a>
			}
			break;

		default:
			/* Free buffer. */
			pbuf_free(p);
  40652c:	4628      	mov	r0, r5
  40652e:	4b0b      	ldr	r3, [pc, #44]	; (40655c <ethernetif_input+0xb0>)
  406530:	4798      	blx	r3
  406532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (netif->input(p, netif) != ERR_OK) {
  406536:	6933      	ldr	r3, [r6, #16]
  406538:	4631      	mov	r1, r6
  40653a:	4628      	mov	r0, r5
  40653c:	4798      	blx	r3
  40653e:	2800      	cmp	r0, #0
  406540:	d0f7      	beq.n	406532 <ethernetif_input+0x86>
				pbuf_free(p);
  406542:	4628      	mov	r0, r5
  406544:	4b05      	ldr	r3, [pc, #20]	; (40655c <ethernetif_input+0xb0>)
  406546:	4798      	blx	r3
  406548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40654c:	40050000 	.word	0x40050000
  406550:	004063b9 	.word	0x004063b9
  406554:	aaaaaaab 	.word	0xaaaaaaab
  406558:	00401059 	.word	0x00401059
  40655c:	00402c19 	.word	0x00402c19

00406560 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  406560:	b5f0      	push	{r4, r5, r6, r7, lr}
  406562:	b083      	sub	sp, #12
  406564:	4606      	mov	r6, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  406566:	4b71      	ldr	r3, [pc, #452]	; (40672c <ethernetif_init+0x1cc>)
  406568:	f241 2210 	movw	r2, #4624	; 0x1210
  40656c:	5098      	str	r0, [r3, r2]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  40656e:	6203      	str	r3, [r0, #32]
	netif->name[0] = IFNAME0;
  406570:	2365      	movs	r3, #101	; 0x65
  406572:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	netif->name[1] = IFNAME1;
  406576:	236e      	movs	r3, #110	; 0x6e
  406578:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  40657c:	4b6c      	ldr	r3, [pc, #432]	; (406730 <ethernetif_init+0x1d0>)
  40657e:	6143      	str	r3, [r0, #20]
	netif->linkoutput = gmac_low_level_output;
  406580:	4b6c      	ldr	r3, [pc, #432]	; (406734 <ethernetif_init+0x1d4>)
  406582:	6183      	str	r3, [r0, #24]
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  406584:	2306      	movs	r3, #6
  406586:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	netif->hwaddr[0] = gs_uc_mac_address[0];
  40658a:	2300      	movs	r3, #0
  40658c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	netif->hwaddr[1] = gs_uc_mac_address[1];
  406590:	2304      	movs	r3, #4
  406592:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	netif->hwaddr[2] = gs_uc_mac_address[2];
  406596:	2325      	movs	r3, #37	; 0x25
  406598:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[3] = gs_uc_mac_address[3];
  40659c:	231c      	movs	r3, #28
  40659e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	netif->hwaddr[4] = gs_uc_mac_address[4];
  4065a2:	23a0      	movs	r3, #160	; 0xa0
  4065a4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	netif->hwaddr[5] = gs_uc_mac_address[5];
  4065a8:	2302      	movs	r3, #2
  4065aa:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->mtu = NET_MTU;
  4065ae:	f240 53dc 	movw	r3, #1500	; 0x5dc
  4065b2:	84c3      	strh	r3, [r0, #38]	; 0x26
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  4065b4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
  4065b8:	f043 030a 	orr.w	r3, r3, #10
  4065bc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  4065c0:	4b5d      	ldr	r3, [pc, #372]	; (406738 <ethernetif_init+0x1d8>)
  4065c2:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4065c4:	9b01      	ldr	r3, [sp, #4]
  4065c6:	1e5a      	subs	r2, r3, #1
  4065c8:	9201      	str	r2, [sp, #4]
  4065ca:	2b00      	cmp	r3, #0
  4065cc:	d1fa      	bne.n	4065c4 <ethernetif_init+0x64>
	pmc_enable_periph_clk(ID_GMAC);
  4065ce:	2027      	movs	r0, #39	; 0x27
  4065d0:	4b5a      	ldr	r3, [pc, #360]	; (40673c <ethernetif_init+0x1dc>)
  4065d2:	4798      	blx	r3
	p_gmac->GMAC_NCR = ul_ncr;
  4065d4:	4c5a      	ldr	r4, [pc, #360]	; (406740 <ethernetif_init+0x1e0>)
  4065d6:	2700      	movs	r7, #0
  4065d8:	6027      	str	r7, [r4, #0]
	p_gmac->GMAC_IDR = ul_source;
  4065da:	f04f 32ff 	mov.w	r2, #4294967295
  4065de:	62e2      	str	r2, [r4, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  4065e0:	6823      	ldr	r3, [r4, #0]
  4065e2:	f043 0320 	orr.w	r3, r3, #32
  4065e6:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_RSR = ul_status;
  4065e8:	230f      	movs	r3, #15
  4065ea:	6223      	str	r3, [r4, #32]
	p_gmac->GMAC_TSR = ul_status;
  4065ec:	f240 133f 	movw	r3, #319	; 0x13f
  4065f0:	6163      	str	r3, [r4, #20]
	return p_gmac->GMAC_ISR;
  4065f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  4065f4:	6863      	ldr	r3, [r4, #4]
  4065f6:	f023 0310 	bic.w	r3, r3, #16
  4065fa:	6063      	str	r3, [r4, #4]
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  4065fc:	6863      	ldr	r3, [r4, #4]
  4065fe:	f023 0320 	bic.w	r3, r3, #32
  406602:	6063      	str	r3, [r4, #4]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  406604:	6923      	ldr	r3, [r4, #16]
  406606:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  40660a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40660e:	6123      	str	r3, [r4, #16]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  406610:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  406614:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  406618:	4b4a      	ldr	r3, [pc, #296]	; (406744 <ethernetif_init+0x1e4>)
  40661a:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  40661c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  406620:	605a      	str	r2, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  406622:	f023 0303 	bic.w	r3, r3, #3
  406626:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  40662a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40662e:	4b46      	ldr	r3, [pc, #280]	; (406748 <ethernetif_init+0x1e8>)
  406630:	f06f 0201 	mvn.w	r2, #1
  406634:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  406636:	605f      	str	r7, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  406638:	f023 0303 	bic.w	r3, r3, #3
  40663c:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  406640:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
	ps_gmac_dev->us_rx_idx = 0;
  406644:	4d39      	ldr	r5, [pc, #228]	; (40672c <ethernetif_init+0x1cc>)
  406646:	f241 2308 	movw	r3, #4616	; 0x1208
  40664a:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40664c:	632f      	str	r7, [r5, #48]	; 0x30
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40664e:	602f      	str	r7, [r5, #0]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  406650:	606f      	str	r7, [r5, #4]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406652:	636f      	str	r7, [r5, #52]	; 0x34
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  406654:	60af      	str	r7, [r5, #8]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  406656:	60ef      	str	r7, [r5, #12]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406658:	63af      	str	r7, [r5, #56]	; 0x38
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40665a:	616f      	str	r7, [r5, #20]
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  40665c:	2302      	movs	r3, #2
  40665e:	612b      	str	r3, [r5, #16]
	gmac_rx_populate_queue(ps_gmac_dev);
  406660:	4628      	mov	r0, r5
  406662:	4b3a      	ldr	r3, [pc, #232]	; (40674c <ethernetif_init+0x1ec>)
  406664:	4798      	blx	r3
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  406666:	f025 0303 	bic.w	r3, r5, #3
  40666a:	61a3      	str	r3, [r4, #24]
	ps_gmac_dev->us_tx_idx = 0;
  40666c:	f241 230c 	movw	r3, #4620	; 0x120c
  406670:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  406672:	f105 033c 	add.w	r3, r5, #60	; 0x3c
  406676:	61ab      	str	r3, [r5, #24]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  406678:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
  40667c:	61eb      	str	r3, [r5, #28]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40667e:	f205 622a 	addw	r2, r5, #1578	; 0x62a
  406682:	622a      	str	r2, [r5, #32]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  406684:	626b      	str	r3, [r5, #36]	; 0x24
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  406686:	f605 4318 	addw	r3, r5, #3096	; 0xc18
  40668a:	62ab      	str	r3, [r5, #40]	; 0x28
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  40668c:	4b30      	ldr	r3, [pc, #192]	; (406750 <ethernetif_init+0x1f0>)
  40668e:	62eb      	str	r3, [r5, #44]	; 0x2c
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  406690:	3518      	adds	r5, #24
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  406692:	f025 0503 	bic.w	r5, r5, #3
  406696:	61e5      	str	r5, [r4, #28]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  406698:	6823      	ldr	r3, [r4, #0]
  40669a:	f043 0308 	orr.w	r3, r3, #8
  40669e:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4066a0:	6823      	ldr	r3, [r4, #0]
  4066a2:	f043 0304 	orr.w	r3, r3, #4
  4066a6:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  4066a8:	6823      	ldr	r3, [r4, #0]
  4066aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4066ae:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  4066b0:	62a7      	str	r7, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4066b2:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
			| (p_mac_addr[2] << 16)
  4066b6:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
  4066ba:	041b      	lsls	r3, r3, #16
  4066bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  4066c0:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
  4066c4:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  4066c6:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
			| (p_mac_addr[0]);
  4066ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4066ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  4066d2:	f896 202e 	ldrb.w	r2, [r6, #46]	; 0x2e
			| (p_mac_addr[4]);
  4066d6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  4066da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  4066de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4066e2:	4b1c      	ldr	r3, [pc, #112]	; (406754 <ethernetif_init+0x1f4>)
  4066e4:	f883 7327 	strb.w	r7, [r3, #807]	; 0x327
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4066e8:	2280      	movs	r2, #128	; 0x80
  4066ea:	605a      	str	r2, [r3, #4]
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  4066ec:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
  4066f0:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  4066f4:	4639      	mov	r1, r7
  4066f6:	4620      	mov	r0, r4
  4066f8:	4b17      	ldr	r3, [pc, #92]	; (406758 <ethernetif_init+0x1f8>)
  4066fa:	4798      	blx	r3
  4066fc:	b110      	cbz	r0, 406704 <ethernetif_init+0x1a4>
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
}
  4066fe:	2000      	movs	r0, #0
  406700:	b003      	add	sp, #12
  406702:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  406704:	4639      	mov	r1, r7
  406706:	4620      	mov	r0, r4
  406708:	4b14      	ldr	r3, [pc, #80]	; (40675c <ethernetif_init+0x1fc>)
  40670a:	4798      	blx	r3
  40670c:	2800      	cmp	r0, #0
  40670e:	d1f6      	bne.n	4066fe <ethernetif_init+0x19e>
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  406710:	2201      	movs	r2, #1
  406712:	4639      	mov	r1, r7
  406714:	4620      	mov	r0, r4
  406716:	4b12      	ldr	r3, [pc, #72]	; (406760 <ethernetif_init+0x200>)
  406718:	4798      	blx	r3
  40671a:	2800      	cmp	r0, #0
  40671c:	d1ef      	bne.n	4066fe <ethernetif_init+0x19e>
	netif->flags |= NETIF_FLAG_LINK_UP;
  40671e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
  406722:	f043 0304 	orr.w	r3, r3, #4
  406726:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
  40672a:	e7e8      	b.n	4066fe <ethernetif_init+0x19e>
  40672c:	20400bf8 	.word	0x20400bf8
  406730:	00401805 	.word	0x00401805
  406734:	00406419 	.word	0x00406419
  406738:	01312d00 	.word	0x01312d00
  40673c:	00400bad 	.word	0x00400bad
  406740:	40050000 	.word	0x40050000
  406744:	20401e18 	.word	0x20401e18
  406748:	20401e10 	.word	0x20401e10
  40674c:	004063b9 	.word	0x004063b9
  406750:	c0008000 	.word	0xc0008000
  406754:	e000e100 	.word	0xe000e100
  406758:	004006c9 	.word	0x004006c9
  40675c:	004004cd 	.word	0x004004cd
  406760:	004003d9 	.word	0x004003d9

00406764 <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  406764:	b500      	push	{lr}
  406766:	b087      	sub	sp, #28
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  406768:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
  40676c:	f013 0f01 	tst.w	r3, #1
  406770:	d105      	bne.n	40677e <status_callback+0x1a>
		strcpy((char*)c_mess, "IP=");
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
		printf("Network up %s\r\n", (char const*)c_mess);
	} else {
		printf("Network down\r\n");
  406772:	480a      	ldr	r0, [pc, #40]	; (40679c <status_callback+0x38>)
  406774:	4b0a      	ldr	r3, [pc, #40]	; (4067a0 <status_callback+0x3c>)
  406776:	4798      	blx	r3
	}
}
  406778:	b007      	add	sp, #28
  40677a:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy((char*)c_mess, "IP=");
  40677e:	4b09      	ldr	r3, [pc, #36]	; (4067a4 <status_callback+0x40>)
  406780:	9301      	str	r3, [sp, #4]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  406782:	3004      	adds	r0, #4
  406784:	4b08      	ldr	r3, [pc, #32]	; (4067a8 <status_callback+0x44>)
  406786:	4798      	blx	r3
  406788:	4601      	mov	r1, r0
  40678a:	a801      	add	r0, sp, #4
  40678c:	4b07      	ldr	r3, [pc, #28]	; (4067ac <status_callback+0x48>)
  40678e:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  406790:	a901      	add	r1, sp, #4
  406792:	4807      	ldr	r0, [pc, #28]	; (4067b0 <status_callback+0x4c>)
  406794:	4b02      	ldr	r3, [pc, #8]	; (4067a0 <status_callback+0x3c>)
  406796:	4798      	blx	r3
  406798:	e7ee      	b.n	406778 <status_callback+0x14>
  40679a:	bf00      	nop
  40679c:	0040a4e8 	.word	0x0040a4e8
  4067a0:	00406f39 	.word	0x00406f39
  4067a4:	003d5049 	.word	0x003d5049
  4067a8:	00401fe1 	.word	0x00401fe1
  4067ac:	004073dd 	.word	0x004073dd
  4067b0:	0040a4d8 	.word	0x0040a4d8

004067b4 <init_ethernet>:
{
  4067b4:	b530      	push	{r4, r5, lr}
  4067b6:	b089      	sub	sp, #36	; 0x24
	lwip_init();
  4067b8:	4b13      	ldr	r3, [pc, #76]	; (406808 <init_ethernet+0x54>)
  4067ba:	4798      	blx	r3
	IP4_ADDR(&x_ip_addr, ETHERNET_CONF_IPADDR0, ETHERNET_CONF_IPADDR1,
  4067bc:	4b13      	ldr	r3, [pc, #76]	; (40680c <init_ethernet+0x58>)
  4067be:	9305      	str	r3, [sp, #20]
	IP4_ADDR(&x_net_mask, ETHERNET_CONF_NET_MASK0, ETHERNET_CONF_NET_MASK1,
  4067c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4067c4:	9306      	str	r3, [sp, #24]
	IP4_ADDR(&x_gateway, ETHERNET_CONF_GATEWAY_ADDR0,
  4067c6:	ab08      	add	r3, sp, #32
  4067c8:	4a11      	ldr	r2, [pc, #68]	; (406810 <init_ethernet+0x5c>)
  4067ca:	f843 2d04 	str.w	r2, [r3, #-4]!
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  4067ce:	4c11      	ldr	r4, [pc, #68]	; (406814 <init_ethernet+0x60>)
  4067d0:	4a11      	ldr	r2, [pc, #68]	; (406818 <init_ethernet+0x64>)
  4067d2:	9202      	str	r2, [sp, #8]
  4067d4:	4a11      	ldr	r2, [pc, #68]	; (40681c <init_ethernet+0x68>)
  4067d6:	9201      	str	r2, [sp, #4]
  4067d8:	2200      	movs	r2, #0
  4067da:	9200      	str	r2, [sp, #0]
  4067dc:	aa06      	add	r2, sp, #24
  4067de:	a905      	add	r1, sp, #20
  4067e0:	4620      	mov	r0, r4
  4067e2:	4d0f      	ldr	r5, [pc, #60]	; (406820 <init_ethernet+0x6c>)
  4067e4:	47a8      	blx	r5
	netif_set_default(&gs_net_if);
  4067e6:	4620      	mov	r0, r4
  4067e8:	4b0e      	ldr	r3, [pc, #56]	; (406824 <init_ethernet+0x70>)
  4067ea:	4798      	blx	r3
	netif_set_status_callback(&gs_net_if, status_callback);
  4067ec:	490e      	ldr	r1, [pc, #56]	; (406828 <init_ethernet+0x74>)
  4067ee:	4620      	mov	r0, r4
  4067f0:	4b0e      	ldr	r3, [pc, #56]	; (40682c <init_ethernet+0x78>)
  4067f2:	4798      	blx	r3
	netif_set_up(&gs_net_if);
  4067f4:	4620      	mov	r0, r4
  4067f6:	4b0e      	ldr	r3, [pc, #56]	; (406830 <init_ethernet+0x7c>)
  4067f8:	4798      	blx	r3
	printf("Static IP Address Assigned\r\n");
  4067fa:	480e      	ldr	r0, [pc, #56]	; (406834 <init_ethernet+0x80>)
  4067fc:	4b0e      	ldr	r3, [pc, #56]	; (406838 <init_ethernet+0x84>)
  4067fe:	4798      	blx	r3
	sys_init_timing();
  406800:	4b0e      	ldr	r3, [pc, #56]	; (40683c <init_ethernet+0x88>)
  406802:	4798      	blx	r3
}
  406804:	b009      	add	sp, #36	; 0x24
  406806:	bd30      	pop	{r4, r5, pc}
  406808:	00401201 	.word	0x00401201
  40680c:	6400a8c0 	.word	0x6400a8c0
  406810:	fa00a8c0 	.word	0xfa00a8c0
  406814:	2040499c 	.word	0x2040499c
  406818:	004062a9 	.word	0x004062a9
  40681c:	00406561 	.word	0x00406561
  406820:	00402add 	.word	0x00402add
  406824:	00402b31 	.word	0x00402b31
  406828:	00406765 	.word	0x00406765
  40682c:	00402b75 	.word	0x00402b75
  406830:	00402b3d 	.word	0x00402b3d
  406834:	0040a4b8 	.word	0x0040a4b8
  406838:	00406f39 	.word	0x00406f39
  40683c:	00406bb9 	.word	0x00406bb9

00406840 <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  406840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  406842:	4814      	ldr	r0, [pc, #80]	; (406894 <ethernet_task+0x54>)
  406844:	4b14      	ldr	r3, [pc, #80]	; (406898 <ethernet_task+0x58>)
  406846:	4798      	blx	r3
	ul_cur_time = sys_get_ms();
  406848:	4b14      	ldr	r3, [pc, #80]	; (40689c <ethernet_task+0x5c>)
  40684a:	4798      	blx	r3
	if (ul_cur_time >= ul_last_time) {
  40684c:	4b14      	ldr	r3, [pc, #80]	; (4068a0 <ethernet_task+0x60>)
  40684e:	681d      	ldr	r5, [r3, #0]
  406850:	42a8      	cmp	r0, r5
  406852:	d307      	bcc.n	406864 <ethernet_task+0x24>
		ul_time_diff = ul_cur_time - ul_last_time;
  406854:	1b45      	subs	r5, r0, r5
	if (ul_time_diff) {
  406856:	b1dd      	cbz	r5, 406890 <ethernet_task+0x50>
		ul_last_time = ul_cur_time;
  406858:	4b11      	ldr	r3, [pc, #68]	; (4068a0 <ethernet_task+0x60>)
  40685a:	6018      	str	r0, [r3, #0]
  40685c:	4c11      	ldr	r4, [pc, #68]	; (4068a4 <ethernet_task+0x64>)
  40685e:	f104 0724 	add.w	r7, r4, #36	; 0x24
  406862:	e009      	b.n	406878 <ethernet_task+0x38>
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  406864:	43ed      	mvns	r5, r5
  406866:	4405      	add	r5, r0
  406868:	e7f5      	b.n	406856 <ethernet_task+0x16>
				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  40686a:	6833      	ldr	r3, [r6, #0]
  40686c:	6872      	ldr	r2, [r6, #4]
  40686e:	1a9b      	subs	r3, r3, r2
  406870:	6033      	str	r3, [r6, #0]
  406872:	340c      	adds	r4, #12
		for (ul_idx_timer = 0;
  406874:	42bc      	cmp	r4, r7
  406876:	d00b      	beq.n	406890 <ethernet_task+0x50>
  406878:	4626      	mov	r6, r4
			p_tmr_inf->timer += ul_time_diff;
  40687a:	6823      	ldr	r3, [r4, #0]
  40687c:	442b      	add	r3, r5
  40687e:	6023      	str	r3, [r4, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  406880:	6862      	ldr	r2, [r4, #4]
  406882:	4293      	cmp	r3, r2
  406884:	d9f5      	bls.n	406872 <ethernet_task+0x32>
				if (p_tmr_inf->timer_func) {
  406886:	68a3      	ldr	r3, [r4, #8]
  406888:	2b00      	cmp	r3, #0
  40688a:	d0ee      	beq.n	40686a <ethernet_task+0x2a>
					p_tmr_inf->timer_func();
  40688c:	4798      	blx	r3
  40688e:	e7ec      	b.n	40686a <ethernet_task+0x2a>
  406890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406892:	bf00      	nop
  406894:	2040499c 	.word	0x2040499c
  406898:	004064ad 	.word	0x004064ad
  40689c:	00406c4d 	.word	0x00406c4d
  4068a0:	20401e20 	.word	0x20401e20
  4068a4:	20400010 	.word	0x20400010

004068a8 <fs_open>:
 * if the specified filename is found.
 *
 * \return 1 on success, 0 otherwise.
 */
int fs_open(char *name, struct fs_file *file)
{
  4068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4068aa:	4606      	mov	r6, r0
  4068ac:	460f      	mov	r7, r1
	struct fsdata_file_noconst *f;

	for (f = (struct fsdata_file_noconst *)FS_ROOT;
  4068ae:	4c08      	ldr	r4, [pc, #32]	; (4068d0 <fs_open+0x28>)
			f != NULL;
			f = (struct fsdata_file_noconst *)f->next) {
		if (!strcmp(name, (char *)f->name)) {
  4068b0:	4d08      	ldr	r5, [pc, #32]	; (4068d4 <fs_open+0x2c>)
  4068b2:	6861      	ldr	r1, [r4, #4]
  4068b4:	4630      	mov	r0, r6
  4068b6:	47a8      	blx	r5
  4068b8:	b120      	cbz	r0, 4068c4 <fs_open+0x1c>
			f = (struct fsdata_file_noconst *)f->next) {
  4068ba:	6824      	ldr	r4, [r4, #0]
	for (f = (struct fsdata_file_noconst *)FS_ROOT;
  4068bc:	2c00      	cmp	r4, #0
  4068be:	d1f8      	bne.n	4068b2 <fs_open+0xa>
			file->data = (char *)f->data;
			file->len = f->len;
			return 1;
		}
	}
	return 0;
  4068c0:	2000      	movs	r0, #0
}
  4068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			file->data = (char *)f->data;
  4068c4:	68a3      	ldr	r3, [r4, #8]
  4068c6:	603b      	str	r3, [r7, #0]
			file->len = f->len;
  4068c8:	68e3      	ldr	r3, [r4, #12]
  4068ca:	607b      	str	r3, [r7, #4]
			return 1;
  4068cc:	2001      	movs	r0, #1
  4068ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4068d0:	0040b148 	.word	0x0040b148
  4068d4:	00407429 	.word	0x00407429

004068d8 <http_accept>:
 * \param err Connection status.
 *
 * \return ERR_OK on success.
 */
static err_t http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
  4068d8:	b538      	push	{r3, r4, r5, lr}
  4068da:	460d      	mov	r5, r1
	struct http_state *hs;

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	tcp_setprio(pcb, TCP_PRIO_MIN);
  4068dc:	2101      	movs	r1, #1
  4068de:	4628      	mov	r0, r5
  4068e0:	4b0f      	ldr	r3, [pc, #60]	; (406920 <http_accept+0x48>)
  4068e2:	4798      	blx	r3

	/* Allocate memory for the structure that holds the state of the
	connection. */
	hs = (struct http_state *)mem_malloc(sizeof(struct http_state));
  4068e4:	200c      	movs	r0, #12
  4068e6:	4b0f      	ldr	r3, [pc, #60]	; (406924 <http_accept+0x4c>)
  4068e8:	4798      	blx	r3

	if (hs == NULL) {
  4068ea:	b1b0      	cbz	r0, 40691a <http_accept+0x42>
  4068ec:	4601      	mov	r1, r0
		//printf("http_accept: Out of memory\n");
		return ERR_MEM;
	}

	/* Initialize the structure. */
	hs->file = NULL;
  4068ee:	2400      	movs	r4, #0
  4068f0:	6004      	str	r4, [r0, #0]
	hs->left = 0;
  4068f2:	6044      	str	r4, [r0, #4]
	hs->retries = 0;
  4068f4:	7204      	strb	r4, [r0, #8]

	/* Tell TCP that this is the structure we wish to be passed for our
	callbacks. */
	tcp_arg(pcb, hs);
  4068f6:	4628      	mov	r0, r5
  4068f8:	4b0b      	ldr	r3, [pc, #44]	; (406928 <http_accept+0x50>)
  4068fa:	4798      	blx	r3

	/* Tell TCP that we wish to be informed of incoming data by a call
	to the http_recv() function. */
	tcp_recv(pcb, http_recv);
  4068fc:	490b      	ldr	r1, [pc, #44]	; (40692c <http_accept+0x54>)
  4068fe:	4628      	mov	r0, r5
  406900:	4b0b      	ldr	r3, [pc, #44]	; (406930 <http_accept+0x58>)
  406902:	4798      	blx	r3

	tcp_err(pcb, http_conn_err);
  406904:	490b      	ldr	r1, [pc, #44]	; (406934 <http_accept+0x5c>)
  406906:	4628      	mov	r0, r5
  406908:	4b0b      	ldr	r3, [pc, #44]	; (406938 <http_accept+0x60>)
  40690a:	4798      	blx	r3

	tcp_poll(pcb, http_poll, 4);
  40690c:	2204      	movs	r2, #4
  40690e:	490b      	ldr	r1, [pc, #44]	; (40693c <http_accept+0x64>)
  406910:	4628      	mov	r0, r5
  406912:	4b0b      	ldr	r3, [pc, #44]	; (406940 <http_accept+0x68>)
  406914:	4798      	blx	r3
	return ERR_OK;
  406916:	4620      	mov	r0, r4
  406918:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_MEM;
  40691a:	f04f 30ff 	mov.w	r0, #4294967295
}
  40691e:	bd38      	pop	{r3, r4, r5, pc}
  406920:	004032d1 	.word	0x004032d1
  406924:	0040287d 	.word	0x0040287d
  406928:	00403305 	.word	0x00403305
  40692c:	00406a2d 	.word	0x00406a2d
  406930:	0040330b 	.word	0x0040330b
  406934:	004069e1 	.word	0x004069e1
  406938:	00403319 	.word	0x00403319
  40693c:	00406991 	.word	0x00406991
  406940:	0040332d 	.word	0x0040332d

00406944 <http_send_data>:
{
  406944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406948:	4606      	mov	r6, r0
  40694a:	460d      	mov	r5, r1
	if (tcp_sndbuf(pcb) < hs->left) {
  40694c:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
  406950:	684b      	ldr	r3, [r1, #4]
  406952:	429c      	cmp	r4, r3
  406954:	bf28      	it	cs
  406956:	461c      	movcs	r4, r3
		err = tcp_write(pcb, hs->file, len, TCP_WRITE_FLAG_COPY);
  406958:	f04f 0801 	mov.w	r8, #1
  40695c:	4f0b      	ldr	r7, [pc, #44]	; (40698c <http_send_data+0x48>)
  40695e:	e002      	b.n	406966 <http_send_data+0x22>
			len /= 2;
  406960:	0864      	lsrs	r4, r4, #1
	} while (err == ERR_MEM && len > 1);
  406962:	2c01      	cmp	r4, #1
  406964:	d910      	bls.n	406988 <http_send_data+0x44>
		err = tcp_write(pcb, hs->file, len, TCP_WRITE_FLAG_COPY);
  406966:	4643      	mov	r3, r8
  406968:	b2a2      	uxth	r2, r4
  40696a:	6829      	ldr	r1, [r5, #0]
  40696c:	4630      	mov	r0, r6
  40696e:	47b8      	blx	r7
		if (err == ERR_MEM) {
  406970:	f1b0 3fff 	cmp.w	r0, #4294967295
  406974:	d0f4      	beq.n	406960 <http_send_data+0x1c>
	if (err == ERR_OK) {
  406976:	b928      	cbnz	r0, 406984 <http_send_data+0x40>
		hs->file += len;
  406978:	682b      	ldr	r3, [r5, #0]
  40697a:	4423      	add	r3, r4
  40697c:	602b      	str	r3, [r5, #0]
		hs->left -= len;
  40697e:	686b      	ldr	r3, [r5, #4]
  406980:	1b1c      	subs	r4, r3, r4
  406982:	606c      	str	r4, [r5, #4]
  406984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40698c:	00405419 	.word	0x00405419

00406990 <http_poll>:
{
  406990:	b508      	push	{r3, lr}
  406992:	460a      	mov	r2, r1
	if (hs == NULL) {
  406994:	b168      	cbz	r0, 4069b2 <http_poll+0x22>
  406996:	4601      	mov	r1, r0
		if (hs->file == 0) {
  406998:	6803      	ldr	r3, [r0, #0]
  40699a:	b183      	cbz	r3, 4069be <http_poll+0x2e>
		++hs->retries;
  40699c:	7a03      	ldrb	r3, [r0, #8]
  40699e:	3301      	adds	r3, #1
  4069a0:	b2db      	uxtb	r3, r3
  4069a2:	7203      	strb	r3, [r0, #8]
		if (hs->retries == 4) {
  4069a4:	2b04      	cmp	r3, #4
  4069a6:	d010      	beq.n	4069ca <http_poll+0x3a>
		http_send_data(pcb, hs);
  4069a8:	4610      	mov	r0, r2
  4069aa:	4b0b      	ldr	r3, [pc, #44]	; (4069d8 <http_poll+0x48>)
  4069ac:	4798      	blx	r3
	return ERR_OK;
  4069ae:	2000      	movs	r0, #0
}
  4069b0:	bd08      	pop	{r3, pc}
		tcp_abort(pcb);
  4069b2:	4608      	mov	r0, r1
  4069b4:	4b09      	ldr	r3, [pc, #36]	; (4069dc <http_poll+0x4c>)
  4069b6:	4798      	blx	r3
		return ERR_ABRT;
  4069b8:	f06f 000c 	mvn.w	r0, #12
  4069bc:	bd08      	pop	{r3, pc}
			tcp_abort(pcb);
  4069be:	4610      	mov	r0, r2
  4069c0:	4b06      	ldr	r3, [pc, #24]	; (4069dc <http_poll+0x4c>)
  4069c2:	4798      	blx	r3
			return ERR_ABRT;
  4069c4:	f06f 000c 	mvn.w	r0, #12
  4069c8:	bd08      	pop	{r3, pc}
			tcp_abort(pcb);
  4069ca:	4610      	mov	r0, r2
  4069cc:	4b03      	ldr	r3, [pc, #12]	; (4069dc <http_poll+0x4c>)
  4069ce:	4798      	blx	r3
			return ERR_ABRT;
  4069d0:	f06f 000c 	mvn.w	r0, #12
  4069d4:	bd08      	pop	{r3, pc}
  4069d6:	bf00      	nop
  4069d8:	00406945 	.word	0x00406945
  4069dc:	00403b79 	.word	0x00403b79

004069e0 <http_conn_err>:
{
  4069e0:	b508      	push	{r3, lr}
	mem_free(hs);
  4069e2:	4b01      	ldr	r3, [pc, #4]	; (4069e8 <http_conn_err+0x8>)
  4069e4:	4798      	blx	r3
  4069e6:	bd08      	pop	{r3, pc}
  4069e8:	00402715 	.word	0x00402715

004069ec <http_close_conn>:
{
  4069ec:	b538      	push	{r3, r4, r5, lr}
  4069ee:	4604      	mov	r4, r0
  4069f0:	460d      	mov	r5, r1
	tcp_arg(pcb, NULL);
  4069f2:	2100      	movs	r1, #0
  4069f4:	4b08      	ldr	r3, [pc, #32]	; (406a18 <http_close_conn+0x2c>)
  4069f6:	4798      	blx	r3
	tcp_sent(pcb, NULL);
  4069f8:	2100      	movs	r1, #0
  4069fa:	4620      	mov	r0, r4
  4069fc:	4b07      	ldr	r3, [pc, #28]	; (406a1c <http_close_conn+0x30>)
  4069fe:	4798      	blx	r3
	tcp_recv(pcb, NULL);
  406a00:	2100      	movs	r1, #0
  406a02:	4620      	mov	r0, r4
  406a04:	4b06      	ldr	r3, [pc, #24]	; (406a20 <http_close_conn+0x34>)
  406a06:	4798      	blx	r3
	mem_free(hs);
  406a08:	4628      	mov	r0, r5
  406a0a:	4b06      	ldr	r3, [pc, #24]	; (406a24 <http_close_conn+0x38>)
  406a0c:	4798      	blx	r3
	tcp_close(pcb);
  406a0e:	4620      	mov	r0, r4
  406a10:	4b05      	ldr	r3, [pc, #20]	; (406a28 <http_close_conn+0x3c>)
  406a12:	4798      	blx	r3
  406a14:	bd38      	pop	{r3, r4, r5, pc}
  406a16:	bf00      	nop
  406a18:	00403305 	.word	0x00403305
  406a1c:	00403313 	.word	0x00403313
  406a20:	0040330b 	.word	0x0040330b
  406a24:	00402715 	.word	0x00402715
  406a28:	00403909 	.word	0x00403909

00406a2c <http_recv>:
{
  406a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406a30:	b083      	sub	sp, #12
  406a32:	4606      	mov	r6, r0
  406a34:	460f      	mov	r7, r1
	if (err == ERR_OK && p != NULL) {
  406a36:	fab3 f483 	clz	r4, r3
  406a3a:	0964      	lsrs	r4, r4, #5
  406a3c:	4615      	mov	r5, r2
  406a3e:	b102      	cbz	r2, 406a42 <http_recv+0x16>
  406a40:	b94c      	cbnz	r4, 406a56 <http_recv+0x2a>
	if (err == ERR_OK && p == NULL) {
  406a42:	b925      	cbnz	r5, 406a4e <http_recv+0x22>
  406a44:	b11c      	cbz	r4, 406a4e <http_recv+0x22>
		http_close_conn(pcb, hs);
  406a46:	4631      	mov	r1, r6
  406a48:	4638      	mov	r0, r7
  406a4a:	4b30      	ldr	r3, [pc, #192]	; (406b0c <http_recv+0xe0>)
  406a4c:	4798      	blx	r3
}
  406a4e:	2000      	movs	r0, #0
  406a50:	b003      	add	sp, #12
  406a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tcp_recved(pcb, p->tot_len);
  406a56:	8911      	ldrh	r1, [r2, #8]
  406a58:	4638      	mov	r0, r7
  406a5a:	4b2d      	ldr	r3, [pc, #180]	; (406b10 <http_recv+0xe4>)
  406a5c:	4798      	blx	r3
		if (hs->file == NULL) {
  406a5e:	6833      	ldr	r3, [r6, #0]
  406a60:	b11b      	cbz	r3, 406a6a <http_recv+0x3e>
			pbuf_free(p);
  406a62:	4628      	mov	r0, r5
  406a64:	4b2b      	ldr	r3, [pc, #172]	; (406b14 <http_recv+0xe8>)
  406a66:	4798      	blx	r3
  406a68:	e7eb      	b.n	406a42 <http_recv+0x16>
			data = p->payload;
  406a6a:	f8d5 8004 	ldr.w	r8, [r5, #4]
			if (strncmp(data, "GET ", 4) == 0) {
  406a6e:	2204      	movs	r2, #4
  406a70:	4929      	ldr	r1, [pc, #164]	; (406b18 <http_recv+0xec>)
  406a72:	4640      	mov	r0, r8
  406a74:	4b29      	ldr	r3, [pc, #164]	; (406b1c <http_recv+0xf0>)
  406a76:	4798      	blx	r3
  406a78:	2800      	cmp	r0, #0
  406a7a:	d13f      	bne.n	406afc <http_recv+0xd0>
  406a7c:	f108 0004 	add.w	r0, r8, #4
  406a80:	4602      	mov	r2, r0
  406a82:	f108 0e2c 	add.w	lr, r8, #44	; 0x2c
							((char *)data + 4)[i] == '\r' ||
  406a86:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 406b38 <http_recv+0x10c>
						((char *)data + 4)[i] = 0;
  406a8a:	f04f 0900 	mov.w	r9, #0
  406a8e:	e009      	b.n	406aa4 <http_recv+0x78>
							((char *)data + 4)[i] == '\r' ||
  406a90:	fa2c f303 	lsr.w	r3, ip, r3
  406a94:	f013 0f01 	tst.w	r3, #1
						((char *)data + 4)[i] = 0;
  406a98:	bf18      	it	ne
  406a9a:	f882 9000 	strbne.w	r9, [r2]
  406a9e:	3201      	adds	r2, #1
				for (i = 0; i < 40; i++) {
  406aa0:	4572      	cmp	r2, lr
  406aa2:	d005      	beq.n	406ab0 <http_recv+0x84>
							((char *)data + 4)[i] == '\r' ||
  406aa4:	7813      	ldrb	r3, [r2, #0]
  406aa6:	3b0a      	subs	r3, #10
  406aa8:	b2db      	uxtb	r3, r3
  406aaa:	2b16      	cmp	r3, #22
  406aac:	d8f7      	bhi.n	406a9e <http_recv+0x72>
  406aae:	e7ef      	b.n	406a90 <http_recv+0x64>
				if (*(char *)(data + 4) == '/' &&
  406ab0:	f898 3004 	ldrb.w	r3, [r8, #4]
  406ab4:	2b2f      	cmp	r3, #47	; 0x2f
  406ab6:	d013      	beq.n	406ae0 <http_recv+0xb4>
				else if (!fs_open((char *)data + 4, &file)) {
  406ab8:	4669      	mov	r1, sp
  406aba:	4b19      	ldr	r3, [pc, #100]	; (406b20 <http_recv+0xf4>)
  406abc:	4798      	blx	r3
  406abe:	b1c0      	cbz	r0, 406af2 <http_recv+0xc6>
				hs->file = file.data;
  406ac0:	9b00      	ldr	r3, [sp, #0]
  406ac2:	6033      	str	r3, [r6, #0]
				hs->left = file.len;
  406ac4:	9b01      	ldr	r3, [sp, #4]
  406ac6:	6073      	str	r3, [r6, #4]
				pbuf_free(p);
  406ac8:	4628      	mov	r0, r5
  406aca:	4b12      	ldr	r3, [pc, #72]	; (406b14 <http_recv+0xe8>)
  406acc:	4798      	blx	r3
				http_send_data(pcb, hs);
  406ace:	4631      	mov	r1, r6
  406ad0:	4638      	mov	r0, r7
  406ad2:	4b14      	ldr	r3, [pc, #80]	; (406b24 <http_recv+0xf8>)
  406ad4:	4798      	blx	r3
				tcp_sent(pcb, http_sent);
  406ad6:	4914      	ldr	r1, [pc, #80]	; (406b28 <http_recv+0xfc>)
  406ad8:	4638      	mov	r0, r7
  406ada:	4b14      	ldr	r3, [pc, #80]	; (406b2c <http_recv+0x100>)
  406adc:	4798      	blx	r3
  406ade:	e7b0      	b.n	406a42 <http_recv+0x16>
				if (*(char *)(data + 4) == '/' &&
  406ae0:	f898 3005 	ldrb.w	r3, [r8, #5]
  406ae4:	2b00      	cmp	r3, #0
  406ae6:	d1e7      	bne.n	406ab8 <http_recv+0x8c>
					fs_open("/index.html", &file);
  406ae8:	4669      	mov	r1, sp
  406aea:	4811      	ldr	r0, [pc, #68]	; (406b30 <http_recv+0x104>)
  406aec:	4b0c      	ldr	r3, [pc, #48]	; (406b20 <http_recv+0xf4>)
  406aee:	4798      	blx	r3
  406af0:	e7e6      	b.n	406ac0 <http_recv+0x94>
					fs_open("/404.html", &file);
  406af2:	4669      	mov	r1, sp
  406af4:	480f      	ldr	r0, [pc, #60]	; (406b34 <http_recv+0x108>)
  406af6:	4b0a      	ldr	r3, [pc, #40]	; (406b20 <http_recv+0xf4>)
  406af8:	4798      	blx	r3
  406afa:	e7e1      	b.n	406ac0 <http_recv+0x94>
				pbuf_free(p);
  406afc:	4628      	mov	r0, r5
  406afe:	4b05      	ldr	r3, [pc, #20]	; (406b14 <http_recv+0xe8>)
  406b00:	4798      	blx	r3
				http_close_conn(pcb, hs);
  406b02:	4631      	mov	r1, r6
  406b04:	4638      	mov	r0, r7
  406b06:	4b01      	ldr	r3, [pc, #4]	; (406b0c <http_recv+0xe0>)
  406b08:	4798      	blx	r3
  406b0a:	e79a      	b.n	406a42 <http_recv+0x16>
  406b0c:	004069ed 	.word	0x004069ed
  406b10:	0040323d 	.word	0x0040323d
  406b14:	00402c19 	.word	0x00402c19
  406b18:	0040b180 	.word	0x0040b180
  406b1c:	0040789d 	.word	0x0040789d
  406b20:	004068a9 	.word	0x004068a9
  406b24:	00406945 	.word	0x00406945
  406b28:	00406b3d 	.word	0x00406b3d
  406b2c:	00403313 	.word	0x00403313
  406b30:	0040b158 	.word	0x0040b158
  406b34:	0040b164 	.word	0x0040b164
  406b38:	00400009 	.word	0x00400009

00406b3c <http_sent>:
{
  406b3c:	b508      	push	{r3, lr}
  406b3e:	4603      	mov	r3, r0
  406b40:	4608      	mov	r0, r1
	hs->retries = 0;
  406b42:	2200      	movs	r2, #0
  406b44:	721a      	strb	r2, [r3, #8]
	if (hs->left > 0) {
  406b46:	685a      	ldr	r2, [r3, #4]
  406b48:	b922      	cbnz	r2, 406b54 <http_sent+0x18>
		http_close_conn(pcb, hs);
  406b4a:	4619      	mov	r1, r3
  406b4c:	4b03      	ldr	r3, [pc, #12]	; (406b5c <http_sent+0x20>)
  406b4e:	4798      	blx	r3
}
  406b50:	2000      	movs	r0, #0
  406b52:	bd08      	pop	{r3, pc}
		http_send_data(pcb, hs);
  406b54:	4619      	mov	r1, r3
  406b56:	4b02      	ldr	r3, [pc, #8]	; (406b60 <http_sent+0x24>)
  406b58:	4798      	blx	r3
  406b5a:	e7f9      	b.n	406b50 <http_sent+0x14>
  406b5c:	004069ed 	.word	0x004069ed
  406b60:	00406945 	.word	0x00406945

00406b64 <httpd_init>:

/**
 * \brief HTTP server init.
 */
void httpd_init(void)
{
  406b64:	b510      	push	{r4, lr}
	struct tcp_pcb *pcb;

	pcb = tcp_new();
  406b66:	4b07      	ldr	r3, [pc, #28]	; (406b84 <httpd_init+0x20>)
  406b68:	4798      	blx	r3
  406b6a:	4604      	mov	r4, r0
	tcp_bind(pcb, IP_ADDR_ANY, 80);
  406b6c:	2250      	movs	r2, #80	; 0x50
  406b6e:	4906      	ldr	r1, [pc, #24]	; (406b88 <httpd_init+0x24>)
  406b70:	4b06      	ldr	r3, [pc, #24]	; (406b8c <httpd_init+0x28>)
  406b72:	4798      	blx	r3
	pcb = tcp_listen(pcb);
  406b74:	21ff      	movs	r1, #255	; 0xff
  406b76:	4620      	mov	r0, r4
  406b78:	4b05      	ldr	r3, [pc, #20]	; (406b90 <httpd_init+0x2c>)
  406b7a:	4798      	blx	r3
	tcp_accept(pcb, http_accept);
  406b7c:	4905      	ldr	r1, [pc, #20]	; (406b94 <httpd_init+0x30>)
  406b7e:	4b06      	ldr	r3, [pc, #24]	; (406b98 <httpd_init+0x34>)
  406b80:	4798      	blx	r3
  406b82:	bd10      	pop	{r4, pc}
  406b84:	00403d35 	.word	0x00403d35
  406b88:	0040a3e4 	.word	0x0040a3e4
  406b8c:	00403091 	.word	0x00403091
  406b90:	004031f1 	.word	0x004031f1
  406b94:	004068d9 	.word	0x004068d9
  406b98:	00403321 	.word	0x00403321

00406b9c <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  406b9c:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  406b9e:	4b04      	ldr	r3, [pc, #16]	; (406bb0 <TC0_Handler+0x14>)
  406ba0:	6a1b      	ldr	r3, [r3, #32]
  406ba2:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  406ba4:	4a03      	ldr	r2, [pc, #12]	; (406bb4 <TC0_Handler+0x18>)
  406ba6:	6813      	ldr	r3, [r2, #0]
  406ba8:	3301      	adds	r3, #1
  406baa:	6013      	str	r3, [r2, #0]
}
  406bac:	b002      	add	sp, #8
  406bae:	4770      	bx	lr
  406bb0:	4000c000 	.word	0x4000c000
  406bb4:	20401e24 	.word	0x20401e24

00406bb8 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  406bb8:	b570      	push	{r4, r5, r6, lr}
  406bba:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  406bbc:	2500      	movs	r5, #0
  406bbe:	4b18      	ldr	r3, [pc, #96]	; (406c20 <sys_init_timing+0x68>)
  406bc0:	601d      	str	r5, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  406bc2:	2017      	movs	r0, #23
  406bc4:	4b17      	ldr	r3, [pc, #92]	; (406c24 <sys_init_timing+0x6c>)
  406bc6:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  406bc8:	4c17      	ldr	r4, [pc, #92]	; (406c28 <sys_init_timing+0x70>)
  406bca:	9400      	str	r4, [sp, #0]
  406bcc:	ab02      	add	r3, sp, #8
  406bce:	aa03      	add	r2, sp, #12
  406bd0:	4621      	mov	r1, r4
  406bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406bd6:	4e15      	ldr	r6, [pc, #84]	; (406c2c <sys_init_timing+0x74>)
  406bd8:	47b0      	blx	r6
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  406bda:	4e15      	ldr	r6, [pc, #84]	; (406c30 <sys_init_timing+0x78>)
  406bdc:	9a02      	ldr	r2, [sp, #8]
  406bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  406be2:	4629      	mov	r1, r5
  406be4:	4630      	mov	r0, r6
  406be6:	4b13      	ldr	r3, [pc, #76]	; (406c34 <sys_init_timing+0x7c>)
  406be8:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  406bea:	9a03      	ldr	r2, [sp, #12]
  406bec:	fbb4 f4f2 	udiv	r4, r4, r2
  406bf0:	4a11      	ldr	r2, [pc, #68]	; (406c38 <sys_init_timing+0x80>)
  406bf2:	fba2 3204 	umull	r3, r2, r2, r4
  406bf6:	0992      	lsrs	r2, r2, #6
  406bf8:	4629      	mov	r1, r5
  406bfa:	4630      	mov	r0, r6
  406bfc:	4b0f      	ldr	r3, [pc, #60]	; (406c3c <sys_init_timing+0x84>)
  406bfe:	4798      	blx	r3
  406c00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  406c04:	4b0e      	ldr	r3, [pc, #56]	; (406c40 <sys_init_timing+0x88>)
  406c06:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  406c08:	2210      	movs	r2, #16
  406c0a:	4629      	mov	r1, r5
  406c0c:	4630      	mov	r0, r6
  406c0e:	4b0d      	ldr	r3, [pc, #52]	; (406c44 <sys_init_timing+0x8c>)
  406c10:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  406c12:	4629      	mov	r1, r5
  406c14:	4630      	mov	r0, r6
  406c16:	4b0c      	ldr	r3, [pc, #48]	; (406c48 <sys_init_timing+0x90>)
  406c18:	4798      	blx	r3
}
  406c1a:	b004      	add	sp, #16
  406c1c:	bd70      	pop	{r4, r5, r6, pc}
  406c1e:	bf00      	nop
  406c20:	20401e24 	.word	0x20401e24
  406c24:	00400bad 	.word	0x00400bad
  406c28:	11e1a300 	.word	0x11e1a300
  406c2c:	00400bff 	.word	0x00400bff
  406c30:	4000c000 	.word	0x4000c000
  406c34:	00400bcd 	.word	0x00400bcd
  406c38:	10624dd3 	.word	0x10624dd3
  406c3c:	00400bef 	.word	0x00400bef
  406c40:	e000e100 	.word	0xe000e100
  406c44:	00400bf7 	.word	0x00400bf7
  406c48:	00400be7 	.word	0x00400be7

00406c4c <sys_get_ms>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  406c4c:	4b01      	ldr	r3, [pc, #4]	; (406c54 <sys_get_ms+0x8>)
  406c4e:	6818      	ldr	r0, [r3, #0]
}
  406c50:	4770      	bx	lr
  406c52:	bf00      	nop
  406c54:	20401e24 	.word	0x20401e24

00406c58 <sys_now>:
	return gs_ul_clk_tick;
  406c58:	4b01      	ldr	r3, [pc, #4]	; (406c60 <sys_now+0x8>)
  406c5a:	6818      	ldr	r0, [r3, #0]

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
	return (sys_get_ms());
}
  406c5c:	4770      	bx	lr
  406c5e:	bf00      	nop
  406c60:	20401e24 	.word	0x20401e24

00406c64 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406c64:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c66:	b083      	sub	sp, #12
  406c68:	4605      	mov	r5, r0
  406c6a:	460c      	mov	r4, r1
	uint32_t val = 0;
  406c6c:	2300      	movs	r3, #0
  406c6e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406c70:	4b2a      	ldr	r3, [pc, #168]	; (406d1c <usart_serial_getchar+0xb8>)
  406c72:	4298      	cmp	r0, r3
  406c74:	d013      	beq.n	406c9e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406c76:	4b2a      	ldr	r3, [pc, #168]	; (406d20 <usart_serial_getchar+0xbc>)
  406c78:	4298      	cmp	r0, r3
  406c7a:	d018      	beq.n	406cae <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406c7c:	4b29      	ldr	r3, [pc, #164]	; (406d24 <usart_serial_getchar+0xc0>)
  406c7e:	4298      	cmp	r0, r3
  406c80:	d01d      	beq.n	406cbe <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406c82:	4b29      	ldr	r3, [pc, #164]	; (406d28 <usart_serial_getchar+0xc4>)
  406c84:	429d      	cmp	r5, r3
  406c86:	d022      	beq.n	406cce <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406c88:	4b28      	ldr	r3, [pc, #160]	; (406d2c <usart_serial_getchar+0xc8>)
  406c8a:	429d      	cmp	r5, r3
  406c8c:	d027      	beq.n	406cde <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406c8e:	4b28      	ldr	r3, [pc, #160]	; (406d30 <usart_serial_getchar+0xcc>)
  406c90:	429d      	cmp	r5, r3
  406c92:	d02e      	beq.n	406cf2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406c94:	4b27      	ldr	r3, [pc, #156]	; (406d34 <usart_serial_getchar+0xd0>)
  406c96:	429d      	cmp	r5, r3
  406c98:	d035      	beq.n	406d06 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406c9a:	b003      	add	sp, #12
  406c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406c9e:	461f      	mov	r7, r3
  406ca0:	4e25      	ldr	r6, [pc, #148]	; (406d38 <usart_serial_getchar+0xd4>)
  406ca2:	4621      	mov	r1, r4
  406ca4:	4638      	mov	r0, r7
  406ca6:	47b0      	blx	r6
  406ca8:	2800      	cmp	r0, #0
  406caa:	d1fa      	bne.n	406ca2 <usart_serial_getchar+0x3e>
  406cac:	e7e9      	b.n	406c82 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  406cae:	461f      	mov	r7, r3
  406cb0:	4e21      	ldr	r6, [pc, #132]	; (406d38 <usart_serial_getchar+0xd4>)
  406cb2:	4621      	mov	r1, r4
  406cb4:	4638      	mov	r0, r7
  406cb6:	47b0      	blx	r6
  406cb8:	2800      	cmp	r0, #0
  406cba:	d1fa      	bne.n	406cb2 <usart_serial_getchar+0x4e>
  406cbc:	e7e4      	b.n	406c88 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  406cbe:	461f      	mov	r7, r3
  406cc0:	4e1d      	ldr	r6, [pc, #116]	; (406d38 <usart_serial_getchar+0xd4>)
  406cc2:	4621      	mov	r1, r4
  406cc4:	4638      	mov	r0, r7
  406cc6:	47b0      	blx	r6
  406cc8:	2800      	cmp	r0, #0
  406cca:	d1fa      	bne.n	406cc2 <usart_serial_getchar+0x5e>
  406ccc:	e7df      	b.n	406c8e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  406cce:	461f      	mov	r7, r3
  406cd0:	4e19      	ldr	r6, [pc, #100]	; (406d38 <usart_serial_getchar+0xd4>)
  406cd2:	4621      	mov	r1, r4
  406cd4:	4638      	mov	r0, r7
  406cd6:	47b0      	blx	r6
  406cd8:	2800      	cmp	r0, #0
  406cda:	d1fa      	bne.n	406cd2 <usart_serial_getchar+0x6e>
  406cdc:	e7da      	b.n	406c94 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  406cde:	461e      	mov	r6, r3
  406ce0:	4d16      	ldr	r5, [pc, #88]	; (406d3c <usart_serial_getchar+0xd8>)
  406ce2:	a901      	add	r1, sp, #4
  406ce4:	4630      	mov	r0, r6
  406ce6:	47a8      	blx	r5
  406ce8:	2800      	cmp	r0, #0
  406cea:	d1fa      	bne.n	406ce2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  406cec:	9b01      	ldr	r3, [sp, #4]
  406cee:	7023      	strb	r3, [r4, #0]
  406cf0:	e7d3      	b.n	406c9a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406cf2:	461e      	mov	r6, r3
  406cf4:	4d11      	ldr	r5, [pc, #68]	; (406d3c <usart_serial_getchar+0xd8>)
  406cf6:	a901      	add	r1, sp, #4
  406cf8:	4630      	mov	r0, r6
  406cfa:	47a8      	blx	r5
  406cfc:	2800      	cmp	r0, #0
  406cfe:	d1fa      	bne.n	406cf6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  406d00:	9b01      	ldr	r3, [sp, #4]
  406d02:	7023      	strb	r3, [r4, #0]
  406d04:	e7c9      	b.n	406c9a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406d06:	461e      	mov	r6, r3
  406d08:	4d0c      	ldr	r5, [pc, #48]	; (406d3c <usart_serial_getchar+0xd8>)
  406d0a:	a901      	add	r1, sp, #4
  406d0c:	4630      	mov	r0, r6
  406d0e:	47a8      	blx	r5
  406d10:	2800      	cmp	r0, #0
  406d12:	d1fa      	bne.n	406d0a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  406d14:	9b01      	ldr	r3, [sp, #4]
  406d16:	7023      	strb	r3, [r4, #0]
}
  406d18:	e7bf      	b.n	406c9a <usart_serial_getchar+0x36>
  406d1a:	bf00      	nop
  406d1c:	400e0800 	.word	0x400e0800
  406d20:	400e0a00 	.word	0x400e0a00
  406d24:	400e1a00 	.word	0x400e1a00
  406d28:	400e1c00 	.word	0x400e1c00
  406d2c:	40024000 	.word	0x40024000
  406d30:	40028000 	.word	0x40028000
  406d34:	4002c000 	.word	0x4002c000
  406d38:	00400c81 	.word	0x00400c81
  406d3c:	00400d8f 	.word	0x00400d8f

00406d40 <usart_serial_putchar>:
{
  406d40:	b570      	push	{r4, r5, r6, lr}
  406d42:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  406d44:	4b2a      	ldr	r3, [pc, #168]	; (406df0 <usart_serial_putchar+0xb0>)
  406d46:	4298      	cmp	r0, r3
  406d48:	d013      	beq.n	406d72 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  406d4a:	4b2a      	ldr	r3, [pc, #168]	; (406df4 <usart_serial_putchar+0xb4>)
  406d4c:	4298      	cmp	r0, r3
  406d4e:	d019      	beq.n	406d84 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  406d50:	4b29      	ldr	r3, [pc, #164]	; (406df8 <usart_serial_putchar+0xb8>)
  406d52:	4298      	cmp	r0, r3
  406d54:	d01f      	beq.n	406d96 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  406d56:	4b29      	ldr	r3, [pc, #164]	; (406dfc <usart_serial_putchar+0xbc>)
  406d58:	4298      	cmp	r0, r3
  406d5a:	d025      	beq.n	406da8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  406d5c:	4b28      	ldr	r3, [pc, #160]	; (406e00 <usart_serial_putchar+0xc0>)
  406d5e:	4298      	cmp	r0, r3
  406d60:	d02b      	beq.n	406dba <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  406d62:	4b28      	ldr	r3, [pc, #160]	; (406e04 <usart_serial_putchar+0xc4>)
  406d64:	4298      	cmp	r0, r3
  406d66:	d031      	beq.n	406dcc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  406d68:	4b27      	ldr	r3, [pc, #156]	; (406e08 <usart_serial_putchar+0xc8>)
  406d6a:	4298      	cmp	r0, r3
  406d6c:	d037      	beq.n	406dde <usart_serial_putchar+0x9e>
	return 0;
  406d6e:	2000      	movs	r0, #0
}
  406d70:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406d72:	461e      	mov	r6, r3
  406d74:	4d25      	ldr	r5, [pc, #148]	; (406e0c <usart_serial_putchar+0xcc>)
  406d76:	4621      	mov	r1, r4
  406d78:	4630      	mov	r0, r6
  406d7a:	47a8      	blx	r5
  406d7c:	2800      	cmp	r0, #0
  406d7e:	d1fa      	bne.n	406d76 <usart_serial_putchar+0x36>
		return 1;
  406d80:	2001      	movs	r0, #1
  406d82:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406d84:	461e      	mov	r6, r3
  406d86:	4d21      	ldr	r5, [pc, #132]	; (406e0c <usart_serial_putchar+0xcc>)
  406d88:	4621      	mov	r1, r4
  406d8a:	4630      	mov	r0, r6
  406d8c:	47a8      	blx	r5
  406d8e:	2800      	cmp	r0, #0
  406d90:	d1fa      	bne.n	406d88 <usart_serial_putchar+0x48>
		return 1;
  406d92:	2001      	movs	r0, #1
  406d94:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406d96:	461e      	mov	r6, r3
  406d98:	4d1c      	ldr	r5, [pc, #112]	; (406e0c <usart_serial_putchar+0xcc>)
  406d9a:	4621      	mov	r1, r4
  406d9c:	4630      	mov	r0, r6
  406d9e:	47a8      	blx	r5
  406da0:	2800      	cmp	r0, #0
  406da2:	d1fa      	bne.n	406d9a <usart_serial_putchar+0x5a>
		return 1;
  406da4:	2001      	movs	r0, #1
  406da6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406da8:	461e      	mov	r6, r3
  406daa:	4d18      	ldr	r5, [pc, #96]	; (406e0c <usart_serial_putchar+0xcc>)
  406dac:	4621      	mov	r1, r4
  406dae:	4630      	mov	r0, r6
  406db0:	47a8      	blx	r5
  406db2:	2800      	cmp	r0, #0
  406db4:	d1fa      	bne.n	406dac <usart_serial_putchar+0x6c>
		return 1;
  406db6:	2001      	movs	r0, #1
  406db8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406dba:	461e      	mov	r6, r3
  406dbc:	4d14      	ldr	r5, [pc, #80]	; (406e10 <usart_serial_putchar+0xd0>)
  406dbe:	4621      	mov	r1, r4
  406dc0:	4630      	mov	r0, r6
  406dc2:	47a8      	blx	r5
  406dc4:	2800      	cmp	r0, #0
  406dc6:	d1fa      	bne.n	406dbe <usart_serial_putchar+0x7e>
		return 1;
  406dc8:	2001      	movs	r0, #1
  406dca:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406dcc:	461e      	mov	r6, r3
  406dce:	4d10      	ldr	r5, [pc, #64]	; (406e10 <usart_serial_putchar+0xd0>)
  406dd0:	4621      	mov	r1, r4
  406dd2:	4630      	mov	r0, r6
  406dd4:	47a8      	blx	r5
  406dd6:	2800      	cmp	r0, #0
  406dd8:	d1fa      	bne.n	406dd0 <usart_serial_putchar+0x90>
		return 1;
  406dda:	2001      	movs	r0, #1
  406ddc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406dde:	461e      	mov	r6, r3
  406de0:	4d0b      	ldr	r5, [pc, #44]	; (406e10 <usart_serial_putchar+0xd0>)
  406de2:	4621      	mov	r1, r4
  406de4:	4630      	mov	r0, r6
  406de6:	47a8      	blx	r5
  406de8:	2800      	cmp	r0, #0
  406dea:	d1fa      	bne.n	406de2 <usart_serial_putchar+0xa2>
		return 1;
  406dec:	2001      	movs	r0, #1
  406dee:	bd70      	pop	{r4, r5, r6, pc}
  406df0:	400e0800 	.word	0x400e0800
  406df4:	400e0a00 	.word	0x400e0a00
  406df8:	400e1a00 	.word	0x400e1a00
  406dfc:	400e1c00 	.word	0x400e1c00
  406e00:	40024000 	.word	0x40024000
  406e04:	40028000 	.word	0x40028000
  406e08:	4002c000 	.word	0x4002c000
  406e0c:	00400c6f 	.word	0x00400c6f
  406e10:	00400d79 	.word	0x00400d79

00406e14 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  406e14:	b500      	push	{lr}
  406e16:	b087      	sub	sp, #28
	/* Initialize the SAM system. */
	sysclk_init();
  406e18:	4b1f      	ldr	r3, [pc, #124]	; (406e98 <main+0x84>)
  406e1a:	4798      	blx	r3
	board_init();
  406e1c:	4b1f      	ldr	r3, [pc, #124]	; (406e9c <main+0x88>)
  406e1e:	4798      	blx	r3
  406e20:	200e      	movs	r0, #14
  406e22:	4e1f      	ldr	r6, [pc, #124]	; (406ea0 <main+0x8c>)
  406e24:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  406e26:	4d1f      	ldr	r5, [pc, #124]	; (406ea4 <main+0x90>)
  406e28:	4b1f      	ldr	r3, [pc, #124]	; (406ea8 <main+0x94>)
  406e2a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406e2c:	4a1f      	ldr	r2, [pc, #124]	; (406eac <main+0x98>)
  406e2e:	4b20      	ldr	r3, [pc, #128]	; (406eb0 <main+0x9c>)
  406e30:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406e32:	4a20      	ldr	r2, [pc, #128]	; (406eb4 <main+0xa0>)
  406e34:	4b20      	ldr	r3, [pc, #128]	; (406eb8 <main+0xa4>)
  406e36:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  406e38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406e3c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  406e3e:	23c0      	movs	r3, #192	; 0xc0
  406e40:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  406e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406e46:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  406e48:	2400      	movs	r4, #0
  406e4a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406e4c:	9404      	str	r4, [sp, #16]
  406e4e:	200e      	movs	r0, #14
  406e50:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  406e52:	4a1a      	ldr	r2, [pc, #104]	; (406ebc <main+0xa8>)
  406e54:	4669      	mov	r1, sp
  406e56:	4628      	mov	r0, r5
  406e58:	4b19      	ldr	r3, [pc, #100]	; (406ec0 <main+0xac>)
  406e5a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  406e5c:	4628      	mov	r0, r5
  406e5e:	4b19      	ldr	r3, [pc, #100]	; (406ec4 <main+0xb0>)
  406e60:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406e62:	4628      	mov	r0, r5
  406e64:	4b18      	ldr	r3, [pc, #96]	; (406ec8 <main+0xb4>)
  406e66:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406e68:	4e18      	ldr	r6, [pc, #96]	; (406ecc <main+0xb8>)
  406e6a:	6833      	ldr	r3, [r6, #0]
  406e6c:	4621      	mov	r1, r4
  406e6e:	6898      	ldr	r0, [r3, #8]
  406e70:	4d17      	ldr	r5, [pc, #92]	; (406ed0 <main+0xbc>)
  406e72:	47a8      	blx	r5
	setbuf(stdin, NULL);
  406e74:	6833      	ldr	r3, [r6, #0]
  406e76:	4621      	mov	r1, r4
  406e78:	6858      	ldr	r0, [r3, #4]
  406e7a:	47a8      	blx	r5
	setbuf(stdout, NULL);
  406e7c:	6833      	ldr	r3, [r6, #0]
  406e7e:	4621      	mov	r1, r4
  406e80:	6898      	ldr	r0, [r3, #8]
  406e82:	47a8      	blx	r5

	/* Configure debug UART */
	configure_console();

	/* Print example information. */
	puts(STRING_HEADER);
  406e84:	4813      	ldr	r0, [pc, #76]	; (406ed4 <main+0xc0>)
  406e86:	4b14      	ldr	r3, [pc, #80]	; (406ed8 <main+0xc4>)
  406e88:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  406e8a:	4b14      	ldr	r3, [pc, #80]	; (406edc <main+0xc8>)
  406e8c:	4798      	blx	r3

	/* Bring up the web server. */
	httpd_init();
  406e8e:	4b14      	ldr	r3, [pc, #80]	; (406ee0 <main+0xcc>)
  406e90:	4798      	blx	r3

	/* Program main loop. */
	while (1) {
		/* Check for input packet and process it. */
		ethernet_task();
  406e92:	4c14      	ldr	r4, [pc, #80]	; (406ee4 <main+0xd0>)
  406e94:	47a0      	blx	r4
  406e96:	e7fd      	b.n	406e94 <main+0x80>
  406e98:	004001c9 	.word	0x004001c9
  406e9c:	004002c9 	.word	0x004002c9
  406ea0:	00400bad 	.word	0x00400bad
  406ea4:	40028000 	.word	0x40028000
  406ea8:	20401e64 	.word	0x20401e64
  406eac:	00406d41 	.word	0x00406d41
  406eb0:	20401e60 	.word	0x20401e60
  406eb4:	00406c65 	.word	0x00406c65
  406eb8:	20401e5c 	.word	0x20401e5c
  406ebc:	047868c0 	.word	0x047868c0
  406ec0:	00400d19 	.word	0x00400d19
  406ec4:	00400d6d 	.word	0x00400d6d
  406ec8:	00400d73 	.word	0x00400d73
  406ecc:	20400034 	.word	0x20400034
  406ed0:	0040723d 	.word	0x0040723d
  406ed4:	0040b188 	.word	0x0040b188
  406ed8:	0040722d 	.word	0x0040722d
  406edc:	004067b5 	.word	0x004067b5
  406ee0:	00406b65 	.word	0x00406b65
  406ee4:	00406841 	.word	0x00406841

00406ee8 <__libc_init_array>:
  406ee8:	b570      	push	{r4, r5, r6, lr}
  406eea:	4e0f      	ldr	r6, [pc, #60]	; (406f28 <__libc_init_array+0x40>)
  406eec:	4d0f      	ldr	r5, [pc, #60]	; (406f2c <__libc_init_array+0x44>)
  406eee:	1b76      	subs	r6, r6, r5
  406ef0:	10b6      	asrs	r6, r6, #2
  406ef2:	bf18      	it	ne
  406ef4:	2400      	movne	r4, #0
  406ef6:	d005      	beq.n	406f04 <__libc_init_array+0x1c>
  406ef8:	3401      	adds	r4, #1
  406efa:	f855 3b04 	ldr.w	r3, [r5], #4
  406efe:	4798      	blx	r3
  406f00:	42a6      	cmp	r6, r4
  406f02:	d1f9      	bne.n	406ef8 <__libc_init_array+0x10>
  406f04:	4e0a      	ldr	r6, [pc, #40]	; (406f30 <__libc_init_array+0x48>)
  406f06:	4d0b      	ldr	r5, [pc, #44]	; (406f34 <__libc_init_array+0x4c>)
  406f08:	1b76      	subs	r6, r6, r5
  406f0a:	f004 fa1f 	bl	40b34c <_init>
  406f0e:	10b6      	asrs	r6, r6, #2
  406f10:	bf18      	it	ne
  406f12:	2400      	movne	r4, #0
  406f14:	d006      	beq.n	406f24 <__libc_init_array+0x3c>
  406f16:	3401      	adds	r4, #1
  406f18:	f855 3b04 	ldr.w	r3, [r5], #4
  406f1c:	4798      	blx	r3
  406f1e:	42a6      	cmp	r6, r4
  406f20:	d1f9      	bne.n	406f16 <__libc_init_array+0x2e>
  406f22:	bd70      	pop	{r4, r5, r6, pc}
  406f24:	bd70      	pop	{r4, r5, r6, pc}
  406f26:	bf00      	nop
  406f28:	0040b358 	.word	0x0040b358
  406f2c:	0040b358 	.word	0x0040b358
  406f30:	0040b360 	.word	0x0040b360
  406f34:	0040b358 	.word	0x0040b358

00406f38 <iprintf>:
  406f38:	b40f      	push	{r0, r1, r2, r3}
  406f3a:	b500      	push	{lr}
  406f3c:	4907      	ldr	r1, [pc, #28]	; (406f5c <iprintf+0x24>)
  406f3e:	b083      	sub	sp, #12
  406f40:	ab04      	add	r3, sp, #16
  406f42:	6808      	ldr	r0, [r1, #0]
  406f44:	f853 2b04 	ldr.w	r2, [r3], #4
  406f48:	6881      	ldr	r1, [r0, #8]
  406f4a:	9301      	str	r3, [sp, #4]
  406f4c:	f000 fd38 	bl	4079c0 <_vfiprintf_r>
  406f50:	b003      	add	sp, #12
  406f52:	f85d eb04 	ldr.w	lr, [sp], #4
  406f56:	b004      	add	sp, #16
  406f58:	4770      	bx	lr
  406f5a:	bf00      	nop
  406f5c:	20400034 	.word	0x20400034

00406f60 <memcmp>:
  406f60:	2a03      	cmp	r2, #3
  406f62:	b470      	push	{r4, r5, r6}
  406f64:	d922      	bls.n	406fac <memcmp+0x4c>
  406f66:	ea40 0301 	orr.w	r3, r0, r1
  406f6a:	079b      	lsls	r3, r3, #30
  406f6c:	d011      	beq.n	406f92 <memcmp+0x32>
  406f6e:	7803      	ldrb	r3, [r0, #0]
  406f70:	780c      	ldrb	r4, [r1, #0]
  406f72:	42a3      	cmp	r3, r4
  406f74:	d11d      	bne.n	406fb2 <memcmp+0x52>
  406f76:	440a      	add	r2, r1
  406f78:	3101      	adds	r1, #1
  406f7a:	e005      	b.n	406f88 <memcmp+0x28>
  406f7c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406f80:	f811 4b01 	ldrb.w	r4, [r1], #1
  406f84:	42a3      	cmp	r3, r4
  406f86:	d114      	bne.n	406fb2 <memcmp+0x52>
  406f88:	4291      	cmp	r1, r2
  406f8a:	d1f7      	bne.n	406f7c <memcmp+0x1c>
  406f8c:	2000      	movs	r0, #0
  406f8e:	bc70      	pop	{r4, r5, r6}
  406f90:	4770      	bx	lr
  406f92:	680d      	ldr	r5, [r1, #0]
  406f94:	6806      	ldr	r6, [r0, #0]
  406f96:	42ae      	cmp	r6, r5
  406f98:	460c      	mov	r4, r1
  406f9a:	4603      	mov	r3, r0
  406f9c:	f101 0104 	add.w	r1, r1, #4
  406fa0:	f100 0004 	add.w	r0, r0, #4
  406fa4:	d108      	bne.n	406fb8 <memcmp+0x58>
  406fa6:	3a04      	subs	r2, #4
  406fa8:	2a03      	cmp	r2, #3
  406faa:	d8f2      	bhi.n	406f92 <memcmp+0x32>
  406fac:	2a00      	cmp	r2, #0
  406fae:	d1de      	bne.n	406f6e <memcmp+0xe>
  406fb0:	e7ec      	b.n	406f8c <memcmp+0x2c>
  406fb2:	1b18      	subs	r0, r3, r4
  406fb4:	bc70      	pop	{r4, r5, r6}
  406fb6:	4770      	bx	lr
  406fb8:	4621      	mov	r1, r4
  406fba:	4618      	mov	r0, r3
  406fbc:	e7d7      	b.n	406f6e <memcmp+0xe>
  406fbe:	bf00      	nop

00406fc0 <memcpy>:
  406fc0:	4684      	mov	ip, r0
  406fc2:	ea41 0300 	orr.w	r3, r1, r0
  406fc6:	f013 0303 	ands.w	r3, r3, #3
  406fca:	d16d      	bne.n	4070a8 <memcpy+0xe8>
  406fcc:	3a40      	subs	r2, #64	; 0x40
  406fce:	d341      	bcc.n	407054 <memcpy+0x94>
  406fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fd4:	f840 3b04 	str.w	r3, [r0], #4
  406fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fdc:	f840 3b04 	str.w	r3, [r0], #4
  406fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fe4:	f840 3b04 	str.w	r3, [r0], #4
  406fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fec:	f840 3b04 	str.w	r3, [r0], #4
  406ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ff4:	f840 3b04 	str.w	r3, [r0], #4
  406ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  406ffc:	f840 3b04 	str.w	r3, [r0], #4
  407000:	f851 3b04 	ldr.w	r3, [r1], #4
  407004:	f840 3b04 	str.w	r3, [r0], #4
  407008:	f851 3b04 	ldr.w	r3, [r1], #4
  40700c:	f840 3b04 	str.w	r3, [r0], #4
  407010:	f851 3b04 	ldr.w	r3, [r1], #4
  407014:	f840 3b04 	str.w	r3, [r0], #4
  407018:	f851 3b04 	ldr.w	r3, [r1], #4
  40701c:	f840 3b04 	str.w	r3, [r0], #4
  407020:	f851 3b04 	ldr.w	r3, [r1], #4
  407024:	f840 3b04 	str.w	r3, [r0], #4
  407028:	f851 3b04 	ldr.w	r3, [r1], #4
  40702c:	f840 3b04 	str.w	r3, [r0], #4
  407030:	f851 3b04 	ldr.w	r3, [r1], #4
  407034:	f840 3b04 	str.w	r3, [r0], #4
  407038:	f851 3b04 	ldr.w	r3, [r1], #4
  40703c:	f840 3b04 	str.w	r3, [r0], #4
  407040:	f851 3b04 	ldr.w	r3, [r1], #4
  407044:	f840 3b04 	str.w	r3, [r0], #4
  407048:	f851 3b04 	ldr.w	r3, [r1], #4
  40704c:	f840 3b04 	str.w	r3, [r0], #4
  407050:	3a40      	subs	r2, #64	; 0x40
  407052:	d2bd      	bcs.n	406fd0 <memcpy+0x10>
  407054:	3230      	adds	r2, #48	; 0x30
  407056:	d311      	bcc.n	40707c <memcpy+0xbc>
  407058:	f851 3b04 	ldr.w	r3, [r1], #4
  40705c:	f840 3b04 	str.w	r3, [r0], #4
  407060:	f851 3b04 	ldr.w	r3, [r1], #4
  407064:	f840 3b04 	str.w	r3, [r0], #4
  407068:	f851 3b04 	ldr.w	r3, [r1], #4
  40706c:	f840 3b04 	str.w	r3, [r0], #4
  407070:	f851 3b04 	ldr.w	r3, [r1], #4
  407074:	f840 3b04 	str.w	r3, [r0], #4
  407078:	3a10      	subs	r2, #16
  40707a:	d2ed      	bcs.n	407058 <memcpy+0x98>
  40707c:	320c      	adds	r2, #12
  40707e:	d305      	bcc.n	40708c <memcpy+0xcc>
  407080:	f851 3b04 	ldr.w	r3, [r1], #4
  407084:	f840 3b04 	str.w	r3, [r0], #4
  407088:	3a04      	subs	r2, #4
  40708a:	d2f9      	bcs.n	407080 <memcpy+0xc0>
  40708c:	3204      	adds	r2, #4
  40708e:	d008      	beq.n	4070a2 <memcpy+0xe2>
  407090:	07d2      	lsls	r2, r2, #31
  407092:	bf1c      	itt	ne
  407094:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407098:	f800 3b01 	strbne.w	r3, [r0], #1
  40709c:	d301      	bcc.n	4070a2 <memcpy+0xe2>
  40709e:	880b      	ldrh	r3, [r1, #0]
  4070a0:	8003      	strh	r3, [r0, #0]
  4070a2:	4660      	mov	r0, ip
  4070a4:	4770      	bx	lr
  4070a6:	bf00      	nop
  4070a8:	2a08      	cmp	r2, #8
  4070aa:	d313      	bcc.n	4070d4 <memcpy+0x114>
  4070ac:	078b      	lsls	r3, r1, #30
  4070ae:	d08d      	beq.n	406fcc <memcpy+0xc>
  4070b0:	f010 0303 	ands.w	r3, r0, #3
  4070b4:	d08a      	beq.n	406fcc <memcpy+0xc>
  4070b6:	f1c3 0304 	rsb	r3, r3, #4
  4070ba:	1ad2      	subs	r2, r2, r3
  4070bc:	07db      	lsls	r3, r3, #31
  4070be:	bf1c      	itt	ne
  4070c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4070c4:	f800 3b01 	strbne.w	r3, [r0], #1
  4070c8:	d380      	bcc.n	406fcc <memcpy+0xc>
  4070ca:	f831 3b02 	ldrh.w	r3, [r1], #2
  4070ce:	f820 3b02 	strh.w	r3, [r0], #2
  4070d2:	e77b      	b.n	406fcc <memcpy+0xc>
  4070d4:	3a04      	subs	r2, #4
  4070d6:	d3d9      	bcc.n	40708c <memcpy+0xcc>
  4070d8:	3a01      	subs	r2, #1
  4070da:	f811 3b01 	ldrb.w	r3, [r1], #1
  4070de:	f800 3b01 	strb.w	r3, [r0], #1
  4070e2:	d2f9      	bcs.n	4070d8 <memcpy+0x118>
  4070e4:	780b      	ldrb	r3, [r1, #0]
  4070e6:	7003      	strb	r3, [r0, #0]
  4070e8:	784b      	ldrb	r3, [r1, #1]
  4070ea:	7043      	strb	r3, [r0, #1]
  4070ec:	788b      	ldrb	r3, [r1, #2]
  4070ee:	7083      	strb	r3, [r0, #2]
  4070f0:	4660      	mov	r0, ip
  4070f2:	4770      	bx	lr

004070f4 <memset>:
  4070f4:	b470      	push	{r4, r5, r6}
  4070f6:	0786      	lsls	r6, r0, #30
  4070f8:	d046      	beq.n	407188 <memset+0x94>
  4070fa:	1e54      	subs	r4, r2, #1
  4070fc:	2a00      	cmp	r2, #0
  4070fe:	d041      	beq.n	407184 <memset+0x90>
  407100:	b2ca      	uxtb	r2, r1
  407102:	4603      	mov	r3, r0
  407104:	e002      	b.n	40710c <memset+0x18>
  407106:	f114 34ff 	adds.w	r4, r4, #4294967295
  40710a:	d33b      	bcc.n	407184 <memset+0x90>
  40710c:	f803 2b01 	strb.w	r2, [r3], #1
  407110:	079d      	lsls	r5, r3, #30
  407112:	d1f8      	bne.n	407106 <memset+0x12>
  407114:	2c03      	cmp	r4, #3
  407116:	d92e      	bls.n	407176 <memset+0x82>
  407118:	b2cd      	uxtb	r5, r1
  40711a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40711e:	2c0f      	cmp	r4, #15
  407120:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407124:	d919      	bls.n	40715a <memset+0x66>
  407126:	f103 0210 	add.w	r2, r3, #16
  40712a:	4626      	mov	r6, r4
  40712c:	3e10      	subs	r6, #16
  40712e:	2e0f      	cmp	r6, #15
  407130:	f842 5c10 	str.w	r5, [r2, #-16]
  407134:	f842 5c0c 	str.w	r5, [r2, #-12]
  407138:	f842 5c08 	str.w	r5, [r2, #-8]
  40713c:	f842 5c04 	str.w	r5, [r2, #-4]
  407140:	f102 0210 	add.w	r2, r2, #16
  407144:	d8f2      	bhi.n	40712c <memset+0x38>
  407146:	f1a4 0210 	sub.w	r2, r4, #16
  40714a:	f022 020f 	bic.w	r2, r2, #15
  40714e:	f004 040f 	and.w	r4, r4, #15
  407152:	3210      	adds	r2, #16
  407154:	2c03      	cmp	r4, #3
  407156:	4413      	add	r3, r2
  407158:	d90d      	bls.n	407176 <memset+0x82>
  40715a:	461e      	mov	r6, r3
  40715c:	4622      	mov	r2, r4
  40715e:	3a04      	subs	r2, #4
  407160:	2a03      	cmp	r2, #3
  407162:	f846 5b04 	str.w	r5, [r6], #4
  407166:	d8fa      	bhi.n	40715e <memset+0x6a>
  407168:	1f22      	subs	r2, r4, #4
  40716a:	f022 0203 	bic.w	r2, r2, #3
  40716e:	3204      	adds	r2, #4
  407170:	4413      	add	r3, r2
  407172:	f004 0403 	and.w	r4, r4, #3
  407176:	b12c      	cbz	r4, 407184 <memset+0x90>
  407178:	b2c9      	uxtb	r1, r1
  40717a:	441c      	add	r4, r3
  40717c:	f803 1b01 	strb.w	r1, [r3], #1
  407180:	429c      	cmp	r4, r3
  407182:	d1fb      	bne.n	40717c <memset+0x88>
  407184:	bc70      	pop	{r4, r5, r6}
  407186:	4770      	bx	lr
  407188:	4614      	mov	r4, r2
  40718a:	4603      	mov	r3, r0
  40718c:	e7c2      	b.n	407114 <memset+0x20>
  40718e:	bf00      	nop

00407190 <_puts_r>:
  407190:	b5f0      	push	{r4, r5, r6, r7, lr}
  407192:	4605      	mov	r5, r0
  407194:	b089      	sub	sp, #36	; 0x24
  407196:	4608      	mov	r0, r1
  407198:	460c      	mov	r4, r1
  40719a:	f000 fb11 	bl	4077c0 <strlen>
  40719e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4071a0:	4f21      	ldr	r7, [pc, #132]	; (407228 <_puts_r+0x98>)
  4071a2:	9404      	str	r4, [sp, #16]
  4071a4:	2601      	movs	r6, #1
  4071a6:	1c44      	adds	r4, r0, #1
  4071a8:	a904      	add	r1, sp, #16
  4071aa:	2202      	movs	r2, #2
  4071ac:	9403      	str	r4, [sp, #12]
  4071ae:	9005      	str	r0, [sp, #20]
  4071b0:	68ac      	ldr	r4, [r5, #8]
  4071b2:	9706      	str	r7, [sp, #24]
  4071b4:	9607      	str	r6, [sp, #28]
  4071b6:	9101      	str	r1, [sp, #4]
  4071b8:	9202      	str	r2, [sp, #8]
  4071ba:	b353      	cbz	r3, 407212 <_puts_r+0x82>
  4071bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4071be:	f013 0f01 	tst.w	r3, #1
  4071c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071c6:	b29a      	uxth	r2, r3
  4071c8:	d101      	bne.n	4071ce <_puts_r+0x3e>
  4071ca:	0590      	lsls	r0, r2, #22
  4071cc:	d525      	bpl.n	40721a <_puts_r+0x8a>
  4071ce:	0491      	lsls	r1, r2, #18
  4071d0:	d406      	bmi.n	4071e0 <_puts_r+0x50>
  4071d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4071d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4071d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4071dc:	81a3      	strh	r3, [r4, #12]
  4071de:	6662      	str	r2, [r4, #100]	; 0x64
  4071e0:	4628      	mov	r0, r5
  4071e2:	aa01      	add	r2, sp, #4
  4071e4:	4621      	mov	r1, r4
  4071e6:	f001 fded 	bl	408dc4 <__sfvwrite_r>
  4071ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4071ec:	2800      	cmp	r0, #0
  4071ee:	bf0c      	ite	eq
  4071f0:	250a      	moveq	r5, #10
  4071f2:	f04f 35ff 	movne.w	r5, #4294967295
  4071f6:	07da      	lsls	r2, r3, #31
  4071f8:	d402      	bmi.n	407200 <_puts_r+0x70>
  4071fa:	89a3      	ldrh	r3, [r4, #12]
  4071fc:	059b      	lsls	r3, r3, #22
  4071fe:	d502      	bpl.n	407206 <_puts_r+0x76>
  407200:	4628      	mov	r0, r5
  407202:	b009      	add	sp, #36	; 0x24
  407204:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407206:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407208:	f001 ff92 	bl	409130 <__retarget_lock_release_recursive>
  40720c:	4628      	mov	r0, r5
  40720e:	b009      	add	sp, #36	; 0x24
  407210:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407212:	4628      	mov	r0, r5
  407214:	f001 fbca 	bl	4089ac <__sinit>
  407218:	e7d0      	b.n	4071bc <_puts_r+0x2c>
  40721a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40721c:	f001 ff86 	bl	40912c <__retarget_lock_acquire_recursive>
  407220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407224:	b29a      	uxth	r2, r3
  407226:	e7d2      	b.n	4071ce <_puts_r+0x3e>
  407228:	0040b1e4 	.word	0x0040b1e4

0040722c <puts>:
  40722c:	4b02      	ldr	r3, [pc, #8]	; (407238 <puts+0xc>)
  40722e:	4601      	mov	r1, r0
  407230:	6818      	ldr	r0, [r3, #0]
  407232:	f7ff bfad 	b.w	407190 <_puts_r>
  407236:	bf00      	nop
  407238:	20400034 	.word	0x20400034

0040723c <setbuf>:
  40723c:	2900      	cmp	r1, #0
  40723e:	bf0c      	ite	eq
  407240:	2202      	moveq	r2, #2
  407242:	2200      	movne	r2, #0
  407244:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407248:	f000 b800 	b.w	40724c <setvbuf>

0040724c <setvbuf>:
  40724c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407250:	4c61      	ldr	r4, [pc, #388]	; (4073d8 <setvbuf+0x18c>)
  407252:	6825      	ldr	r5, [r4, #0]
  407254:	b083      	sub	sp, #12
  407256:	4604      	mov	r4, r0
  407258:	460f      	mov	r7, r1
  40725a:	4690      	mov	r8, r2
  40725c:	461e      	mov	r6, r3
  40725e:	b115      	cbz	r5, 407266 <setvbuf+0x1a>
  407260:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407262:	2b00      	cmp	r3, #0
  407264:	d064      	beq.n	407330 <setvbuf+0xe4>
  407266:	f1b8 0f02 	cmp.w	r8, #2
  40726a:	d006      	beq.n	40727a <setvbuf+0x2e>
  40726c:	f1b8 0f01 	cmp.w	r8, #1
  407270:	f200 809f 	bhi.w	4073b2 <setvbuf+0x166>
  407274:	2e00      	cmp	r6, #0
  407276:	f2c0 809c 	blt.w	4073b2 <setvbuf+0x166>
  40727a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40727c:	07d8      	lsls	r0, r3, #31
  40727e:	d534      	bpl.n	4072ea <setvbuf+0x9e>
  407280:	4621      	mov	r1, r4
  407282:	4628      	mov	r0, r5
  407284:	f001 fb3a 	bl	4088fc <_fflush_r>
  407288:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40728a:	b141      	cbz	r1, 40729e <setvbuf+0x52>
  40728c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407290:	4299      	cmp	r1, r3
  407292:	d002      	beq.n	40729a <setvbuf+0x4e>
  407294:	4628      	mov	r0, r5
  407296:	f001 fcaf 	bl	408bf8 <_free_r>
  40729a:	2300      	movs	r3, #0
  40729c:	6323      	str	r3, [r4, #48]	; 0x30
  40729e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072a2:	2200      	movs	r2, #0
  4072a4:	61a2      	str	r2, [r4, #24]
  4072a6:	6062      	str	r2, [r4, #4]
  4072a8:	061a      	lsls	r2, r3, #24
  4072aa:	d43a      	bmi.n	407322 <setvbuf+0xd6>
  4072ac:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4072b0:	f023 0303 	bic.w	r3, r3, #3
  4072b4:	f1b8 0f02 	cmp.w	r8, #2
  4072b8:	81a3      	strh	r3, [r4, #12]
  4072ba:	d01d      	beq.n	4072f8 <setvbuf+0xac>
  4072bc:	ab01      	add	r3, sp, #4
  4072be:	466a      	mov	r2, sp
  4072c0:	4621      	mov	r1, r4
  4072c2:	4628      	mov	r0, r5
  4072c4:	f001 ff36 	bl	409134 <__swhatbuf_r>
  4072c8:	89a3      	ldrh	r3, [r4, #12]
  4072ca:	4318      	orrs	r0, r3
  4072cc:	81a0      	strh	r0, [r4, #12]
  4072ce:	2e00      	cmp	r6, #0
  4072d0:	d132      	bne.n	407338 <setvbuf+0xec>
  4072d2:	9e00      	ldr	r6, [sp, #0]
  4072d4:	4630      	mov	r0, r6
  4072d6:	f001 ffa5 	bl	409224 <malloc>
  4072da:	4607      	mov	r7, r0
  4072dc:	2800      	cmp	r0, #0
  4072de:	d06b      	beq.n	4073b8 <setvbuf+0x16c>
  4072e0:	89a3      	ldrh	r3, [r4, #12]
  4072e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4072e6:	81a3      	strh	r3, [r4, #12]
  4072e8:	e028      	b.n	40733c <setvbuf+0xf0>
  4072ea:	89a3      	ldrh	r3, [r4, #12]
  4072ec:	0599      	lsls	r1, r3, #22
  4072ee:	d4c7      	bmi.n	407280 <setvbuf+0x34>
  4072f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072f2:	f001 ff1b 	bl	40912c <__retarget_lock_acquire_recursive>
  4072f6:	e7c3      	b.n	407280 <setvbuf+0x34>
  4072f8:	2500      	movs	r5, #0
  4072fa:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4072fc:	2600      	movs	r6, #0
  4072fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407302:	f043 0302 	orr.w	r3, r3, #2
  407306:	2001      	movs	r0, #1
  407308:	60a6      	str	r6, [r4, #8]
  40730a:	07ce      	lsls	r6, r1, #31
  40730c:	81a3      	strh	r3, [r4, #12]
  40730e:	6022      	str	r2, [r4, #0]
  407310:	6122      	str	r2, [r4, #16]
  407312:	6160      	str	r0, [r4, #20]
  407314:	d401      	bmi.n	40731a <setvbuf+0xce>
  407316:	0598      	lsls	r0, r3, #22
  407318:	d53e      	bpl.n	407398 <setvbuf+0x14c>
  40731a:	4628      	mov	r0, r5
  40731c:	b003      	add	sp, #12
  40731e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407322:	6921      	ldr	r1, [r4, #16]
  407324:	4628      	mov	r0, r5
  407326:	f001 fc67 	bl	408bf8 <_free_r>
  40732a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40732e:	e7bd      	b.n	4072ac <setvbuf+0x60>
  407330:	4628      	mov	r0, r5
  407332:	f001 fb3b 	bl	4089ac <__sinit>
  407336:	e796      	b.n	407266 <setvbuf+0x1a>
  407338:	2f00      	cmp	r7, #0
  40733a:	d0cb      	beq.n	4072d4 <setvbuf+0x88>
  40733c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40733e:	2b00      	cmp	r3, #0
  407340:	d033      	beq.n	4073aa <setvbuf+0x15e>
  407342:	9b00      	ldr	r3, [sp, #0]
  407344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407348:	6027      	str	r7, [r4, #0]
  40734a:	429e      	cmp	r6, r3
  40734c:	bf1c      	itt	ne
  40734e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  407352:	81a2      	strhne	r2, [r4, #12]
  407354:	f1b8 0f01 	cmp.w	r8, #1
  407358:	bf04      	itt	eq
  40735a:	f042 0201 	orreq.w	r2, r2, #1
  40735e:	81a2      	strheq	r2, [r4, #12]
  407360:	b292      	uxth	r2, r2
  407362:	f012 0308 	ands.w	r3, r2, #8
  407366:	6127      	str	r7, [r4, #16]
  407368:	6166      	str	r6, [r4, #20]
  40736a:	d00e      	beq.n	40738a <setvbuf+0x13e>
  40736c:	07d1      	lsls	r1, r2, #31
  40736e:	d51a      	bpl.n	4073a6 <setvbuf+0x15a>
  407370:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407372:	4276      	negs	r6, r6
  407374:	2300      	movs	r3, #0
  407376:	f015 0501 	ands.w	r5, r5, #1
  40737a:	61a6      	str	r6, [r4, #24]
  40737c:	60a3      	str	r3, [r4, #8]
  40737e:	d009      	beq.n	407394 <setvbuf+0x148>
  407380:	2500      	movs	r5, #0
  407382:	4628      	mov	r0, r5
  407384:	b003      	add	sp, #12
  407386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40738a:	60a3      	str	r3, [r4, #8]
  40738c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40738e:	f015 0501 	ands.w	r5, r5, #1
  407392:	d1f5      	bne.n	407380 <setvbuf+0x134>
  407394:	0593      	lsls	r3, r2, #22
  407396:	d4c0      	bmi.n	40731a <setvbuf+0xce>
  407398:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40739a:	f001 fec9 	bl	409130 <__retarget_lock_release_recursive>
  40739e:	4628      	mov	r0, r5
  4073a0:	b003      	add	sp, #12
  4073a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4073a6:	60a6      	str	r6, [r4, #8]
  4073a8:	e7f0      	b.n	40738c <setvbuf+0x140>
  4073aa:	4628      	mov	r0, r5
  4073ac:	f001 fafe 	bl	4089ac <__sinit>
  4073b0:	e7c7      	b.n	407342 <setvbuf+0xf6>
  4073b2:	f04f 35ff 	mov.w	r5, #4294967295
  4073b6:	e7b0      	b.n	40731a <setvbuf+0xce>
  4073b8:	f8dd 9000 	ldr.w	r9, [sp]
  4073bc:	45b1      	cmp	r9, r6
  4073be:	d004      	beq.n	4073ca <setvbuf+0x17e>
  4073c0:	4648      	mov	r0, r9
  4073c2:	f001 ff2f 	bl	409224 <malloc>
  4073c6:	4607      	mov	r7, r0
  4073c8:	b920      	cbnz	r0, 4073d4 <setvbuf+0x188>
  4073ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073ce:	f04f 35ff 	mov.w	r5, #4294967295
  4073d2:	e792      	b.n	4072fa <setvbuf+0xae>
  4073d4:	464e      	mov	r6, r9
  4073d6:	e783      	b.n	4072e0 <setvbuf+0x94>
  4073d8:	20400034 	.word	0x20400034

004073dc <strcat>:
  4073dc:	0783      	lsls	r3, r0, #30
  4073de:	b510      	push	{r4, lr}
  4073e0:	4604      	mov	r4, r0
  4073e2:	d110      	bne.n	407406 <strcat+0x2a>
  4073e4:	6802      	ldr	r2, [r0, #0]
  4073e6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4073ea:	ea23 0302 	bic.w	r3, r3, r2
  4073ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4073f2:	d108      	bne.n	407406 <strcat+0x2a>
  4073f4:	f850 2f04 	ldr.w	r2, [r0, #4]!
  4073f8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4073fc:	ea23 0302 	bic.w	r3, r3, r2
  407400:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407404:	d0f6      	beq.n	4073f4 <strcat+0x18>
  407406:	7803      	ldrb	r3, [r0, #0]
  407408:	b11b      	cbz	r3, 407412 <strcat+0x36>
  40740a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40740e:	2b00      	cmp	r3, #0
  407410:	d1fb      	bne.n	40740a <strcat+0x2e>
  407412:	f000 f973 	bl	4076fc <strcpy>
  407416:	4620      	mov	r0, r4
  407418:	bd10      	pop	{r4, pc}
  40741a:	bf00      	nop
  40741c:	0000      	movs	r0, r0
  40741e:	0000      	movs	r0, r0
  407420:	eba2 0003 	sub.w	r0, r2, r3
  407424:	4770      	bx	lr
  407426:	bf00      	nop

00407428 <strcmp>:
  407428:	7802      	ldrb	r2, [r0, #0]
  40742a:	780b      	ldrb	r3, [r1, #0]
  40742c:	2a01      	cmp	r2, #1
  40742e:	bf28      	it	cs
  407430:	429a      	cmpcs	r2, r3
  407432:	d1f5      	bne.n	407420 <strcat+0x44>
  407434:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  407438:	ea40 0401 	orr.w	r4, r0, r1
  40743c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  407440:	f06f 0c00 	mvn.w	ip, #0
  407444:	ea4f 7244 	mov.w	r2, r4, lsl #29
  407448:	b312      	cbz	r2, 407490 <strcmp+0x68>
  40744a:	ea80 0401 	eor.w	r4, r0, r1
  40744e:	f014 0f07 	tst.w	r4, #7
  407452:	d16a      	bne.n	40752a <strcmp+0x102>
  407454:	f000 0407 	and.w	r4, r0, #7
  407458:	f020 0007 	bic.w	r0, r0, #7
  40745c:	f004 0503 	and.w	r5, r4, #3
  407460:	f021 0107 	bic.w	r1, r1, #7
  407464:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  407468:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40746c:	f014 0f04 	tst.w	r4, #4
  407470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  407474:	fa0c f405 	lsl.w	r4, ip, r5
  407478:	ea62 0204 	orn	r2, r2, r4
  40747c:	ea66 0604 	orn	r6, r6, r4
  407480:	d00a      	beq.n	407498 <strcmp+0x70>
  407482:	ea63 0304 	orn	r3, r3, r4
  407486:	4662      	mov	r2, ip
  407488:	ea67 0704 	orn	r7, r7, r4
  40748c:	4666      	mov	r6, ip
  40748e:	e003      	b.n	407498 <strcmp+0x70>
  407490:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  407494:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  407498:	fa82 f54c 	uadd8	r5, r2, ip
  40749c:	ea82 0406 	eor.w	r4, r2, r6
  4074a0:	faa4 f48c 	sel	r4, r4, ip
  4074a4:	bb6c      	cbnz	r4, 407502 <strcmp+0xda>
  4074a6:	fa83 f54c 	uadd8	r5, r3, ip
  4074aa:	ea83 0507 	eor.w	r5, r3, r7
  4074ae:	faa5 f58c 	sel	r5, r5, ip
  4074b2:	b995      	cbnz	r5, 4074da <strcmp+0xb2>
  4074b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4074b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4074bc:	fa82 f54c 	uadd8	r5, r2, ip
  4074c0:	ea82 0406 	eor.w	r4, r2, r6
  4074c4:	faa4 f48c 	sel	r4, r4, ip
  4074c8:	fa83 f54c 	uadd8	r5, r3, ip
  4074cc:	ea83 0507 	eor.w	r5, r3, r7
  4074d0:	faa5 f58c 	sel	r5, r5, ip
  4074d4:	4325      	orrs	r5, r4
  4074d6:	d0db      	beq.n	407490 <strcmp+0x68>
  4074d8:	b99c      	cbnz	r4, 407502 <strcmp+0xda>
  4074da:	ba2d      	rev	r5, r5
  4074dc:	fab5 f485 	clz	r4, r5
  4074e0:	f024 0407 	bic.w	r4, r4, #7
  4074e4:	fa27 f104 	lsr.w	r1, r7, r4
  4074e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4074ec:	fa23 f304 	lsr.w	r3, r3, r4
  4074f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4074f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4074f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4074fc:	eba0 0001 	sub.w	r0, r0, r1
  407500:	4770      	bx	lr
  407502:	ba24      	rev	r4, r4
  407504:	fab4 f484 	clz	r4, r4
  407508:	f024 0407 	bic.w	r4, r4, #7
  40750c:	fa26 f104 	lsr.w	r1, r6, r4
  407510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  407514:	fa22 f204 	lsr.w	r2, r2, r4
  407518:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40751c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407520:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407524:	eba0 0001 	sub.w	r0, r0, r1
  407528:	4770      	bx	lr
  40752a:	f014 0f03 	tst.w	r4, #3
  40752e:	d13c      	bne.n	4075aa <strcmp+0x182>
  407530:	f010 0403 	ands.w	r4, r0, #3
  407534:	d128      	bne.n	407588 <strcmp+0x160>
  407536:	f850 2b08 	ldr.w	r2, [r0], #8
  40753a:	f851 3b08 	ldr.w	r3, [r1], #8
  40753e:	fa82 f54c 	uadd8	r5, r2, ip
  407542:	ea82 0503 	eor.w	r5, r2, r3
  407546:	faa5 f58c 	sel	r5, r5, ip
  40754a:	b95d      	cbnz	r5, 407564 <strcmp+0x13c>
  40754c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407550:	f851 3c04 	ldr.w	r3, [r1, #-4]
  407554:	fa82 f54c 	uadd8	r5, r2, ip
  407558:	ea82 0503 	eor.w	r5, r2, r3
  40755c:	faa5 f58c 	sel	r5, r5, ip
  407560:	2d00      	cmp	r5, #0
  407562:	d0e8      	beq.n	407536 <strcmp+0x10e>
  407564:	ba2d      	rev	r5, r5
  407566:	fab5 f485 	clz	r4, r5
  40756a:	f024 0407 	bic.w	r4, r4, #7
  40756e:	fa23 f104 	lsr.w	r1, r3, r4
  407572:	fa22 f204 	lsr.w	r2, r2, r4
  407576:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40757a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40757e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407582:	eba0 0001 	sub.w	r0, r0, r1
  407586:	4770      	bx	lr
  407588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40758c:	f020 0003 	bic.w	r0, r0, #3
  407590:	f850 2b08 	ldr.w	r2, [r0], #8
  407594:	f021 0103 	bic.w	r1, r1, #3
  407598:	f851 3b08 	ldr.w	r3, [r1], #8
  40759c:	fa0c f404 	lsl.w	r4, ip, r4
  4075a0:	ea62 0204 	orn	r2, r2, r4
  4075a4:	ea63 0304 	orn	r3, r3, r4
  4075a8:	e7c9      	b.n	40753e <strcmp+0x116>
  4075aa:	f010 0403 	ands.w	r4, r0, #3
  4075ae:	d01a      	beq.n	4075e6 <strcmp+0x1be>
  4075b0:	eba1 0104 	sub.w	r1, r1, r4
  4075b4:	f020 0003 	bic.w	r0, r0, #3
  4075b8:	07e4      	lsls	r4, r4, #31
  4075ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4075be:	d006      	beq.n	4075ce <strcmp+0x1a6>
  4075c0:	d20f      	bcs.n	4075e2 <strcmp+0x1ba>
  4075c2:	788b      	ldrb	r3, [r1, #2]
  4075c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4075c8:	1ae4      	subs	r4, r4, r3
  4075ca:	d106      	bne.n	4075da <strcmp+0x1b2>
  4075cc:	b12b      	cbz	r3, 4075da <strcmp+0x1b2>
  4075ce:	78cb      	ldrb	r3, [r1, #3]
  4075d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4075d4:	1ae4      	subs	r4, r4, r3
  4075d6:	d100      	bne.n	4075da <strcmp+0x1b2>
  4075d8:	b91b      	cbnz	r3, 4075e2 <strcmp+0x1ba>
  4075da:	4620      	mov	r0, r4
  4075dc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4075e0:	4770      	bx	lr
  4075e2:	f101 0104 	add.w	r1, r1, #4
  4075e6:	f850 2b04 	ldr.w	r2, [r0], #4
  4075ea:	07cc      	lsls	r4, r1, #31
  4075ec:	f021 0103 	bic.w	r1, r1, #3
  4075f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4075f4:	d848      	bhi.n	407688 <strcmp+0x260>
  4075f6:	d224      	bcs.n	407642 <strcmp+0x21a>
  4075f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4075fc:	fa82 f54c 	uadd8	r5, r2, ip
  407600:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  407604:	faa5 f58c 	sel	r5, r5, ip
  407608:	d10a      	bne.n	407620 <strcmp+0x1f8>
  40760a:	b965      	cbnz	r5, 407626 <strcmp+0x1fe>
  40760c:	f851 3b04 	ldr.w	r3, [r1], #4
  407610:	ea84 0402 	eor.w	r4, r4, r2
  407614:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  407618:	d10e      	bne.n	407638 <strcmp+0x210>
  40761a:	f850 2b04 	ldr.w	r2, [r0], #4
  40761e:	e7eb      	b.n	4075f8 <strcmp+0x1d0>
  407620:	ea4f 2313 	mov.w	r3, r3, lsr #8
  407624:	e055      	b.n	4076d2 <strcmp+0x2aa>
  407626:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40762a:	d14d      	bne.n	4076c8 <strcmp+0x2a0>
  40762c:	7808      	ldrb	r0, [r1, #0]
  40762e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  407632:	f1c0 0000 	rsb	r0, r0, #0
  407636:	4770      	bx	lr
  407638:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40763c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  407640:	e047      	b.n	4076d2 <strcmp+0x2aa>
  407642:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  407646:	fa82 f54c 	uadd8	r5, r2, ip
  40764a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40764e:	faa5 f58c 	sel	r5, r5, ip
  407652:	d10a      	bne.n	40766a <strcmp+0x242>
  407654:	b965      	cbnz	r5, 407670 <strcmp+0x248>
  407656:	f851 3b04 	ldr.w	r3, [r1], #4
  40765a:	ea84 0402 	eor.w	r4, r4, r2
  40765e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  407662:	d10c      	bne.n	40767e <strcmp+0x256>
  407664:	f850 2b04 	ldr.w	r2, [r0], #4
  407668:	e7eb      	b.n	407642 <strcmp+0x21a>
  40766a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40766e:	e030      	b.n	4076d2 <strcmp+0x2aa>
  407670:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  407674:	d128      	bne.n	4076c8 <strcmp+0x2a0>
  407676:	880b      	ldrh	r3, [r1, #0]
  407678:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40767c:	e029      	b.n	4076d2 <strcmp+0x2aa>
  40767e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  407682:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  407686:	e024      	b.n	4076d2 <strcmp+0x2aa>
  407688:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40768c:	fa82 f54c 	uadd8	r5, r2, ip
  407690:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  407694:	faa5 f58c 	sel	r5, r5, ip
  407698:	d10a      	bne.n	4076b0 <strcmp+0x288>
  40769a:	b965      	cbnz	r5, 4076b6 <strcmp+0x28e>
  40769c:	f851 3b04 	ldr.w	r3, [r1], #4
  4076a0:	ea84 0402 	eor.w	r4, r4, r2
  4076a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4076a8:	d109      	bne.n	4076be <strcmp+0x296>
  4076aa:	f850 2b04 	ldr.w	r2, [r0], #4
  4076ae:	e7eb      	b.n	407688 <strcmp+0x260>
  4076b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4076b4:	e00d      	b.n	4076d2 <strcmp+0x2aa>
  4076b6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4076ba:	d105      	bne.n	4076c8 <strcmp+0x2a0>
  4076bc:	680b      	ldr	r3, [r1, #0]
  4076be:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4076c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4076c6:	e004      	b.n	4076d2 <strcmp+0x2aa>
  4076c8:	f04f 0000 	mov.w	r0, #0
  4076cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4076d0:	4770      	bx	lr
  4076d2:	ba12      	rev	r2, r2
  4076d4:	ba1b      	rev	r3, r3
  4076d6:	fa82 f44c 	uadd8	r4, r2, ip
  4076da:	ea82 0403 	eor.w	r4, r2, r3
  4076de:	faa4 f58c 	sel	r5, r4, ip
  4076e2:	fab5 f485 	clz	r4, r5
  4076e6:	fa02 f204 	lsl.w	r2, r2, r4
  4076ea:	fa03 f304 	lsl.w	r3, r3, r4
  4076ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4076f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4076f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4076fa:	4770      	bx	lr

004076fc <strcpy>:
  4076fc:	ea80 0201 	eor.w	r2, r0, r1
  407700:	4684      	mov	ip, r0
  407702:	f012 0f03 	tst.w	r2, #3
  407706:	d14f      	bne.n	4077a8 <strcpy+0xac>
  407708:	f011 0f03 	tst.w	r1, #3
  40770c:	d132      	bne.n	407774 <strcpy+0x78>
  40770e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  407712:	f011 0f04 	tst.w	r1, #4
  407716:	f851 3b04 	ldr.w	r3, [r1], #4
  40771a:	d00b      	beq.n	407734 <strcpy+0x38>
  40771c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  407720:	439a      	bics	r2, r3
  407722:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407726:	bf04      	itt	eq
  407728:	f84c 3b04 	streq.w	r3, [ip], #4
  40772c:	f851 3b04 	ldreq.w	r3, [r1], #4
  407730:	d116      	bne.n	407760 <strcpy+0x64>
  407732:	bf00      	nop
  407734:	f851 4b04 	ldr.w	r4, [r1], #4
  407738:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40773c:	439a      	bics	r2, r3
  40773e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407742:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  407746:	d10b      	bne.n	407760 <strcpy+0x64>
  407748:	f84c 3b04 	str.w	r3, [ip], #4
  40774c:	43a2      	bics	r2, r4
  40774e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407752:	bf04      	itt	eq
  407754:	f851 3b04 	ldreq.w	r3, [r1], #4
  407758:	f84c 4b04 	streq.w	r4, [ip], #4
  40775c:	d0ea      	beq.n	407734 <strcpy+0x38>
  40775e:	4623      	mov	r3, r4
  407760:	f80c 3b01 	strb.w	r3, [ip], #1
  407764:	f013 0fff 	tst.w	r3, #255	; 0xff
  407768:	ea4f 2333 	mov.w	r3, r3, ror #8
  40776c:	d1f8      	bne.n	407760 <strcpy+0x64>
  40776e:	f85d 4b04 	ldr.w	r4, [sp], #4
  407772:	4770      	bx	lr
  407774:	f011 0f01 	tst.w	r1, #1
  407778:	d006      	beq.n	407788 <strcpy+0x8c>
  40777a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40777e:	f80c 2b01 	strb.w	r2, [ip], #1
  407782:	2a00      	cmp	r2, #0
  407784:	bf08      	it	eq
  407786:	4770      	bxeq	lr
  407788:	f011 0f02 	tst.w	r1, #2
  40778c:	d0bf      	beq.n	40770e <strcpy+0x12>
  40778e:	f831 2b02 	ldrh.w	r2, [r1], #2
  407792:	f012 0fff 	tst.w	r2, #255	; 0xff
  407796:	bf16      	itet	ne
  407798:	f82c 2b02 	strhne.w	r2, [ip], #2
  40779c:	f88c 2000 	strbeq.w	r2, [ip]
  4077a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4077a4:	d1b3      	bne.n	40770e <strcpy+0x12>
  4077a6:	4770      	bx	lr
  4077a8:	f811 2b01 	ldrb.w	r2, [r1], #1
  4077ac:	f80c 2b01 	strb.w	r2, [ip], #1
  4077b0:	2a00      	cmp	r2, #0
  4077b2:	d1f9      	bne.n	4077a8 <strcpy+0xac>
  4077b4:	4770      	bx	lr
  4077b6:	bf00      	nop
	...

004077c0 <strlen>:
  4077c0:	f890 f000 	pld	[r0]
  4077c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4077c8:	f020 0107 	bic.w	r1, r0, #7
  4077cc:	f06f 0c00 	mvn.w	ip, #0
  4077d0:	f010 0407 	ands.w	r4, r0, #7
  4077d4:	f891 f020 	pld	[r1, #32]
  4077d8:	f040 8049 	bne.w	40786e <strlen+0xae>
  4077dc:	f04f 0400 	mov.w	r4, #0
  4077e0:	f06f 0007 	mvn.w	r0, #7
  4077e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4077e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4077ec:	f100 0008 	add.w	r0, r0, #8
  4077f0:	fa82 f24c 	uadd8	r2, r2, ip
  4077f4:	faa4 f28c 	sel	r2, r4, ip
  4077f8:	fa83 f34c 	uadd8	r3, r3, ip
  4077fc:	faa2 f38c 	sel	r3, r2, ip
  407800:	bb4b      	cbnz	r3, 407856 <strlen+0x96>
  407802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407806:	fa82 f24c 	uadd8	r2, r2, ip
  40780a:	f100 0008 	add.w	r0, r0, #8
  40780e:	faa4 f28c 	sel	r2, r4, ip
  407812:	fa83 f34c 	uadd8	r3, r3, ip
  407816:	faa2 f38c 	sel	r3, r2, ip
  40781a:	b9e3      	cbnz	r3, 407856 <strlen+0x96>
  40781c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407820:	fa82 f24c 	uadd8	r2, r2, ip
  407824:	f100 0008 	add.w	r0, r0, #8
  407828:	faa4 f28c 	sel	r2, r4, ip
  40782c:	fa83 f34c 	uadd8	r3, r3, ip
  407830:	faa2 f38c 	sel	r3, r2, ip
  407834:	b97b      	cbnz	r3, 407856 <strlen+0x96>
  407836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40783a:	f101 0120 	add.w	r1, r1, #32
  40783e:	fa82 f24c 	uadd8	r2, r2, ip
  407842:	f100 0008 	add.w	r0, r0, #8
  407846:	faa4 f28c 	sel	r2, r4, ip
  40784a:	fa83 f34c 	uadd8	r3, r3, ip
  40784e:	faa2 f38c 	sel	r3, r2, ip
  407852:	2b00      	cmp	r3, #0
  407854:	d0c6      	beq.n	4077e4 <strlen+0x24>
  407856:	2a00      	cmp	r2, #0
  407858:	bf04      	itt	eq
  40785a:	3004      	addeq	r0, #4
  40785c:	461a      	moveq	r2, r3
  40785e:	ba12      	rev	r2, r2
  407860:	fab2 f282 	clz	r2, r2
  407864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40786c:	4770      	bx	lr
  40786e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407872:	f004 0503 	and.w	r5, r4, #3
  407876:	f1c4 0000 	rsb	r0, r4, #0
  40787a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40787e:	f014 0f04 	tst.w	r4, #4
  407882:	f891 f040 	pld	[r1, #64]	; 0x40
  407886:	fa0c f505 	lsl.w	r5, ip, r5
  40788a:	ea62 0205 	orn	r2, r2, r5
  40788e:	bf1c      	itt	ne
  407890:	ea63 0305 	ornne	r3, r3, r5
  407894:	4662      	movne	r2, ip
  407896:	f04f 0400 	mov.w	r4, #0
  40789a:	e7a9      	b.n	4077f0 <strlen+0x30>

0040789c <strncmp>:
  40789c:	2a00      	cmp	r2, #0
  40789e:	d041      	beq.n	407924 <strncmp+0x88>
  4078a0:	ea40 0301 	orr.w	r3, r0, r1
  4078a4:	f013 0303 	ands.w	r3, r3, #3
  4078a8:	b4f0      	push	{r4, r5, r6, r7}
  4078aa:	d125      	bne.n	4078f8 <strncmp+0x5c>
  4078ac:	2a03      	cmp	r2, #3
  4078ae:	d923      	bls.n	4078f8 <strncmp+0x5c>
  4078b0:	6804      	ldr	r4, [r0, #0]
  4078b2:	680d      	ldr	r5, [r1, #0]
  4078b4:	42ac      	cmp	r4, r5
  4078b6:	d11f      	bne.n	4078f8 <strncmp+0x5c>
  4078b8:	3a04      	subs	r2, #4
  4078ba:	d038      	beq.n	40792e <strncmp+0x92>
  4078bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  4078c0:	ea25 0404 	bic.w	r4, r5, r4
  4078c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4078c8:	d12e      	bne.n	407928 <strncmp+0x8c>
  4078ca:	3004      	adds	r0, #4
  4078cc:	3104      	adds	r1, #4
  4078ce:	e00f      	b.n	4078f0 <strncmp+0x54>
  4078d0:	f850 3b04 	ldr.w	r3, [r0], #4
  4078d4:	680e      	ldr	r6, [r1, #0]
  4078d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  4078da:	42b3      	cmp	r3, r6
  4078dc:	ea24 0403 	bic.w	r4, r4, r3
  4078e0:	f101 0104 	add.w	r1, r1, #4
  4078e4:	d126      	bne.n	407934 <strncmp+0x98>
  4078e6:	3a04      	subs	r2, #4
  4078e8:	d021      	beq.n	40792e <strncmp+0x92>
  4078ea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4078ee:	d11b      	bne.n	407928 <strncmp+0x8c>
  4078f0:	2a03      	cmp	r2, #3
  4078f2:	4607      	mov	r7, r0
  4078f4:	460d      	mov	r5, r1
  4078f6:	d8eb      	bhi.n	4078d0 <strncmp+0x34>
  4078f8:	7805      	ldrb	r5, [r0, #0]
  4078fa:	780c      	ldrb	r4, [r1, #0]
  4078fc:	42ac      	cmp	r4, r5
  4078fe:	f102 33ff 	add.w	r3, r2, #4294967295
  407902:	d11a      	bne.n	40793a <strncmp+0x9e>
  407904:	b183      	cbz	r3, 407928 <strncmp+0x8c>
  407906:	b914      	cbnz	r4, 40790e <strncmp+0x72>
  407908:	e00e      	b.n	407928 <strncmp+0x8c>
  40790a:	b16b      	cbz	r3, 407928 <strncmp+0x8c>
  40790c:	b17a      	cbz	r2, 40792e <strncmp+0x92>
  40790e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  407912:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  407916:	42a2      	cmp	r2, r4
  407918:	f103 33ff 	add.w	r3, r3, #4294967295
  40791c:	d0f5      	beq.n	40790a <strncmp+0x6e>
  40791e:	1b10      	subs	r0, r2, r4
  407920:	bcf0      	pop	{r4, r5, r6, r7}
  407922:	4770      	bx	lr
  407924:	4610      	mov	r0, r2
  407926:	4770      	bx	lr
  407928:	2000      	movs	r0, #0
  40792a:	bcf0      	pop	{r4, r5, r6, r7}
  40792c:	4770      	bx	lr
  40792e:	4610      	mov	r0, r2
  407930:	bcf0      	pop	{r4, r5, r6, r7}
  407932:	4770      	bx	lr
  407934:	4629      	mov	r1, r5
  407936:	4638      	mov	r0, r7
  407938:	e7de      	b.n	4078f8 <strncmp+0x5c>
  40793a:	462a      	mov	r2, r5
  40793c:	e7ef      	b.n	40791e <strncmp+0x82>
  40793e:	bf00      	nop

00407940 <__sprint_r.part.0>:
  407940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407944:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407946:	049c      	lsls	r4, r3, #18
  407948:	4693      	mov	fp, r2
  40794a:	d52f      	bpl.n	4079ac <__sprint_r.part.0+0x6c>
  40794c:	6893      	ldr	r3, [r2, #8]
  40794e:	6812      	ldr	r2, [r2, #0]
  407950:	b353      	cbz	r3, 4079a8 <__sprint_r.part.0+0x68>
  407952:	460e      	mov	r6, r1
  407954:	4607      	mov	r7, r0
  407956:	f102 0908 	add.w	r9, r2, #8
  40795a:	e919 0420 	ldmdb	r9, {r5, sl}
  40795e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407962:	d017      	beq.n	407994 <__sprint_r.part.0+0x54>
  407964:	3d04      	subs	r5, #4
  407966:	2400      	movs	r4, #0
  407968:	e001      	b.n	40796e <__sprint_r.part.0+0x2e>
  40796a:	45a0      	cmp	r8, r4
  40796c:	d010      	beq.n	407990 <__sprint_r.part.0+0x50>
  40796e:	4632      	mov	r2, r6
  407970:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407974:	4638      	mov	r0, r7
  407976:	f001 f8bb 	bl	408af0 <_fputwc_r>
  40797a:	1c43      	adds	r3, r0, #1
  40797c:	f104 0401 	add.w	r4, r4, #1
  407980:	d1f3      	bne.n	40796a <__sprint_r.part.0+0x2a>
  407982:	2300      	movs	r3, #0
  407984:	f8cb 3008 	str.w	r3, [fp, #8]
  407988:	f8cb 3004 	str.w	r3, [fp, #4]
  40798c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407990:	f8db 3008 	ldr.w	r3, [fp, #8]
  407994:	f02a 0a03 	bic.w	sl, sl, #3
  407998:	eba3 030a 	sub.w	r3, r3, sl
  40799c:	f8cb 3008 	str.w	r3, [fp, #8]
  4079a0:	f109 0908 	add.w	r9, r9, #8
  4079a4:	2b00      	cmp	r3, #0
  4079a6:	d1d8      	bne.n	40795a <__sprint_r.part.0+0x1a>
  4079a8:	2000      	movs	r0, #0
  4079aa:	e7ea      	b.n	407982 <__sprint_r.part.0+0x42>
  4079ac:	f001 fa0a 	bl	408dc4 <__sfvwrite_r>
  4079b0:	2300      	movs	r3, #0
  4079b2:	f8cb 3008 	str.w	r3, [fp, #8]
  4079b6:	f8cb 3004 	str.w	r3, [fp, #4]
  4079ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079be:	bf00      	nop

004079c0 <_vfiprintf_r>:
  4079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079c4:	b0ad      	sub	sp, #180	; 0xb4
  4079c6:	461d      	mov	r5, r3
  4079c8:	468b      	mov	fp, r1
  4079ca:	4690      	mov	r8, r2
  4079cc:	9307      	str	r3, [sp, #28]
  4079ce:	9006      	str	r0, [sp, #24]
  4079d0:	b118      	cbz	r0, 4079da <_vfiprintf_r+0x1a>
  4079d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4079d4:	2b00      	cmp	r3, #0
  4079d6:	f000 80f3 	beq.w	407bc0 <_vfiprintf_r+0x200>
  4079da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4079de:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4079e2:	07df      	lsls	r7, r3, #31
  4079e4:	b281      	uxth	r1, r0
  4079e6:	d402      	bmi.n	4079ee <_vfiprintf_r+0x2e>
  4079e8:	058e      	lsls	r6, r1, #22
  4079ea:	f140 80fc 	bpl.w	407be6 <_vfiprintf_r+0x226>
  4079ee:	048c      	lsls	r4, r1, #18
  4079f0:	d40a      	bmi.n	407a08 <_vfiprintf_r+0x48>
  4079f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4079f6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4079fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4079fe:	f8ab 100c 	strh.w	r1, [fp, #12]
  407a02:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407a06:	b289      	uxth	r1, r1
  407a08:	0708      	lsls	r0, r1, #28
  407a0a:	f140 80b3 	bpl.w	407b74 <_vfiprintf_r+0x1b4>
  407a0e:	f8db 3010 	ldr.w	r3, [fp, #16]
  407a12:	2b00      	cmp	r3, #0
  407a14:	f000 80ae 	beq.w	407b74 <_vfiprintf_r+0x1b4>
  407a18:	f001 031a 	and.w	r3, r1, #26
  407a1c:	2b0a      	cmp	r3, #10
  407a1e:	f000 80b5 	beq.w	407b8c <_vfiprintf_r+0x1cc>
  407a22:	2300      	movs	r3, #0
  407a24:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407a28:	930b      	str	r3, [sp, #44]	; 0x2c
  407a2a:	9311      	str	r3, [sp, #68]	; 0x44
  407a2c:	9310      	str	r3, [sp, #64]	; 0x40
  407a2e:	9303      	str	r3, [sp, #12]
  407a30:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407a34:	46ca      	mov	sl, r9
  407a36:	f8cd b010 	str.w	fp, [sp, #16]
  407a3a:	f898 3000 	ldrb.w	r3, [r8]
  407a3e:	4644      	mov	r4, r8
  407a40:	b1fb      	cbz	r3, 407a82 <_vfiprintf_r+0xc2>
  407a42:	2b25      	cmp	r3, #37	; 0x25
  407a44:	d102      	bne.n	407a4c <_vfiprintf_r+0x8c>
  407a46:	e01c      	b.n	407a82 <_vfiprintf_r+0xc2>
  407a48:	2b25      	cmp	r3, #37	; 0x25
  407a4a:	d003      	beq.n	407a54 <_vfiprintf_r+0x94>
  407a4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407a50:	2b00      	cmp	r3, #0
  407a52:	d1f9      	bne.n	407a48 <_vfiprintf_r+0x88>
  407a54:	eba4 0508 	sub.w	r5, r4, r8
  407a58:	b19d      	cbz	r5, 407a82 <_vfiprintf_r+0xc2>
  407a5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407a5e:	f8ca 8000 	str.w	r8, [sl]
  407a62:	3301      	adds	r3, #1
  407a64:	442a      	add	r2, r5
  407a66:	2b07      	cmp	r3, #7
  407a68:	f8ca 5004 	str.w	r5, [sl, #4]
  407a6c:	9211      	str	r2, [sp, #68]	; 0x44
  407a6e:	9310      	str	r3, [sp, #64]	; 0x40
  407a70:	dd7a      	ble.n	407b68 <_vfiprintf_r+0x1a8>
  407a72:	2a00      	cmp	r2, #0
  407a74:	f040 84b0 	bne.w	4083d8 <_vfiprintf_r+0xa18>
  407a78:	9b03      	ldr	r3, [sp, #12]
  407a7a:	9210      	str	r2, [sp, #64]	; 0x40
  407a7c:	442b      	add	r3, r5
  407a7e:	46ca      	mov	sl, r9
  407a80:	9303      	str	r3, [sp, #12]
  407a82:	7823      	ldrb	r3, [r4, #0]
  407a84:	2b00      	cmp	r3, #0
  407a86:	f000 83e0 	beq.w	40824a <_vfiprintf_r+0x88a>
  407a8a:	2000      	movs	r0, #0
  407a8c:	f04f 0300 	mov.w	r3, #0
  407a90:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407a94:	f104 0801 	add.w	r8, r4, #1
  407a98:	7862      	ldrb	r2, [r4, #1]
  407a9a:	4605      	mov	r5, r0
  407a9c:	4606      	mov	r6, r0
  407a9e:	4603      	mov	r3, r0
  407aa0:	f04f 34ff 	mov.w	r4, #4294967295
  407aa4:	f108 0801 	add.w	r8, r8, #1
  407aa8:	f1a2 0120 	sub.w	r1, r2, #32
  407aac:	2958      	cmp	r1, #88	; 0x58
  407aae:	f200 82de 	bhi.w	40806e <_vfiprintf_r+0x6ae>
  407ab2:	e8df f011 	tbh	[pc, r1, lsl #1]
  407ab6:	0221      	.short	0x0221
  407ab8:	02dc02dc 	.word	0x02dc02dc
  407abc:	02dc0229 	.word	0x02dc0229
  407ac0:	02dc02dc 	.word	0x02dc02dc
  407ac4:	02dc02dc 	.word	0x02dc02dc
  407ac8:	028902dc 	.word	0x028902dc
  407acc:	02dc0295 	.word	0x02dc0295
  407ad0:	02bd00a2 	.word	0x02bd00a2
  407ad4:	019f02dc 	.word	0x019f02dc
  407ad8:	01a401a4 	.word	0x01a401a4
  407adc:	01a401a4 	.word	0x01a401a4
  407ae0:	01a401a4 	.word	0x01a401a4
  407ae4:	01a401a4 	.word	0x01a401a4
  407ae8:	02dc01a4 	.word	0x02dc01a4
  407aec:	02dc02dc 	.word	0x02dc02dc
  407af0:	02dc02dc 	.word	0x02dc02dc
  407af4:	02dc02dc 	.word	0x02dc02dc
  407af8:	02dc02dc 	.word	0x02dc02dc
  407afc:	01b202dc 	.word	0x01b202dc
  407b00:	02dc02dc 	.word	0x02dc02dc
  407b04:	02dc02dc 	.word	0x02dc02dc
  407b08:	02dc02dc 	.word	0x02dc02dc
  407b0c:	02dc02dc 	.word	0x02dc02dc
  407b10:	02dc02dc 	.word	0x02dc02dc
  407b14:	02dc0197 	.word	0x02dc0197
  407b18:	02dc02dc 	.word	0x02dc02dc
  407b1c:	02dc02dc 	.word	0x02dc02dc
  407b20:	02dc019b 	.word	0x02dc019b
  407b24:	025302dc 	.word	0x025302dc
  407b28:	02dc02dc 	.word	0x02dc02dc
  407b2c:	02dc02dc 	.word	0x02dc02dc
  407b30:	02dc02dc 	.word	0x02dc02dc
  407b34:	02dc02dc 	.word	0x02dc02dc
  407b38:	02dc02dc 	.word	0x02dc02dc
  407b3c:	021b025a 	.word	0x021b025a
  407b40:	02dc02dc 	.word	0x02dc02dc
  407b44:	026e02dc 	.word	0x026e02dc
  407b48:	02dc021b 	.word	0x02dc021b
  407b4c:	027302dc 	.word	0x027302dc
  407b50:	01f502dc 	.word	0x01f502dc
  407b54:	02090182 	.word	0x02090182
  407b58:	02dc02d7 	.word	0x02dc02d7
  407b5c:	02dc029a 	.word	0x02dc029a
  407b60:	02dc00a7 	.word	0x02dc00a7
  407b64:	022e02dc 	.word	0x022e02dc
  407b68:	f10a 0a08 	add.w	sl, sl, #8
  407b6c:	9b03      	ldr	r3, [sp, #12]
  407b6e:	442b      	add	r3, r5
  407b70:	9303      	str	r3, [sp, #12]
  407b72:	e786      	b.n	407a82 <_vfiprintf_r+0xc2>
  407b74:	4659      	mov	r1, fp
  407b76:	9806      	ldr	r0, [sp, #24]
  407b78:	f000 fdac 	bl	4086d4 <__swsetup_r>
  407b7c:	bb18      	cbnz	r0, 407bc6 <_vfiprintf_r+0x206>
  407b7e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  407b82:	f001 031a 	and.w	r3, r1, #26
  407b86:	2b0a      	cmp	r3, #10
  407b88:	f47f af4b 	bne.w	407a22 <_vfiprintf_r+0x62>
  407b8c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  407b90:	2b00      	cmp	r3, #0
  407b92:	f6ff af46 	blt.w	407a22 <_vfiprintf_r+0x62>
  407b96:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407b9a:	07db      	lsls	r3, r3, #31
  407b9c:	d405      	bmi.n	407baa <_vfiprintf_r+0x1ea>
  407b9e:	058f      	lsls	r7, r1, #22
  407ba0:	d403      	bmi.n	407baa <_vfiprintf_r+0x1ea>
  407ba2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407ba6:	f001 fac3 	bl	409130 <__retarget_lock_release_recursive>
  407baa:	462b      	mov	r3, r5
  407bac:	4642      	mov	r2, r8
  407bae:	4659      	mov	r1, fp
  407bb0:	9806      	ldr	r0, [sp, #24]
  407bb2:	f000 fd4d 	bl	408650 <__sbprintf>
  407bb6:	9003      	str	r0, [sp, #12]
  407bb8:	9803      	ldr	r0, [sp, #12]
  407bba:	b02d      	add	sp, #180	; 0xb4
  407bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bc0:	f000 fef4 	bl	4089ac <__sinit>
  407bc4:	e709      	b.n	4079da <_vfiprintf_r+0x1a>
  407bc6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407bca:	07d9      	lsls	r1, r3, #31
  407bcc:	d404      	bmi.n	407bd8 <_vfiprintf_r+0x218>
  407bce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407bd2:	059a      	lsls	r2, r3, #22
  407bd4:	f140 84aa 	bpl.w	40852c <_vfiprintf_r+0xb6c>
  407bd8:	f04f 33ff 	mov.w	r3, #4294967295
  407bdc:	9303      	str	r3, [sp, #12]
  407bde:	9803      	ldr	r0, [sp, #12]
  407be0:	b02d      	add	sp, #180	; 0xb4
  407be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407bea:	f001 fa9f 	bl	40912c <__retarget_lock_acquire_recursive>
  407bee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407bf2:	b281      	uxth	r1, r0
  407bf4:	e6fb      	b.n	4079ee <_vfiprintf_r+0x2e>
  407bf6:	4276      	negs	r6, r6
  407bf8:	9207      	str	r2, [sp, #28]
  407bfa:	f043 0304 	orr.w	r3, r3, #4
  407bfe:	f898 2000 	ldrb.w	r2, [r8]
  407c02:	e74f      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407c04:	9608      	str	r6, [sp, #32]
  407c06:	069e      	lsls	r6, r3, #26
  407c08:	f100 8450 	bmi.w	4084ac <_vfiprintf_r+0xaec>
  407c0c:	9907      	ldr	r1, [sp, #28]
  407c0e:	06dd      	lsls	r5, r3, #27
  407c10:	460a      	mov	r2, r1
  407c12:	f100 83ef 	bmi.w	4083f4 <_vfiprintf_r+0xa34>
  407c16:	0658      	lsls	r0, r3, #25
  407c18:	f140 83ec 	bpl.w	4083f4 <_vfiprintf_r+0xa34>
  407c1c:	880e      	ldrh	r6, [r1, #0]
  407c1e:	3104      	adds	r1, #4
  407c20:	2700      	movs	r7, #0
  407c22:	2201      	movs	r2, #1
  407c24:	9107      	str	r1, [sp, #28]
  407c26:	f04f 0100 	mov.w	r1, #0
  407c2a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  407c2e:	2500      	movs	r5, #0
  407c30:	1c61      	adds	r1, r4, #1
  407c32:	f000 8116 	beq.w	407e62 <_vfiprintf_r+0x4a2>
  407c36:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  407c3a:	9102      	str	r1, [sp, #8]
  407c3c:	ea56 0107 	orrs.w	r1, r6, r7
  407c40:	f040 8114 	bne.w	407e6c <_vfiprintf_r+0x4ac>
  407c44:	2c00      	cmp	r4, #0
  407c46:	f040 835c 	bne.w	408302 <_vfiprintf_r+0x942>
  407c4a:	2a00      	cmp	r2, #0
  407c4c:	f040 83b7 	bne.w	4083be <_vfiprintf_r+0x9fe>
  407c50:	f013 0301 	ands.w	r3, r3, #1
  407c54:	9305      	str	r3, [sp, #20]
  407c56:	f000 8457 	beq.w	408508 <_vfiprintf_r+0xb48>
  407c5a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407c5e:	2330      	movs	r3, #48	; 0x30
  407c60:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407c64:	9b05      	ldr	r3, [sp, #20]
  407c66:	42a3      	cmp	r3, r4
  407c68:	bfb8      	it	lt
  407c6a:	4623      	movlt	r3, r4
  407c6c:	9301      	str	r3, [sp, #4]
  407c6e:	b10d      	cbz	r5, 407c74 <_vfiprintf_r+0x2b4>
  407c70:	3301      	adds	r3, #1
  407c72:	9301      	str	r3, [sp, #4]
  407c74:	9b02      	ldr	r3, [sp, #8]
  407c76:	f013 0302 	ands.w	r3, r3, #2
  407c7a:	9309      	str	r3, [sp, #36]	; 0x24
  407c7c:	d002      	beq.n	407c84 <_vfiprintf_r+0x2c4>
  407c7e:	9b01      	ldr	r3, [sp, #4]
  407c80:	3302      	adds	r3, #2
  407c82:	9301      	str	r3, [sp, #4]
  407c84:	9b02      	ldr	r3, [sp, #8]
  407c86:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407c8a:	930a      	str	r3, [sp, #40]	; 0x28
  407c8c:	f040 8217 	bne.w	4080be <_vfiprintf_r+0x6fe>
  407c90:	9b08      	ldr	r3, [sp, #32]
  407c92:	9a01      	ldr	r2, [sp, #4]
  407c94:	1a9d      	subs	r5, r3, r2
  407c96:	2d00      	cmp	r5, #0
  407c98:	f340 8211 	ble.w	4080be <_vfiprintf_r+0x6fe>
  407c9c:	2d10      	cmp	r5, #16
  407c9e:	f340 8490 	ble.w	4085c2 <_vfiprintf_r+0xc02>
  407ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407ca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407ca6:	4ec4      	ldr	r6, [pc, #784]	; (407fb8 <_vfiprintf_r+0x5f8>)
  407ca8:	46d6      	mov	lr, sl
  407caa:	2710      	movs	r7, #16
  407cac:	46a2      	mov	sl, r4
  407cae:	4619      	mov	r1, r3
  407cb0:	9c06      	ldr	r4, [sp, #24]
  407cb2:	e007      	b.n	407cc4 <_vfiprintf_r+0x304>
  407cb4:	f101 0c02 	add.w	ip, r1, #2
  407cb8:	f10e 0e08 	add.w	lr, lr, #8
  407cbc:	4601      	mov	r1, r0
  407cbe:	3d10      	subs	r5, #16
  407cc0:	2d10      	cmp	r5, #16
  407cc2:	dd11      	ble.n	407ce8 <_vfiprintf_r+0x328>
  407cc4:	1c48      	adds	r0, r1, #1
  407cc6:	3210      	adds	r2, #16
  407cc8:	2807      	cmp	r0, #7
  407cca:	9211      	str	r2, [sp, #68]	; 0x44
  407ccc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  407cd0:	9010      	str	r0, [sp, #64]	; 0x40
  407cd2:	ddef      	ble.n	407cb4 <_vfiprintf_r+0x2f4>
  407cd4:	2a00      	cmp	r2, #0
  407cd6:	f040 81e4 	bne.w	4080a2 <_vfiprintf_r+0x6e2>
  407cda:	3d10      	subs	r5, #16
  407cdc:	2d10      	cmp	r5, #16
  407cde:	4611      	mov	r1, r2
  407ce0:	f04f 0c01 	mov.w	ip, #1
  407ce4:	46ce      	mov	lr, r9
  407ce6:	dced      	bgt.n	407cc4 <_vfiprintf_r+0x304>
  407ce8:	4654      	mov	r4, sl
  407cea:	4661      	mov	r1, ip
  407cec:	46f2      	mov	sl, lr
  407cee:	442a      	add	r2, r5
  407cf0:	2907      	cmp	r1, #7
  407cf2:	9211      	str	r2, [sp, #68]	; 0x44
  407cf4:	f8ca 6000 	str.w	r6, [sl]
  407cf8:	f8ca 5004 	str.w	r5, [sl, #4]
  407cfc:	9110      	str	r1, [sp, #64]	; 0x40
  407cfe:	f300 82ec 	bgt.w	4082da <_vfiprintf_r+0x91a>
  407d02:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407d06:	f10a 0a08 	add.w	sl, sl, #8
  407d0a:	1c48      	adds	r0, r1, #1
  407d0c:	2d00      	cmp	r5, #0
  407d0e:	f040 81de 	bne.w	4080ce <_vfiprintf_r+0x70e>
  407d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407d14:	2b00      	cmp	r3, #0
  407d16:	f000 81f8 	beq.w	40810a <_vfiprintf_r+0x74a>
  407d1a:	3202      	adds	r2, #2
  407d1c:	a90e      	add	r1, sp, #56	; 0x38
  407d1e:	2302      	movs	r3, #2
  407d20:	2807      	cmp	r0, #7
  407d22:	9211      	str	r2, [sp, #68]	; 0x44
  407d24:	9010      	str	r0, [sp, #64]	; 0x40
  407d26:	e88a 000a 	stmia.w	sl, {r1, r3}
  407d2a:	f340 81ea 	ble.w	408102 <_vfiprintf_r+0x742>
  407d2e:	2a00      	cmp	r2, #0
  407d30:	f040 838c 	bne.w	40844c <_vfiprintf_r+0xa8c>
  407d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d36:	2b80      	cmp	r3, #128	; 0x80
  407d38:	f04f 0001 	mov.w	r0, #1
  407d3c:	4611      	mov	r1, r2
  407d3e:	46ca      	mov	sl, r9
  407d40:	f040 81e7 	bne.w	408112 <_vfiprintf_r+0x752>
  407d44:	9b08      	ldr	r3, [sp, #32]
  407d46:	9d01      	ldr	r5, [sp, #4]
  407d48:	1b5e      	subs	r6, r3, r5
  407d4a:	2e00      	cmp	r6, #0
  407d4c:	f340 81e1 	ble.w	408112 <_vfiprintf_r+0x752>
  407d50:	2e10      	cmp	r6, #16
  407d52:	4d9a      	ldr	r5, [pc, #616]	; (407fbc <_vfiprintf_r+0x5fc>)
  407d54:	f340 8450 	ble.w	4085f8 <_vfiprintf_r+0xc38>
  407d58:	46d4      	mov	ip, sl
  407d5a:	2710      	movs	r7, #16
  407d5c:	46a2      	mov	sl, r4
  407d5e:	9c06      	ldr	r4, [sp, #24]
  407d60:	e007      	b.n	407d72 <_vfiprintf_r+0x3b2>
  407d62:	f101 0e02 	add.w	lr, r1, #2
  407d66:	f10c 0c08 	add.w	ip, ip, #8
  407d6a:	4601      	mov	r1, r0
  407d6c:	3e10      	subs	r6, #16
  407d6e:	2e10      	cmp	r6, #16
  407d70:	dd11      	ble.n	407d96 <_vfiprintf_r+0x3d6>
  407d72:	1c48      	adds	r0, r1, #1
  407d74:	3210      	adds	r2, #16
  407d76:	2807      	cmp	r0, #7
  407d78:	9211      	str	r2, [sp, #68]	; 0x44
  407d7a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  407d7e:	9010      	str	r0, [sp, #64]	; 0x40
  407d80:	ddef      	ble.n	407d62 <_vfiprintf_r+0x3a2>
  407d82:	2a00      	cmp	r2, #0
  407d84:	f040 829d 	bne.w	4082c2 <_vfiprintf_r+0x902>
  407d88:	3e10      	subs	r6, #16
  407d8a:	2e10      	cmp	r6, #16
  407d8c:	f04f 0e01 	mov.w	lr, #1
  407d90:	4611      	mov	r1, r2
  407d92:	46cc      	mov	ip, r9
  407d94:	dced      	bgt.n	407d72 <_vfiprintf_r+0x3b2>
  407d96:	4654      	mov	r4, sl
  407d98:	46e2      	mov	sl, ip
  407d9a:	4432      	add	r2, r6
  407d9c:	f1be 0f07 	cmp.w	lr, #7
  407da0:	9211      	str	r2, [sp, #68]	; 0x44
  407da2:	e88a 0060 	stmia.w	sl, {r5, r6}
  407da6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  407daa:	f300 8369 	bgt.w	408480 <_vfiprintf_r+0xac0>
  407dae:	f10a 0a08 	add.w	sl, sl, #8
  407db2:	f10e 0001 	add.w	r0, lr, #1
  407db6:	4671      	mov	r1, lr
  407db8:	e1ab      	b.n	408112 <_vfiprintf_r+0x752>
  407dba:	9608      	str	r6, [sp, #32]
  407dbc:	f013 0220 	ands.w	r2, r3, #32
  407dc0:	f040 838c 	bne.w	4084dc <_vfiprintf_r+0xb1c>
  407dc4:	f013 0110 	ands.w	r1, r3, #16
  407dc8:	f040 831a 	bne.w	408400 <_vfiprintf_r+0xa40>
  407dcc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  407dd0:	f000 8316 	beq.w	408400 <_vfiprintf_r+0xa40>
  407dd4:	9807      	ldr	r0, [sp, #28]
  407dd6:	460a      	mov	r2, r1
  407dd8:	4601      	mov	r1, r0
  407dda:	3104      	adds	r1, #4
  407ddc:	8806      	ldrh	r6, [r0, #0]
  407dde:	9107      	str	r1, [sp, #28]
  407de0:	2700      	movs	r7, #0
  407de2:	e720      	b.n	407c26 <_vfiprintf_r+0x266>
  407de4:	9608      	str	r6, [sp, #32]
  407de6:	f043 0310 	orr.w	r3, r3, #16
  407dea:	e7e7      	b.n	407dbc <_vfiprintf_r+0x3fc>
  407dec:	9608      	str	r6, [sp, #32]
  407dee:	f043 0310 	orr.w	r3, r3, #16
  407df2:	e708      	b.n	407c06 <_vfiprintf_r+0x246>
  407df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407df8:	f898 2000 	ldrb.w	r2, [r8]
  407dfc:	e652      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407dfe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407e02:	2600      	movs	r6, #0
  407e04:	f818 2b01 	ldrb.w	r2, [r8], #1
  407e08:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  407e0c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  407e10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407e14:	2909      	cmp	r1, #9
  407e16:	d9f5      	bls.n	407e04 <_vfiprintf_r+0x444>
  407e18:	e646      	b.n	407aa8 <_vfiprintf_r+0xe8>
  407e1a:	9608      	str	r6, [sp, #32]
  407e1c:	2800      	cmp	r0, #0
  407e1e:	f040 8408 	bne.w	408632 <_vfiprintf_r+0xc72>
  407e22:	f043 0310 	orr.w	r3, r3, #16
  407e26:	069e      	lsls	r6, r3, #26
  407e28:	f100 834c 	bmi.w	4084c4 <_vfiprintf_r+0xb04>
  407e2c:	06dd      	lsls	r5, r3, #27
  407e2e:	f100 82f3 	bmi.w	408418 <_vfiprintf_r+0xa58>
  407e32:	0658      	lsls	r0, r3, #25
  407e34:	f140 82f0 	bpl.w	408418 <_vfiprintf_r+0xa58>
  407e38:	9d07      	ldr	r5, [sp, #28]
  407e3a:	f9b5 6000 	ldrsh.w	r6, [r5]
  407e3e:	462a      	mov	r2, r5
  407e40:	17f7      	asrs	r7, r6, #31
  407e42:	3204      	adds	r2, #4
  407e44:	4630      	mov	r0, r6
  407e46:	4639      	mov	r1, r7
  407e48:	9207      	str	r2, [sp, #28]
  407e4a:	2800      	cmp	r0, #0
  407e4c:	f171 0200 	sbcs.w	r2, r1, #0
  407e50:	f2c0 835d 	blt.w	40850e <_vfiprintf_r+0xb4e>
  407e54:	1c61      	adds	r1, r4, #1
  407e56:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407e5a:	f04f 0201 	mov.w	r2, #1
  407e5e:	f47f aeea 	bne.w	407c36 <_vfiprintf_r+0x276>
  407e62:	ea56 0107 	orrs.w	r1, r6, r7
  407e66:	f000 824d 	beq.w	408304 <_vfiprintf_r+0x944>
  407e6a:	9302      	str	r3, [sp, #8]
  407e6c:	2a01      	cmp	r2, #1
  407e6e:	f000 828c 	beq.w	40838a <_vfiprintf_r+0x9ca>
  407e72:	2a02      	cmp	r2, #2
  407e74:	f040 825c 	bne.w	408330 <_vfiprintf_r+0x970>
  407e78:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407e7a:	46cb      	mov	fp, r9
  407e7c:	0933      	lsrs	r3, r6, #4
  407e7e:	f006 010f 	and.w	r1, r6, #15
  407e82:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  407e86:	093a      	lsrs	r2, r7, #4
  407e88:	461e      	mov	r6, r3
  407e8a:	4617      	mov	r7, r2
  407e8c:	5c43      	ldrb	r3, [r0, r1]
  407e8e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  407e92:	ea56 0307 	orrs.w	r3, r6, r7
  407e96:	d1f1      	bne.n	407e7c <_vfiprintf_r+0x4bc>
  407e98:	eba9 030b 	sub.w	r3, r9, fp
  407e9c:	9305      	str	r3, [sp, #20]
  407e9e:	e6e1      	b.n	407c64 <_vfiprintf_r+0x2a4>
  407ea0:	2800      	cmp	r0, #0
  407ea2:	f040 83c0 	bne.w	408626 <_vfiprintf_r+0xc66>
  407ea6:	0699      	lsls	r1, r3, #26
  407ea8:	f100 8367 	bmi.w	40857a <_vfiprintf_r+0xbba>
  407eac:	06da      	lsls	r2, r3, #27
  407eae:	f100 80f1 	bmi.w	408094 <_vfiprintf_r+0x6d4>
  407eb2:	065b      	lsls	r3, r3, #25
  407eb4:	f140 80ee 	bpl.w	408094 <_vfiprintf_r+0x6d4>
  407eb8:	9a07      	ldr	r2, [sp, #28]
  407eba:	6813      	ldr	r3, [r2, #0]
  407ebc:	3204      	adds	r2, #4
  407ebe:	9207      	str	r2, [sp, #28]
  407ec0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  407ec4:	801a      	strh	r2, [r3, #0]
  407ec6:	e5b8      	b.n	407a3a <_vfiprintf_r+0x7a>
  407ec8:	9807      	ldr	r0, [sp, #28]
  407eca:	4a3d      	ldr	r2, [pc, #244]	; (407fc0 <_vfiprintf_r+0x600>)
  407ecc:	9608      	str	r6, [sp, #32]
  407ece:	920b      	str	r2, [sp, #44]	; 0x2c
  407ed0:	6806      	ldr	r6, [r0, #0]
  407ed2:	2278      	movs	r2, #120	; 0x78
  407ed4:	2130      	movs	r1, #48	; 0x30
  407ed6:	3004      	adds	r0, #4
  407ed8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407edc:	f043 0302 	orr.w	r3, r3, #2
  407ee0:	9007      	str	r0, [sp, #28]
  407ee2:	2700      	movs	r7, #0
  407ee4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407ee8:	2202      	movs	r2, #2
  407eea:	e69c      	b.n	407c26 <_vfiprintf_r+0x266>
  407eec:	9608      	str	r6, [sp, #32]
  407eee:	2800      	cmp	r0, #0
  407ef0:	d099      	beq.n	407e26 <_vfiprintf_r+0x466>
  407ef2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407ef6:	e796      	b.n	407e26 <_vfiprintf_r+0x466>
  407ef8:	f898 2000 	ldrb.w	r2, [r8]
  407efc:	2d00      	cmp	r5, #0
  407efe:	f47f add1 	bne.w	407aa4 <_vfiprintf_r+0xe4>
  407f02:	2001      	movs	r0, #1
  407f04:	2520      	movs	r5, #32
  407f06:	e5cd      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407f08:	f043 0301 	orr.w	r3, r3, #1
  407f0c:	f898 2000 	ldrb.w	r2, [r8]
  407f10:	e5c8      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407f12:	9608      	str	r6, [sp, #32]
  407f14:	2800      	cmp	r0, #0
  407f16:	f040 8393 	bne.w	408640 <_vfiprintf_r+0xc80>
  407f1a:	4929      	ldr	r1, [pc, #164]	; (407fc0 <_vfiprintf_r+0x600>)
  407f1c:	910b      	str	r1, [sp, #44]	; 0x2c
  407f1e:	069f      	lsls	r7, r3, #26
  407f20:	f100 82e8 	bmi.w	4084f4 <_vfiprintf_r+0xb34>
  407f24:	9807      	ldr	r0, [sp, #28]
  407f26:	06de      	lsls	r6, r3, #27
  407f28:	4601      	mov	r1, r0
  407f2a:	f100 8270 	bmi.w	40840e <_vfiprintf_r+0xa4e>
  407f2e:	065d      	lsls	r5, r3, #25
  407f30:	f140 826d 	bpl.w	40840e <_vfiprintf_r+0xa4e>
  407f34:	3104      	adds	r1, #4
  407f36:	8806      	ldrh	r6, [r0, #0]
  407f38:	9107      	str	r1, [sp, #28]
  407f3a:	2700      	movs	r7, #0
  407f3c:	07d8      	lsls	r0, r3, #31
  407f3e:	f140 8222 	bpl.w	408386 <_vfiprintf_r+0x9c6>
  407f42:	ea56 0107 	orrs.w	r1, r6, r7
  407f46:	f000 821e 	beq.w	408386 <_vfiprintf_r+0x9c6>
  407f4a:	2130      	movs	r1, #48	; 0x30
  407f4c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407f50:	f043 0302 	orr.w	r3, r3, #2
  407f54:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407f58:	2202      	movs	r2, #2
  407f5a:	e664      	b.n	407c26 <_vfiprintf_r+0x266>
  407f5c:	9608      	str	r6, [sp, #32]
  407f5e:	2800      	cmp	r0, #0
  407f60:	f040 836b 	bne.w	40863a <_vfiprintf_r+0xc7a>
  407f64:	4917      	ldr	r1, [pc, #92]	; (407fc4 <_vfiprintf_r+0x604>)
  407f66:	910b      	str	r1, [sp, #44]	; 0x2c
  407f68:	e7d9      	b.n	407f1e <_vfiprintf_r+0x55e>
  407f6a:	9907      	ldr	r1, [sp, #28]
  407f6c:	9608      	str	r6, [sp, #32]
  407f6e:	680a      	ldr	r2, [r1, #0]
  407f70:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407f74:	f04f 0000 	mov.w	r0, #0
  407f78:	460a      	mov	r2, r1
  407f7a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  407f7e:	3204      	adds	r2, #4
  407f80:	2001      	movs	r0, #1
  407f82:	9001      	str	r0, [sp, #4]
  407f84:	9207      	str	r2, [sp, #28]
  407f86:	9005      	str	r0, [sp, #20]
  407f88:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407f8c:	9302      	str	r3, [sp, #8]
  407f8e:	2400      	movs	r4, #0
  407f90:	e670      	b.n	407c74 <_vfiprintf_r+0x2b4>
  407f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407f96:	f898 2000 	ldrb.w	r2, [r8]
  407f9a:	e583      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407f9c:	f898 2000 	ldrb.w	r2, [r8]
  407fa0:	2a6c      	cmp	r2, #108	; 0x6c
  407fa2:	bf03      	ittte	eq
  407fa4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  407fa8:	f043 0320 	orreq.w	r3, r3, #32
  407fac:	f108 0801 	addeq.w	r8, r8, #1
  407fb0:	f043 0310 	orrne.w	r3, r3, #16
  407fb4:	e576      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407fb6:	bf00      	nop
  407fb8:	0040b218 	.word	0x0040b218
  407fbc:	0040b228 	.word	0x0040b228
  407fc0:	0040b1fc 	.word	0x0040b1fc
  407fc4:	0040b1e8 	.word	0x0040b1e8
  407fc8:	9907      	ldr	r1, [sp, #28]
  407fca:	680e      	ldr	r6, [r1, #0]
  407fcc:	460a      	mov	r2, r1
  407fce:	2e00      	cmp	r6, #0
  407fd0:	f102 0204 	add.w	r2, r2, #4
  407fd4:	f6ff ae0f 	blt.w	407bf6 <_vfiprintf_r+0x236>
  407fd8:	9207      	str	r2, [sp, #28]
  407fda:	f898 2000 	ldrb.w	r2, [r8]
  407fde:	e561      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407fe0:	f898 2000 	ldrb.w	r2, [r8]
  407fe4:	2001      	movs	r0, #1
  407fe6:	252b      	movs	r5, #43	; 0x2b
  407fe8:	e55c      	b.n	407aa4 <_vfiprintf_r+0xe4>
  407fea:	9907      	ldr	r1, [sp, #28]
  407fec:	9608      	str	r6, [sp, #32]
  407fee:	f8d1 b000 	ldr.w	fp, [r1]
  407ff2:	f04f 0200 	mov.w	r2, #0
  407ff6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407ffa:	1d0e      	adds	r6, r1, #4
  407ffc:	f1bb 0f00 	cmp.w	fp, #0
  408000:	f000 82e5 	beq.w	4085ce <_vfiprintf_r+0xc0e>
  408004:	1c67      	adds	r7, r4, #1
  408006:	f000 82c4 	beq.w	408592 <_vfiprintf_r+0xbd2>
  40800a:	4622      	mov	r2, r4
  40800c:	2100      	movs	r1, #0
  40800e:	4658      	mov	r0, fp
  408010:	9301      	str	r3, [sp, #4]
  408012:	f001 fbd5 	bl	4097c0 <memchr>
  408016:	9b01      	ldr	r3, [sp, #4]
  408018:	2800      	cmp	r0, #0
  40801a:	f000 82e5 	beq.w	4085e8 <_vfiprintf_r+0xc28>
  40801e:	eba0 020b 	sub.w	r2, r0, fp
  408022:	9205      	str	r2, [sp, #20]
  408024:	9607      	str	r6, [sp, #28]
  408026:	9302      	str	r3, [sp, #8]
  408028:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40802c:	2400      	movs	r4, #0
  40802e:	e619      	b.n	407c64 <_vfiprintf_r+0x2a4>
  408030:	f898 2000 	ldrb.w	r2, [r8]
  408034:	2a2a      	cmp	r2, #42	; 0x2a
  408036:	f108 0701 	add.w	r7, r8, #1
  40803a:	f000 82e9 	beq.w	408610 <_vfiprintf_r+0xc50>
  40803e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408042:	2909      	cmp	r1, #9
  408044:	46b8      	mov	r8, r7
  408046:	f04f 0400 	mov.w	r4, #0
  40804a:	f63f ad2d 	bhi.w	407aa8 <_vfiprintf_r+0xe8>
  40804e:	f818 2b01 	ldrb.w	r2, [r8], #1
  408052:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408056:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40805a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40805e:	2909      	cmp	r1, #9
  408060:	d9f5      	bls.n	40804e <_vfiprintf_r+0x68e>
  408062:	e521      	b.n	407aa8 <_vfiprintf_r+0xe8>
  408064:	f043 0320 	orr.w	r3, r3, #32
  408068:	f898 2000 	ldrb.w	r2, [r8]
  40806c:	e51a      	b.n	407aa4 <_vfiprintf_r+0xe4>
  40806e:	9608      	str	r6, [sp, #32]
  408070:	2800      	cmp	r0, #0
  408072:	f040 82db 	bne.w	40862c <_vfiprintf_r+0xc6c>
  408076:	2a00      	cmp	r2, #0
  408078:	f000 80e7 	beq.w	40824a <_vfiprintf_r+0x88a>
  40807c:	2101      	movs	r1, #1
  40807e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408082:	f04f 0200 	mov.w	r2, #0
  408086:	9101      	str	r1, [sp, #4]
  408088:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40808c:	9105      	str	r1, [sp, #20]
  40808e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408092:	e77b      	b.n	407f8c <_vfiprintf_r+0x5cc>
  408094:	9a07      	ldr	r2, [sp, #28]
  408096:	6813      	ldr	r3, [r2, #0]
  408098:	3204      	adds	r2, #4
  40809a:	9207      	str	r2, [sp, #28]
  40809c:	9a03      	ldr	r2, [sp, #12]
  40809e:	601a      	str	r2, [r3, #0]
  4080a0:	e4cb      	b.n	407a3a <_vfiprintf_r+0x7a>
  4080a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4080a4:	9904      	ldr	r1, [sp, #16]
  4080a6:	4620      	mov	r0, r4
  4080a8:	f7ff fc4a 	bl	407940 <__sprint_r.part.0>
  4080ac:	2800      	cmp	r0, #0
  4080ae:	f040 8139 	bne.w	408324 <_vfiprintf_r+0x964>
  4080b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4080b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4080b6:	f101 0c01 	add.w	ip, r1, #1
  4080ba:	46ce      	mov	lr, r9
  4080bc:	e5ff      	b.n	407cbe <_vfiprintf_r+0x2fe>
  4080be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4080c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4080c2:	1c48      	adds	r0, r1, #1
  4080c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4080c8:	2d00      	cmp	r5, #0
  4080ca:	f43f ae22 	beq.w	407d12 <_vfiprintf_r+0x352>
  4080ce:	3201      	adds	r2, #1
  4080d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4080d4:	2101      	movs	r1, #1
  4080d6:	2807      	cmp	r0, #7
  4080d8:	9211      	str	r2, [sp, #68]	; 0x44
  4080da:	9010      	str	r0, [sp, #64]	; 0x40
  4080dc:	f8ca 5000 	str.w	r5, [sl]
  4080e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4080e4:	f340 8108 	ble.w	4082f8 <_vfiprintf_r+0x938>
  4080e8:	2a00      	cmp	r2, #0
  4080ea:	f040 81bc 	bne.w	408466 <_vfiprintf_r+0xaa6>
  4080ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4080f0:	2b00      	cmp	r3, #0
  4080f2:	f43f ae1f 	beq.w	407d34 <_vfiprintf_r+0x374>
  4080f6:	ab0e      	add	r3, sp, #56	; 0x38
  4080f8:	2202      	movs	r2, #2
  4080fa:	4608      	mov	r0, r1
  4080fc:	931c      	str	r3, [sp, #112]	; 0x70
  4080fe:	921d      	str	r2, [sp, #116]	; 0x74
  408100:	46ca      	mov	sl, r9
  408102:	4601      	mov	r1, r0
  408104:	f10a 0a08 	add.w	sl, sl, #8
  408108:	3001      	adds	r0, #1
  40810a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40810c:	2b80      	cmp	r3, #128	; 0x80
  40810e:	f43f ae19 	beq.w	407d44 <_vfiprintf_r+0x384>
  408112:	9b05      	ldr	r3, [sp, #20]
  408114:	1ae4      	subs	r4, r4, r3
  408116:	2c00      	cmp	r4, #0
  408118:	dd2e      	ble.n	408178 <_vfiprintf_r+0x7b8>
  40811a:	2c10      	cmp	r4, #16
  40811c:	4db3      	ldr	r5, [pc, #716]	; (4083ec <_vfiprintf_r+0xa2c>)
  40811e:	dd1e      	ble.n	40815e <_vfiprintf_r+0x79e>
  408120:	46d6      	mov	lr, sl
  408122:	2610      	movs	r6, #16
  408124:	9f06      	ldr	r7, [sp, #24]
  408126:	f8dd a010 	ldr.w	sl, [sp, #16]
  40812a:	e006      	b.n	40813a <_vfiprintf_r+0x77a>
  40812c:	1c88      	adds	r0, r1, #2
  40812e:	f10e 0e08 	add.w	lr, lr, #8
  408132:	4619      	mov	r1, r3
  408134:	3c10      	subs	r4, #16
  408136:	2c10      	cmp	r4, #16
  408138:	dd10      	ble.n	40815c <_vfiprintf_r+0x79c>
  40813a:	1c4b      	adds	r3, r1, #1
  40813c:	3210      	adds	r2, #16
  40813e:	2b07      	cmp	r3, #7
  408140:	9211      	str	r2, [sp, #68]	; 0x44
  408142:	e88e 0060 	stmia.w	lr, {r5, r6}
  408146:	9310      	str	r3, [sp, #64]	; 0x40
  408148:	ddf0      	ble.n	40812c <_vfiprintf_r+0x76c>
  40814a:	2a00      	cmp	r2, #0
  40814c:	d165      	bne.n	40821a <_vfiprintf_r+0x85a>
  40814e:	3c10      	subs	r4, #16
  408150:	2c10      	cmp	r4, #16
  408152:	f04f 0001 	mov.w	r0, #1
  408156:	4611      	mov	r1, r2
  408158:	46ce      	mov	lr, r9
  40815a:	dcee      	bgt.n	40813a <_vfiprintf_r+0x77a>
  40815c:	46f2      	mov	sl, lr
  40815e:	4422      	add	r2, r4
  408160:	2807      	cmp	r0, #7
  408162:	9211      	str	r2, [sp, #68]	; 0x44
  408164:	f8ca 5000 	str.w	r5, [sl]
  408168:	f8ca 4004 	str.w	r4, [sl, #4]
  40816c:	9010      	str	r0, [sp, #64]	; 0x40
  40816e:	f300 8085 	bgt.w	40827c <_vfiprintf_r+0x8bc>
  408172:	f10a 0a08 	add.w	sl, sl, #8
  408176:	3001      	adds	r0, #1
  408178:	9905      	ldr	r1, [sp, #20]
  40817a:	f8ca b000 	str.w	fp, [sl]
  40817e:	440a      	add	r2, r1
  408180:	2807      	cmp	r0, #7
  408182:	9211      	str	r2, [sp, #68]	; 0x44
  408184:	f8ca 1004 	str.w	r1, [sl, #4]
  408188:	9010      	str	r0, [sp, #64]	; 0x40
  40818a:	f340 8082 	ble.w	408292 <_vfiprintf_r+0x8d2>
  40818e:	2a00      	cmp	r2, #0
  408190:	f040 8118 	bne.w	4083c4 <_vfiprintf_r+0xa04>
  408194:	9b02      	ldr	r3, [sp, #8]
  408196:	9210      	str	r2, [sp, #64]	; 0x40
  408198:	0758      	lsls	r0, r3, #29
  40819a:	d535      	bpl.n	408208 <_vfiprintf_r+0x848>
  40819c:	9b08      	ldr	r3, [sp, #32]
  40819e:	9901      	ldr	r1, [sp, #4]
  4081a0:	1a5c      	subs	r4, r3, r1
  4081a2:	2c00      	cmp	r4, #0
  4081a4:	f340 80e7 	ble.w	408376 <_vfiprintf_r+0x9b6>
  4081a8:	46ca      	mov	sl, r9
  4081aa:	2c10      	cmp	r4, #16
  4081ac:	f340 8218 	ble.w	4085e0 <_vfiprintf_r+0xc20>
  4081b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4081b2:	4e8f      	ldr	r6, [pc, #572]	; (4083f0 <_vfiprintf_r+0xa30>)
  4081b4:	9f06      	ldr	r7, [sp, #24]
  4081b6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4081ba:	2510      	movs	r5, #16
  4081bc:	e006      	b.n	4081cc <_vfiprintf_r+0x80c>
  4081be:	1c88      	adds	r0, r1, #2
  4081c0:	f10a 0a08 	add.w	sl, sl, #8
  4081c4:	4619      	mov	r1, r3
  4081c6:	3c10      	subs	r4, #16
  4081c8:	2c10      	cmp	r4, #16
  4081ca:	dd11      	ble.n	4081f0 <_vfiprintf_r+0x830>
  4081cc:	1c4b      	adds	r3, r1, #1
  4081ce:	3210      	adds	r2, #16
  4081d0:	2b07      	cmp	r3, #7
  4081d2:	9211      	str	r2, [sp, #68]	; 0x44
  4081d4:	f8ca 6000 	str.w	r6, [sl]
  4081d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4081dc:	9310      	str	r3, [sp, #64]	; 0x40
  4081de:	ddee      	ble.n	4081be <_vfiprintf_r+0x7fe>
  4081e0:	bb42      	cbnz	r2, 408234 <_vfiprintf_r+0x874>
  4081e2:	3c10      	subs	r4, #16
  4081e4:	2c10      	cmp	r4, #16
  4081e6:	f04f 0001 	mov.w	r0, #1
  4081ea:	4611      	mov	r1, r2
  4081ec:	46ca      	mov	sl, r9
  4081ee:	dced      	bgt.n	4081cc <_vfiprintf_r+0x80c>
  4081f0:	4422      	add	r2, r4
  4081f2:	2807      	cmp	r0, #7
  4081f4:	9211      	str	r2, [sp, #68]	; 0x44
  4081f6:	f8ca 6000 	str.w	r6, [sl]
  4081fa:	f8ca 4004 	str.w	r4, [sl, #4]
  4081fe:	9010      	str	r0, [sp, #64]	; 0x40
  408200:	dd51      	ble.n	4082a6 <_vfiprintf_r+0x8e6>
  408202:	2a00      	cmp	r2, #0
  408204:	f040 819b 	bne.w	40853e <_vfiprintf_r+0xb7e>
  408208:	9b03      	ldr	r3, [sp, #12]
  40820a:	9a08      	ldr	r2, [sp, #32]
  40820c:	9901      	ldr	r1, [sp, #4]
  40820e:	428a      	cmp	r2, r1
  408210:	bfac      	ite	ge
  408212:	189b      	addge	r3, r3, r2
  408214:	185b      	addlt	r3, r3, r1
  408216:	9303      	str	r3, [sp, #12]
  408218:	e04e      	b.n	4082b8 <_vfiprintf_r+0x8f8>
  40821a:	aa0f      	add	r2, sp, #60	; 0x3c
  40821c:	4651      	mov	r1, sl
  40821e:	4638      	mov	r0, r7
  408220:	f7ff fb8e 	bl	407940 <__sprint_r.part.0>
  408224:	2800      	cmp	r0, #0
  408226:	f040 813f 	bne.w	4084a8 <_vfiprintf_r+0xae8>
  40822a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40822c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40822e:	1c48      	adds	r0, r1, #1
  408230:	46ce      	mov	lr, r9
  408232:	e77f      	b.n	408134 <_vfiprintf_r+0x774>
  408234:	aa0f      	add	r2, sp, #60	; 0x3c
  408236:	4659      	mov	r1, fp
  408238:	4638      	mov	r0, r7
  40823a:	f7ff fb81 	bl	407940 <__sprint_r.part.0>
  40823e:	b960      	cbnz	r0, 40825a <_vfiprintf_r+0x89a>
  408240:	9910      	ldr	r1, [sp, #64]	; 0x40
  408242:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408244:	1c48      	adds	r0, r1, #1
  408246:	46ca      	mov	sl, r9
  408248:	e7bd      	b.n	4081c6 <_vfiprintf_r+0x806>
  40824a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40824c:	f8dd b010 	ldr.w	fp, [sp, #16]
  408250:	2b00      	cmp	r3, #0
  408252:	f040 81d4 	bne.w	4085fe <_vfiprintf_r+0xc3e>
  408256:	2300      	movs	r3, #0
  408258:	9310      	str	r3, [sp, #64]	; 0x40
  40825a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40825e:	f013 0f01 	tst.w	r3, #1
  408262:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408266:	d102      	bne.n	40826e <_vfiprintf_r+0x8ae>
  408268:	059a      	lsls	r2, r3, #22
  40826a:	f140 80de 	bpl.w	40842a <_vfiprintf_r+0xa6a>
  40826e:	065b      	lsls	r3, r3, #25
  408270:	f53f acb2 	bmi.w	407bd8 <_vfiprintf_r+0x218>
  408274:	9803      	ldr	r0, [sp, #12]
  408276:	b02d      	add	sp, #180	; 0xb4
  408278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40827c:	2a00      	cmp	r2, #0
  40827e:	f040 8106 	bne.w	40848e <_vfiprintf_r+0xace>
  408282:	9a05      	ldr	r2, [sp, #20]
  408284:	921d      	str	r2, [sp, #116]	; 0x74
  408286:	2301      	movs	r3, #1
  408288:	9211      	str	r2, [sp, #68]	; 0x44
  40828a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40828e:	9310      	str	r3, [sp, #64]	; 0x40
  408290:	46ca      	mov	sl, r9
  408292:	f10a 0a08 	add.w	sl, sl, #8
  408296:	9b02      	ldr	r3, [sp, #8]
  408298:	0759      	lsls	r1, r3, #29
  40829a:	d504      	bpl.n	4082a6 <_vfiprintf_r+0x8e6>
  40829c:	9b08      	ldr	r3, [sp, #32]
  40829e:	9901      	ldr	r1, [sp, #4]
  4082a0:	1a5c      	subs	r4, r3, r1
  4082a2:	2c00      	cmp	r4, #0
  4082a4:	dc81      	bgt.n	4081aa <_vfiprintf_r+0x7ea>
  4082a6:	9b03      	ldr	r3, [sp, #12]
  4082a8:	9908      	ldr	r1, [sp, #32]
  4082aa:	9801      	ldr	r0, [sp, #4]
  4082ac:	4281      	cmp	r1, r0
  4082ae:	bfac      	ite	ge
  4082b0:	185b      	addge	r3, r3, r1
  4082b2:	181b      	addlt	r3, r3, r0
  4082b4:	9303      	str	r3, [sp, #12]
  4082b6:	bb72      	cbnz	r2, 408316 <_vfiprintf_r+0x956>
  4082b8:	2300      	movs	r3, #0
  4082ba:	9310      	str	r3, [sp, #64]	; 0x40
  4082bc:	46ca      	mov	sl, r9
  4082be:	f7ff bbbc 	b.w	407a3a <_vfiprintf_r+0x7a>
  4082c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4082c4:	9904      	ldr	r1, [sp, #16]
  4082c6:	4620      	mov	r0, r4
  4082c8:	f7ff fb3a 	bl	407940 <__sprint_r.part.0>
  4082cc:	bb50      	cbnz	r0, 408324 <_vfiprintf_r+0x964>
  4082ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4082d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4082d2:	f101 0e01 	add.w	lr, r1, #1
  4082d6:	46cc      	mov	ip, r9
  4082d8:	e548      	b.n	407d6c <_vfiprintf_r+0x3ac>
  4082da:	2a00      	cmp	r2, #0
  4082dc:	f040 8140 	bne.w	408560 <_vfiprintf_r+0xba0>
  4082e0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4082e4:	2900      	cmp	r1, #0
  4082e6:	f000 811b 	beq.w	408520 <_vfiprintf_r+0xb60>
  4082ea:	2201      	movs	r2, #1
  4082ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4082f0:	4610      	mov	r0, r2
  4082f2:	921d      	str	r2, [sp, #116]	; 0x74
  4082f4:	911c      	str	r1, [sp, #112]	; 0x70
  4082f6:	46ca      	mov	sl, r9
  4082f8:	4601      	mov	r1, r0
  4082fa:	f10a 0a08 	add.w	sl, sl, #8
  4082fe:	3001      	adds	r0, #1
  408300:	e507      	b.n	407d12 <_vfiprintf_r+0x352>
  408302:	9b02      	ldr	r3, [sp, #8]
  408304:	2a01      	cmp	r2, #1
  408306:	f000 8098 	beq.w	40843a <_vfiprintf_r+0xa7a>
  40830a:	2a02      	cmp	r2, #2
  40830c:	d10d      	bne.n	40832a <_vfiprintf_r+0x96a>
  40830e:	9302      	str	r3, [sp, #8]
  408310:	2600      	movs	r6, #0
  408312:	2700      	movs	r7, #0
  408314:	e5b0      	b.n	407e78 <_vfiprintf_r+0x4b8>
  408316:	aa0f      	add	r2, sp, #60	; 0x3c
  408318:	9904      	ldr	r1, [sp, #16]
  40831a:	9806      	ldr	r0, [sp, #24]
  40831c:	f7ff fb10 	bl	407940 <__sprint_r.part.0>
  408320:	2800      	cmp	r0, #0
  408322:	d0c9      	beq.n	4082b8 <_vfiprintf_r+0x8f8>
  408324:	f8dd b010 	ldr.w	fp, [sp, #16]
  408328:	e797      	b.n	40825a <_vfiprintf_r+0x89a>
  40832a:	9302      	str	r3, [sp, #8]
  40832c:	2600      	movs	r6, #0
  40832e:	2700      	movs	r7, #0
  408330:	4649      	mov	r1, r9
  408332:	e000      	b.n	408336 <_vfiprintf_r+0x976>
  408334:	4659      	mov	r1, fp
  408336:	08f2      	lsrs	r2, r6, #3
  408338:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40833c:	08f8      	lsrs	r0, r7, #3
  40833e:	f006 0307 	and.w	r3, r6, #7
  408342:	4607      	mov	r7, r0
  408344:	4616      	mov	r6, r2
  408346:	3330      	adds	r3, #48	; 0x30
  408348:	ea56 0207 	orrs.w	r2, r6, r7
  40834c:	f801 3c01 	strb.w	r3, [r1, #-1]
  408350:	f101 3bff 	add.w	fp, r1, #4294967295
  408354:	d1ee      	bne.n	408334 <_vfiprintf_r+0x974>
  408356:	9a02      	ldr	r2, [sp, #8]
  408358:	07d6      	lsls	r6, r2, #31
  40835a:	f57f ad9d 	bpl.w	407e98 <_vfiprintf_r+0x4d8>
  40835e:	2b30      	cmp	r3, #48	; 0x30
  408360:	f43f ad9a 	beq.w	407e98 <_vfiprintf_r+0x4d8>
  408364:	3902      	subs	r1, #2
  408366:	2330      	movs	r3, #48	; 0x30
  408368:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40836c:	eba9 0301 	sub.w	r3, r9, r1
  408370:	9305      	str	r3, [sp, #20]
  408372:	468b      	mov	fp, r1
  408374:	e476      	b.n	407c64 <_vfiprintf_r+0x2a4>
  408376:	9b03      	ldr	r3, [sp, #12]
  408378:	9a08      	ldr	r2, [sp, #32]
  40837a:	428a      	cmp	r2, r1
  40837c:	bfac      	ite	ge
  40837e:	189b      	addge	r3, r3, r2
  408380:	185b      	addlt	r3, r3, r1
  408382:	9303      	str	r3, [sp, #12]
  408384:	e798      	b.n	4082b8 <_vfiprintf_r+0x8f8>
  408386:	2202      	movs	r2, #2
  408388:	e44d      	b.n	407c26 <_vfiprintf_r+0x266>
  40838a:	2f00      	cmp	r7, #0
  40838c:	bf08      	it	eq
  40838e:	2e0a      	cmpeq	r6, #10
  408390:	d352      	bcc.n	408438 <_vfiprintf_r+0xa78>
  408392:	46cb      	mov	fp, r9
  408394:	4630      	mov	r0, r6
  408396:	4639      	mov	r1, r7
  408398:	220a      	movs	r2, #10
  40839a:	2300      	movs	r3, #0
  40839c:	f001 fe9a 	bl	40a0d4 <__aeabi_uldivmod>
  4083a0:	3230      	adds	r2, #48	; 0x30
  4083a2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4083a6:	4630      	mov	r0, r6
  4083a8:	4639      	mov	r1, r7
  4083aa:	2300      	movs	r3, #0
  4083ac:	220a      	movs	r2, #10
  4083ae:	f001 fe91 	bl	40a0d4 <__aeabi_uldivmod>
  4083b2:	4606      	mov	r6, r0
  4083b4:	460f      	mov	r7, r1
  4083b6:	ea56 0307 	orrs.w	r3, r6, r7
  4083ba:	d1eb      	bne.n	408394 <_vfiprintf_r+0x9d4>
  4083bc:	e56c      	b.n	407e98 <_vfiprintf_r+0x4d8>
  4083be:	9405      	str	r4, [sp, #20]
  4083c0:	46cb      	mov	fp, r9
  4083c2:	e44f      	b.n	407c64 <_vfiprintf_r+0x2a4>
  4083c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4083c6:	9904      	ldr	r1, [sp, #16]
  4083c8:	9806      	ldr	r0, [sp, #24]
  4083ca:	f7ff fab9 	bl	407940 <__sprint_r.part.0>
  4083ce:	2800      	cmp	r0, #0
  4083d0:	d1a8      	bne.n	408324 <_vfiprintf_r+0x964>
  4083d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4083d4:	46ca      	mov	sl, r9
  4083d6:	e75e      	b.n	408296 <_vfiprintf_r+0x8d6>
  4083d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4083da:	9904      	ldr	r1, [sp, #16]
  4083dc:	9806      	ldr	r0, [sp, #24]
  4083de:	f7ff faaf 	bl	407940 <__sprint_r.part.0>
  4083e2:	2800      	cmp	r0, #0
  4083e4:	d19e      	bne.n	408324 <_vfiprintf_r+0x964>
  4083e6:	46ca      	mov	sl, r9
  4083e8:	f7ff bbc0 	b.w	407b6c <_vfiprintf_r+0x1ac>
  4083ec:	0040b228 	.word	0x0040b228
  4083f0:	0040b218 	.word	0x0040b218
  4083f4:	3104      	adds	r1, #4
  4083f6:	6816      	ldr	r6, [r2, #0]
  4083f8:	9107      	str	r1, [sp, #28]
  4083fa:	2201      	movs	r2, #1
  4083fc:	2700      	movs	r7, #0
  4083fe:	e412      	b.n	407c26 <_vfiprintf_r+0x266>
  408400:	9807      	ldr	r0, [sp, #28]
  408402:	4601      	mov	r1, r0
  408404:	3104      	adds	r1, #4
  408406:	6806      	ldr	r6, [r0, #0]
  408408:	9107      	str	r1, [sp, #28]
  40840a:	2700      	movs	r7, #0
  40840c:	e40b      	b.n	407c26 <_vfiprintf_r+0x266>
  40840e:	680e      	ldr	r6, [r1, #0]
  408410:	3104      	adds	r1, #4
  408412:	9107      	str	r1, [sp, #28]
  408414:	2700      	movs	r7, #0
  408416:	e591      	b.n	407f3c <_vfiprintf_r+0x57c>
  408418:	9907      	ldr	r1, [sp, #28]
  40841a:	680e      	ldr	r6, [r1, #0]
  40841c:	460a      	mov	r2, r1
  40841e:	17f7      	asrs	r7, r6, #31
  408420:	3204      	adds	r2, #4
  408422:	9207      	str	r2, [sp, #28]
  408424:	4630      	mov	r0, r6
  408426:	4639      	mov	r1, r7
  408428:	e50f      	b.n	407e4a <_vfiprintf_r+0x48a>
  40842a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40842e:	f000 fe7f 	bl	409130 <__retarget_lock_release_recursive>
  408432:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408436:	e71a      	b.n	40826e <_vfiprintf_r+0x8ae>
  408438:	9b02      	ldr	r3, [sp, #8]
  40843a:	9302      	str	r3, [sp, #8]
  40843c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408440:	3630      	adds	r6, #48	; 0x30
  408442:	2301      	movs	r3, #1
  408444:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  408448:	9305      	str	r3, [sp, #20]
  40844a:	e40b      	b.n	407c64 <_vfiprintf_r+0x2a4>
  40844c:	aa0f      	add	r2, sp, #60	; 0x3c
  40844e:	9904      	ldr	r1, [sp, #16]
  408450:	9806      	ldr	r0, [sp, #24]
  408452:	f7ff fa75 	bl	407940 <__sprint_r.part.0>
  408456:	2800      	cmp	r0, #0
  408458:	f47f af64 	bne.w	408324 <_vfiprintf_r+0x964>
  40845c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40845e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408460:	1c48      	adds	r0, r1, #1
  408462:	46ca      	mov	sl, r9
  408464:	e651      	b.n	40810a <_vfiprintf_r+0x74a>
  408466:	aa0f      	add	r2, sp, #60	; 0x3c
  408468:	9904      	ldr	r1, [sp, #16]
  40846a:	9806      	ldr	r0, [sp, #24]
  40846c:	f7ff fa68 	bl	407940 <__sprint_r.part.0>
  408470:	2800      	cmp	r0, #0
  408472:	f47f af57 	bne.w	408324 <_vfiprintf_r+0x964>
  408476:	9910      	ldr	r1, [sp, #64]	; 0x40
  408478:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40847a:	1c48      	adds	r0, r1, #1
  40847c:	46ca      	mov	sl, r9
  40847e:	e448      	b.n	407d12 <_vfiprintf_r+0x352>
  408480:	2a00      	cmp	r2, #0
  408482:	f040 8091 	bne.w	4085a8 <_vfiprintf_r+0xbe8>
  408486:	2001      	movs	r0, #1
  408488:	4611      	mov	r1, r2
  40848a:	46ca      	mov	sl, r9
  40848c:	e641      	b.n	408112 <_vfiprintf_r+0x752>
  40848e:	aa0f      	add	r2, sp, #60	; 0x3c
  408490:	9904      	ldr	r1, [sp, #16]
  408492:	9806      	ldr	r0, [sp, #24]
  408494:	f7ff fa54 	bl	407940 <__sprint_r.part.0>
  408498:	2800      	cmp	r0, #0
  40849a:	f47f af43 	bne.w	408324 <_vfiprintf_r+0x964>
  40849e:	9810      	ldr	r0, [sp, #64]	; 0x40
  4084a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4084a2:	3001      	adds	r0, #1
  4084a4:	46ca      	mov	sl, r9
  4084a6:	e667      	b.n	408178 <_vfiprintf_r+0x7b8>
  4084a8:	46d3      	mov	fp, sl
  4084aa:	e6d6      	b.n	40825a <_vfiprintf_r+0x89a>
  4084ac:	9e07      	ldr	r6, [sp, #28]
  4084ae:	3607      	adds	r6, #7
  4084b0:	f026 0207 	bic.w	r2, r6, #7
  4084b4:	f102 0108 	add.w	r1, r2, #8
  4084b8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4084bc:	9107      	str	r1, [sp, #28]
  4084be:	2201      	movs	r2, #1
  4084c0:	f7ff bbb1 	b.w	407c26 <_vfiprintf_r+0x266>
  4084c4:	9e07      	ldr	r6, [sp, #28]
  4084c6:	3607      	adds	r6, #7
  4084c8:	f026 0607 	bic.w	r6, r6, #7
  4084cc:	e9d6 0100 	ldrd	r0, r1, [r6]
  4084d0:	f106 0208 	add.w	r2, r6, #8
  4084d4:	9207      	str	r2, [sp, #28]
  4084d6:	4606      	mov	r6, r0
  4084d8:	460f      	mov	r7, r1
  4084da:	e4b6      	b.n	407e4a <_vfiprintf_r+0x48a>
  4084dc:	9e07      	ldr	r6, [sp, #28]
  4084de:	3607      	adds	r6, #7
  4084e0:	f026 0207 	bic.w	r2, r6, #7
  4084e4:	f102 0108 	add.w	r1, r2, #8
  4084e8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4084ec:	9107      	str	r1, [sp, #28]
  4084ee:	2200      	movs	r2, #0
  4084f0:	f7ff bb99 	b.w	407c26 <_vfiprintf_r+0x266>
  4084f4:	9e07      	ldr	r6, [sp, #28]
  4084f6:	3607      	adds	r6, #7
  4084f8:	f026 0107 	bic.w	r1, r6, #7
  4084fc:	f101 0008 	add.w	r0, r1, #8
  408500:	9007      	str	r0, [sp, #28]
  408502:	e9d1 6700 	ldrd	r6, r7, [r1]
  408506:	e519      	b.n	407f3c <_vfiprintf_r+0x57c>
  408508:	46cb      	mov	fp, r9
  40850a:	f7ff bbab 	b.w	407c64 <_vfiprintf_r+0x2a4>
  40850e:	252d      	movs	r5, #45	; 0x2d
  408510:	4276      	negs	r6, r6
  408512:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408516:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40851a:	2201      	movs	r2, #1
  40851c:	f7ff bb88 	b.w	407c30 <_vfiprintf_r+0x270>
  408520:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408522:	b9b3      	cbnz	r3, 408552 <_vfiprintf_r+0xb92>
  408524:	4611      	mov	r1, r2
  408526:	2001      	movs	r0, #1
  408528:	46ca      	mov	sl, r9
  40852a:	e5f2      	b.n	408112 <_vfiprintf_r+0x752>
  40852c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408530:	f000 fdfe 	bl	409130 <__retarget_lock_release_recursive>
  408534:	f04f 33ff 	mov.w	r3, #4294967295
  408538:	9303      	str	r3, [sp, #12]
  40853a:	f7ff bb50 	b.w	407bde <_vfiprintf_r+0x21e>
  40853e:	aa0f      	add	r2, sp, #60	; 0x3c
  408540:	9904      	ldr	r1, [sp, #16]
  408542:	9806      	ldr	r0, [sp, #24]
  408544:	f7ff f9fc 	bl	407940 <__sprint_r.part.0>
  408548:	2800      	cmp	r0, #0
  40854a:	f47f aeeb 	bne.w	408324 <_vfiprintf_r+0x964>
  40854e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408550:	e6a9      	b.n	4082a6 <_vfiprintf_r+0x8e6>
  408552:	ab0e      	add	r3, sp, #56	; 0x38
  408554:	2202      	movs	r2, #2
  408556:	931c      	str	r3, [sp, #112]	; 0x70
  408558:	921d      	str	r2, [sp, #116]	; 0x74
  40855a:	2001      	movs	r0, #1
  40855c:	46ca      	mov	sl, r9
  40855e:	e5d0      	b.n	408102 <_vfiprintf_r+0x742>
  408560:	aa0f      	add	r2, sp, #60	; 0x3c
  408562:	9904      	ldr	r1, [sp, #16]
  408564:	9806      	ldr	r0, [sp, #24]
  408566:	f7ff f9eb 	bl	407940 <__sprint_r.part.0>
  40856a:	2800      	cmp	r0, #0
  40856c:	f47f aeda 	bne.w	408324 <_vfiprintf_r+0x964>
  408570:	9910      	ldr	r1, [sp, #64]	; 0x40
  408572:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408574:	1c48      	adds	r0, r1, #1
  408576:	46ca      	mov	sl, r9
  408578:	e5a4      	b.n	4080c4 <_vfiprintf_r+0x704>
  40857a:	9a07      	ldr	r2, [sp, #28]
  40857c:	9903      	ldr	r1, [sp, #12]
  40857e:	6813      	ldr	r3, [r2, #0]
  408580:	17cd      	asrs	r5, r1, #31
  408582:	4608      	mov	r0, r1
  408584:	3204      	adds	r2, #4
  408586:	4629      	mov	r1, r5
  408588:	9207      	str	r2, [sp, #28]
  40858a:	e9c3 0100 	strd	r0, r1, [r3]
  40858e:	f7ff ba54 	b.w	407a3a <_vfiprintf_r+0x7a>
  408592:	4658      	mov	r0, fp
  408594:	9607      	str	r6, [sp, #28]
  408596:	9302      	str	r3, [sp, #8]
  408598:	f7ff f912 	bl	4077c0 <strlen>
  40859c:	2400      	movs	r4, #0
  40859e:	9005      	str	r0, [sp, #20]
  4085a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4085a4:	f7ff bb5e 	b.w	407c64 <_vfiprintf_r+0x2a4>
  4085a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4085aa:	9904      	ldr	r1, [sp, #16]
  4085ac:	9806      	ldr	r0, [sp, #24]
  4085ae:	f7ff f9c7 	bl	407940 <__sprint_r.part.0>
  4085b2:	2800      	cmp	r0, #0
  4085b4:	f47f aeb6 	bne.w	408324 <_vfiprintf_r+0x964>
  4085b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085bc:	1c48      	adds	r0, r1, #1
  4085be:	46ca      	mov	sl, r9
  4085c0:	e5a7      	b.n	408112 <_vfiprintf_r+0x752>
  4085c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085c6:	4e20      	ldr	r6, [pc, #128]	; (408648 <_vfiprintf_r+0xc88>)
  4085c8:	3101      	adds	r1, #1
  4085ca:	f7ff bb90 	b.w	407cee <_vfiprintf_r+0x32e>
  4085ce:	2c06      	cmp	r4, #6
  4085d0:	bf28      	it	cs
  4085d2:	2406      	movcs	r4, #6
  4085d4:	9405      	str	r4, [sp, #20]
  4085d6:	9607      	str	r6, [sp, #28]
  4085d8:	9401      	str	r4, [sp, #4]
  4085da:	f8df b070 	ldr.w	fp, [pc, #112]	; 40864c <_vfiprintf_r+0xc8c>
  4085de:	e4d5      	b.n	407f8c <_vfiprintf_r+0x5cc>
  4085e0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4085e2:	4e19      	ldr	r6, [pc, #100]	; (408648 <_vfiprintf_r+0xc88>)
  4085e4:	3001      	adds	r0, #1
  4085e6:	e603      	b.n	4081f0 <_vfiprintf_r+0x830>
  4085e8:	9405      	str	r4, [sp, #20]
  4085ea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4085ee:	9607      	str	r6, [sp, #28]
  4085f0:	9302      	str	r3, [sp, #8]
  4085f2:	4604      	mov	r4, r0
  4085f4:	f7ff bb36 	b.w	407c64 <_vfiprintf_r+0x2a4>
  4085f8:	4686      	mov	lr, r0
  4085fa:	f7ff bbce 	b.w	407d9a <_vfiprintf_r+0x3da>
  4085fe:	9806      	ldr	r0, [sp, #24]
  408600:	aa0f      	add	r2, sp, #60	; 0x3c
  408602:	4659      	mov	r1, fp
  408604:	f7ff f99c 	bl	407940 <__sprint_r.part.0>
  408608:	2800      	cmp	r0, #0
  40860a:	f43f ae24 	beq.w	408256 <_vfiprintf_r+0x896>
  40860e:	e624      	b.n	40825a <_vfiprintf_r+0x89a>
  408610:	9907      	ldr	r1, [sp, #28]
  408612:	f898 2001 	ldrb.w	r2, [r8, #1]
  408616:	680c      	ldr	r4, [r1, #0]
  408618:	3104      	adds	r1, #4
  40861a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40861e:	46b8      	mov	r8, r7
  408620:	9107      	str	r1, [sp, #28]
  408622:	f7ff ba3f 	b.w	407aa4 <_vfiprintf_r+0xe4>
  408626:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40862a:	e43c      	b.n	407ea6 <_vfiprintf_r+0x4e6>
  40862c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408630:	e521      	b.n	408076 <_vfiprintf_r+0x6b6>
  408632:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408636:	f7ff bbf4 	b.w	407e22 <_vfiprintf_r+0x462>
  40863a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40863e:	e491      	b.n	407f64 <_vfiprintf_r+0x5a4>
  408640:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408644:	e469      	b.n	407f1a <_vfiprintf_r+0x55a>
  408646:	bf00      	nop
  408648:	0040b218 	.word	0x0040b218
  40864c:	0040b210 	.word	0x0040b210

00408650 <__sbprintf>:
  408650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408654:	460c      	mov	r4, r1
  408656:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40865a:	8989      	ldrh	r1, [r1, #12]
  40865c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40865e:	89e5      	ldrh	r5, [r4, #14]
  408660:	9619      	str	r6, [sp, #100]	; 0x64
  408662:	f021 0102 	bic.w	r1, r1, #2
  408666:	4606      	mov	r6, r0
  408668:	69e0      	ldr	r0, [r4, #28]
  40866a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40866e:	4617      	mov	r7, r2
  408670:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408674:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408676:	f8ad 500e 	strh.w	r5, [sp, #14]
  40867a:	4698      	mov	r8, r3
  40867c:	ad1a      	add	r5, sp, #104	; 0x68
  40867e:	2300      	movs	r3, #0
  408680:	9007      	str	r0, [sp, #28]
  408682:	a816      	add	r0, sp, #88	; 0x58
  408684:	9209      	str	r2, [sp, #36]	; 0x24
  408686:	9306      	str	r3, [sp, #24]
  408688:	9500      	str	r5, [sp, #0]
  40868a:	9504      	str	r5, [sp, #16]
  40868c:	9102      	str	r1, [sp, #8]
  40868e:	9105      	str	r1, [sp, #20]
  408690:	f000 fd48 	bl	409124 <__retarget_lock_init_recursive>
  408694:	4643      	mov	r3, r8
  408696:	463a      	mov	r2, r7
  408698:	4669      	mov	r1, sp
  40869a:	4630      	mov	r0, r6
  40869c:	f7ff f990 	bl	4079c0 <_vfiprintf_r>
  4086a0:	1e05      	subs	r5, r0, #0
  4086a2:	db07      	blt.n	4086b4 <__sbprintf+0x64>
  4086a4:	4630      	mov	r0, r6
  4086a6:	4669      	mov	r1, sp
  4086a8:	f000 f928 	bl	4088fc <_fflush_r>
  4086ac:	2800      	cmp	r0, #0
  4086ae:	bf18      	it	ne
  4086b0:	f04f 35ff 	movne.w	r5, #4294967295
  4086b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4086b8:	065b      	lsls	r3, r3, #25
  4086ba:	d503      	bpl.n	4086c4 <__sbprintf+0x74>
  4086bc:	89a3      	ldrh	r3, [r4, #12]
  4086be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4086c2:	81a3      	strh	r3, [r4, #12]
  4086c4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4086c6:	f000 fd2f 	bl	409128 <__retarget_lock_close_recursive>
  4086ca:	4628      	mov	r0, r5
  4086cc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004086d4 <__swsetup_r>:
  4086d4:	b538      	push	{r3, r4, r5, lr}
  4086d6:	4b30      	ldr	r3, [pc, #192]	; (408798 <__swsetup_r+0xc4>)
  4086d8:	681b      	ldr	r3, [r3, #0]
  4086da:	4605      	mov	r5, r0
  4086dc:	460c      	mov	r4, r1
  4086de:	b113      	cbz	r3, 4086e6 <__swsetup_r+0x12>
  4086e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4086e2:	2a00      	cmp	r2, #0
  4086e4:	d038      	beq.n	408758 <__swsetup_r+0x84>
  4086e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4086ea:	b293      	uxth	r3, r2
  4086ec:	0718      	lsls	r0, r3, #28
  4086ee:	d50c      	bpl.n	40870a <__swsetup_r+0x36>
  4086f0:	6920      	ldr	r0, [r4, #16]
  4086f2:	b1a8      	cbz	r0, 408720 <__swsetup_r+0x4c>
  4086f4:	f013 0201 	ands.w	r2, r3, #1
  4086f8:	d01e      	beq.n	408738 <__swsetup_r+0x64>
  4086fa:	6963      	ldr	r3, [r4, #20]
  4086fc:	2200      	movs	r2, #0
  4086fe:	425b      	negs	r3, r3
  408700:	61a3      	str	r3, [r4, #24]
  408702:	60a2      	str	r2, [r4, #8]
  408704:	b1f0      	cbz	r0, 408744 <__swsetup_r+0x70>
  408706:	2000      	movs	r0, #0
  408708:	bd38      	pop	{r3, r4, r5, pc}
  40870a:	06d9      	lsls	r1, r3, #27
  40870c:	d53c      	bpl.n	408788 <__swsetup_r+0xb4>
  40870e:	0758      	lsls	r0, r3, #29
  408710:	d426      	bmi.n	408760 <__swsetup_r+0x8c>
  408712:	6920      	ldr	r0, [r4, #16]
  408714:	f042 0308 	orr.w	r3, r2, #8
  408718:	81a3      	strh	r3, [r4, #12]
  40871a:	b29b      	uxth	r3, r3
  40871c:	2800      	cmp	r0, #0
  40871e:	d1e9      	bne.n	4086f4 <__swsetup_r+0x20>
  408720:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408724:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408728:	d0e4      	beq.n	4086f4 <__swsetup_r+0x20>
  40872a:	4628      	mov	r0, r5
  40872c:	4621      	mov	r1, r4
  40872e:	f000 fd2f 	bl	409190 <__smakebuf_r>
  408732:	89a3      	ldrh	r3, [r4, #12]
  408734:	6920      	ldr	r0, [r4, #16]
  408736:	e7dd      	b.n	4086f4 <__swsetup_r+0x20>
  408738:	0799      	lsls	r1, r3, #30
  40873a:	bf58      	it	pl
  40873c:	6962      	ldrpl	r2, [r4, #20]
  40873e:	60a2      	str	r2, [r4, #8]
  408740:	2800      	cmp	r0, #0
  408742:	d1e0      	bne.n	408706 <__swsetup_r+0x32>
  408744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408748:	061a      	lsls	r2, r3, #24
  40874a:	d5dd      	bpl.n	408708 <__swsetup_r+0x34>
  40874c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408750:	81a3      	strh	r3, [r4, #12]
  408752:	f04f 30ff 	mov.w	r0, #4294967295
  408756:	bd38      	pop	{r3, r4, r5, pc}
  408758:	4618      	mov	r0, r3
  40875a:	f000 f927 	bl	4089ac <__sinit>
  40875e:	e7c2      	b.n	4086e6 <__swsetup_r+0x12>
  408760:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408762:	b151      	cbz	r1, 40877a <__swsetup_r+0xa6>
  408764:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408768:	4299      	cmp	r1, r3
  40876a:	d004      	beq.n	408776 <__swsetup_r+0xa2>
  40876c:	4628      	mov	r0, r5
  40876e:	f000 fa43 	bl	408bf8 <_free_r>
  408772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408776:	2300      	movs	r3, #0
  408778:	6323      	str	r3, [r4, #48]	; 0x30
  40877a:	2300      	movs	r3, #0
  40877c:	6920      	ldr	r0, [r4, #16]
  40877e:	6063      	str	r3, [r4, #4]
  408780:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408784:	6020      	str	r0, [r4, #0]
  408786:	e7c5      	b.n	408714 <__swsetup_r+0x40>
  408788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40878c:	2309      	movs	r3, #9
  40878e:	602b      	str	r3, [r5, #0]
  408790:	f04f 30ff 	mov.w	r0, #4294967295
  408794:	81a2      	strh	r2, [r4, #12]
  408796:	bd38      	pop	{r3, r4, r5, pc}
  408798:	20400034 	.word	0x20400034

0040879c <register_fini>:
  40879c:	4b02      	ldr	r3, [pc, #8]	; (4087a8 <register_fini+0xc>)
  40879e:	b113      	cbz	r3, 4087a6 <register_fini+0xa>
  4087a0:	4802      	ldr	r0, [pc, #8]	; (4087ac <register_fini+0x10>)
  4087a2:	f000 b805 	b.w	4087b0 <atexit>
  4087a6:	4770      	bx	lr
  4087a8:	00000000 	.word	0x00000000
  4087ac:	00408a1d 	.word	0x00408a1d

004087b0 <atexit>:
  4087b0:	2300      	movs	r3, #0
  4087b2:	4601      	mov	r1, r0
  4087b4:	461a      	mov	r2, r3
  4087b6:	4618      	mov	r0, r3
  4087b8:	f001 bb64 	b.w	409e84 <__register_exitproc>

004087bc <__sflush_r>:
  4087bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4087c0:	b29a      	uxth	r2, r3
  4087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4087c6:	460d      	mov	r5, r1
  4087c8:	0711      	lsls	r1, r2, #28
  4087ca:	4680      	mov	r8, r0
  4087cc:	d43a      	bmi.n	408844 <__sflush_r+0x88>
  4087ce:	686a      	ldr	r2, [r5, #4]
  4087d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4087d4:	2a00      	cmp	r2, #0
  4087d6:	81ab      	strh	r3, [r5, #12]
  4087d8:	dd6f      	ble.n	4088ba <__sflush_r+0xfe>
  4087da:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4087dc:	2c00      	cmp	r4, #0
  4087de:	d049      	beq.n	408874 <__sflush_r+0xb8>
  4087e0:	2200      	movs	r2, #0
  4087e2:	b29b      	uxth	r3, r3
  4087e4:	f8d8 6000 	ldr.w	r6, [r8]
  4087e8:	f8c8 2000 	str.w	r2, [r8]
  4087ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4087f0:	d067      	beq.n	4088c2 <__sflush_r+0x106>
  4087f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4087f4:	075f      	lsls	r7, r3, #29
  4087f6:	d505      	bpl.n	408804 <__sflush_r+0x48>
  4087f8:	6869      	ldr	r1, [r5, #4]
  4087fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4087fc:	1a52      	subs	r2, r2, r1
  4087fe:	b10b      	cbz	r3, 408804 <__sflush_r+0x48>
  408800:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408802:	1ad2      	subs	r2, r2, r3
  408804:	2300      	movs	r3, #0
  408806:	69e9      	ldr	r1, [r5, #28]
  408808:	4640      	mov	r0, r8
  40880a:	47a0      	blx	r4
  40880c:	1c44      	adds	r4, r0, #1
  40880e:	d03c      	beq.n	40888a <__sflush_r+0xce>
  408810:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408814:	692a      	ldr	r2, [r5, #16]
  408816:	602a      	str	r2, [r5, #0]
  408818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40881c:	2200      	movs	r2, #0
  40881e:	81ab      	strh	r3, [r5, #12]
  408820:	04db      	lsls	r3, r3, #19
  408822:	606a      	str	r2, [r5, #4]
  408824:	d447      	bmi.n	4088b6 <__sflush_r+0xfa>
  408826:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408828:	f8c8 6000 	str.w	r6, [r8]
  40882c:	b311      	cbz	r1, 408874 <__sflush_r+0xb8>
  40882e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408832:	4299      	cmp	r1, r3
  408834:	d002      	beq.n	40883c <__sflush_r+0x80>
  408836:	4640      	mov	r0, r8
  408838:	f000 f9de 	bl	408bf8 <_free_r>
  40883c:	2000      	movs	r0, #0
  40883e:	6328      	str	r0, [r5, #48]	; 0x30
  408840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408844:	692e      	ldr	r6, [r5, #16]
  408846:	b1ae      	cbz	r6, 408874 <__sflush_r+0xb8>
  408848:	682c      	ldr	r4, [r5, #0]
  40884a:	602e      	str	r6, [r5, #0]
  40884c:	0791      	lsls	r1, r2, #30
  40884e:	bf0c      	ite	eq
  408850:	696b      	ldreq	r3, [r5, #20]
  408852:	2300      	movne	r3, #0
  408854:	1ba4      	subs	r4, r4, r6
  408856:	60ab      	str	r3, [r5, #8]
  408858:	e00a      	b.n	408870 <__sflush_r+0xb4>
  40885a:	4623      	mov	r3, r4
  40885c:	4632      	mov	r2, r6
  40885e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408860:	69e9      	ldr	r1, [r5, #28]
  408862:	4640      	mov	r0, r8
  408864:	47b8      	blx	r7
  408866:	2800      	cmp	r0, #0
  408868:	eba4 0400 	sub.w	r4, r4, r0
  40886c:	4406      	add	r6, r0
  40886e:	dd04      	ble.n	40887a <__sflush_r+0xbe>
  408870:	2c00      	cmp	r4, #0
  408872:	dcf2      	bgt.n	40885a <__sflush_r+0x9e>
  408874:	2000      	movs	r0, #0
  408876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40887a:	89ab      	ldrh	r3, [r5, #12]
  40887c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408880:	81ab      	strh	r3, [r5, #12]
  408882:	f04f 30ff 	mov.w	r0, #4294967295
  408886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40888a:	f8d8 4000 	ldr.w	r4, [r8]
  40888e:	2c1d      	cmp	r4, #29
  408890:	d8f3      	bhi.n	40887a <__sflush_r+0xbe>
  408892:	4b19      	ldr	r3, [pc, #100]	; (4088f8 <__sflush_r+0x13c>)
  408894:	40e3      	lsrs	r3, r4
  408896:	43db      	mvns	r3, r3
  408898:	f013 0301 	ands.w	r3, r3, #1
  40889c:	d1ed      	bne.n	40887a <__sflush_r+0xbe>
  40889e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4088a2:	606b      	str	r3, [r5, #4]
  4088a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4088a8:	6929      	ldr	r1, [r5, #16]
  4088aa:	81ab      	strh	r3, [r5, #12]
  4088ac:	04da      	lsls	r2, r3, #19
  4088ae:	6029      	str	r1, [r5, #0]
  4088b0:	d5b9      	bpl.n	408826 <__sflush_r+0x6a>
  4088b2:	2c00      	cmp	r4, #0
  4088b4:	d1b7      	bne.n	408826 <__sflush_r+0x6a>
  4088b6:	6528      	str	r0, [r5, #80]	; 0x50
  4088b8:	e7b5      	b.n	408826 <__sflush_r+0x6a>
  4088ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4088bc:	2a00      	cmp	r2, #0
  4088be:	dc8c      	bgt.n	4087da <__sflush_r+0x1e>
  4088c0:	e7d8      	b.n	408874 <__sflush_r+0xb8>
  4088c2:	2301      	movs	r3, #1
  4088c4:	69e9      	ldr	r1, [r5, #28]
  4088c6:	4640      	mov	r0, r8
  4088c8:	47a0      	blx	r4
  4088ca:	1c43      	adds	r3, r0, #1
  4088cc:	4602      	mov	r2, r0
  4088ce:	d002      	beq.n	4088d6 <__sflush_r+0x11a>
  4088d0:	89ab      	ldrh	r3, [r5, #12]
  4088d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4088d4:	e78e      	b.n	4087f4 <__sflush_r+0x38>
  4088d6:	f8d8 3000 	ldr.w	r3, [r8]
  4088da:	2b00      	cmp	r3, #0
  4088dc:	d0f8      	beq.n	4088d0 <__sflush_r+0x114>
  4088de:	2b1d      	cmp	r3, #29
  4088e0:	d001      	beq.n	4088e6 <__sflush_r+0x12a>
  4088e2:	2b16      	cmp	r3, #22
  4088e4:	d102      	bne.n	4088ec <__sflush_r+0x130>
  4088e6:	f8c8 6000 	str.w	r6, [r8]
  4088ea:	e7c3      	b.n	408874 <__sflush_r+0xb8>
  4088ec:	89ab      	ldrh	r3, [r5, #12]
  4088ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4088f2:	81ab      	strh	r3, [r5, #12]
  4088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4088f8:	20400001 	.word	0x20400001

004088fc <_fflush_r>:
  4088fc:	b538      	push	{r3, r4, r5, lr}
  4088fe:	460d      	mov	r5, r1
  408900:	4604      	mov	r4, r0
  408902:	b108      	cbz	r0, 408908 <_fflush_r+0xc>
  408904:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408906:	b1bb      	cbz	r3, 408938 <_fflush_r+0x3c>
  408908:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40890c:	b188      	cbz	r0, 408932 <_fflush_r+0x36>
  40890e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408910:	07db      	lsls	r3, r3, #31
  408912:	d401      	bmi.n	408918 <_fflush_r+0x1c>
  408914:	0581      	lsls	r1, r0, #22
  408916:	d517      	bpl.n	408948 <_fflush_r+0x4c>
  408918:	4620      	mov	r0, r4
  40891a:	4629      	mov	r1, r5
  40891c:	f7ff ff4e 	bl	4087bc <__sflush_r>
  408920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408922:	07da      	lsls	r2, r3, #31
  408924:	4604      	mov	r4, r0
  408926:	d402      	bmi.n	40892e <_fflush_r+0x32>
  408928:	89ab      	ldrh	r3, [r5, #12]
  40892a:	059b      	lsls	r3, r3, #22
  40892c:	d507      	bpl.n	40893e <_fflush_r+0x42>
  40892e:	4620      	mov	r0, r4
  408930:	bd38      	pop	{r3, r4, r5, pc}
  408932:	4604      	mov	r4, r0
  408934:	4620      	mov	r0, r4
  408936:	bd38      	pop	{r3, r4, r5, pc}
  408938:	f000 f838 	bl	4089ac <__sinit>
  40893c:	e7e4      	b.n	408908 <_fflush_r+0xc>
  40893e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408940:	f000 fbf6 	bl	409130 <__retarget_lock_release_recursive>
  408944:	4620      	mov	r0, r4
  408946:	bd38      	pop	{r3, r4, r5, pc}
  408948:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40894a:	f000 fbef 	bl	40912c <__retarget_lock_acquire_recursive>
  40894e:	e7e3      	b.n	408918 <_fflush_r+0x1c>

00408950 <_cleanup_r>:
  408950:	4901      	ldr	r1, [pc, #4]	; (408958 <_cleanup_r+0x8>)
  408952:	f000 bbaf 	b.w	4090b4 <_fwalk_reent>
  408956:	bf00      	nop
  408958:	00409f6d 	.word	0x00409f6d

0040895c <std.isra.0>:
  40895c:	b510      	push	{r4, lr}
  40895e:	2300      	movs	r3, #0
  408960:	4604      	mov	r4, r0
  408962:	8181      	strh	r1, [r0, #12]
  408964:	81c2      	strh	r2, [r0, #14]
  408966:	6003      	str	r3, [r0, #0]
  408968:	6043      	str	r3, [r0, #4]
  40896a:	6083      	str	r3, [r0, #8]
  40896c:	6643      	str	r3, [r0, #100]	; 0x64
  40896e:	6103      	str	r3, [r0, #16]
  408970:	6143      	str	r3, [r0, #20]
  408972:	6183      	str	r3, [r0, #24]
  408974:	4619      	mov	r1, r3
  408976:	2208      	movs	r2, #8
  408978:	305c      	adds	r0, #92	; 0x5c
  40897a:	f7fe fbbb 	bl	4070f4 <memset>
  40897e:	4807      	ldr	r0, [pc, #28]	; (40899c <std.isra.0+0x40>)
  408980:	4907      	ldr	r1, [pc, #28]	; (4089a0 <std.isra.0+0x44>)
  408982:	4a08      	ldr	r2, [pc, #32]	; (4089a4 <std.isra.0+0x48>)
  408984:	4b08      	ldr	r3, [pc, #32]	; (4089a8 <std.isra.0+0x4c>)
  408986:	6220      	str	r0, [r4, #32]
  408988:	61e4      	str	r4, [r4, #28]
  40898a:	6261      	str	r1, [r4, #36]	; 0x24
  40898c:	62a2      	str	r2, [r4, #40]	; 0x28
  40898e:	62e3      	str	r3, [r4, #44]	; 0x2c
  408990:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408998:	f000 bbc4 	b.w	409124 <__retarget_lock_init_recursive>
  40899c:	00409cb1 	.word	0x00409cb1
  4089a0:	00409cd5 	.word	0x00409cd5
  4089a4:	00409d11 	.word	0x00409d11
  4089a8:	00409d31 	.word	0x00409d31

004089ac <__sinit>:
  4089ac:	b510      	push	{r4, lr}
  4089ae:	4604      	mov	r4, r0
  4089b0:	4812      	ldr	r0, [pc, #72]	; (4089fc <__sinit+0x50>)
  4089b2:	f000 fbbb 	bl	40912c <__retarget_lock_acquire_recursive>
  4089b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4089b8:	b9d2      	cbnz	r2, 4089f0 <__sinit+0x44>
  4089ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4089be:	4810      	ldr	r0, [pc, #64]	; (408a00 <__sinit+0x54>)
  4089c0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4089c4:	2103      	movs	r1, #3
  4089c6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4089ca:	63e0      	str	r0, [r4, #60]	; 0x3c
  4089cc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4089d0:	6860      	ldr	r0, [r4, #4]
  4089d2:	2104      	movs	r1, #4
  4089d4:	f7ff ffc2 	bl	40895c <std.isra.0>
  4089d8:	2201      	movs	r2, #1
  4089da:	2109      	movs	r1, #9
  4089dc:	68a0      	ldr	r0, [r4, #8]
  4089de:	f7ff ffbd 	bl	40895c <std.isra.0>
  4089e2:	2202      	movs	r2, #2
  4089e4:	2112      	movs	r1, #18
  4089e6:	68e0      	ldr	r0, [r4, #12]
  4089e8:	f7ff ffb8 	bl	40895c <std.isra.0>
  4089ec:	2301      	movs	r3, #1
  4089ee:	63a3      	str	r3, [r4, #56]	; 0x38
  4089f0:	4802      	ldr	r0, [pc, #8]	; (4089fc <__sinit+0x50>)
  4089f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4089f6:	f000 bb9b 	b.w	409130 <__retarget_lock_release_recursive>
  4089fa:	bf00      	nop
  4089fc:	204049dc 	.word	0x204049dc
  408a00:	00408951 	.word	0x00408951

00408a04 <__sfp_lock_acquire>:
  408a04:	4801      	ldr	r0, [pc, #4]	; (408a0c <__sfp_lock_acquire+0x8>)
  408a06:	f000 bb91 	b.w	40912c <__retarget_lock_acquire_recursive>
  408a0a:	bf00      	nop
  408a0c:	204049f0 	.word	0x204049f0

00408a10 <__sfp_lock_release>:
  408a10:	4801      	ldr	r0, [pc, #4]	; (408a18 <__sfp_lock_release+0x8>)
  408a12:	f000 bb8d 	b.w	409130 <__retarget_lock_release_recursive>
  408a16:	bf00      	nop
  408a18:	204049f0 	.word	0x204049f0

00408a1c <__libc_fini_array>:
  408a1c:	b538      	push	{r3, r4, r5, lr}
  408a1e:	4c0a      	ldr	r4, [pc, #40]	; (408a48 <__libc_fini_array+0x2c>)
  408a20:	4d0a      	ldr	r5, [pc, #40]	; (408a4c <__libc_fini_array+0x30>)
  408a22:	1b64      	subs	r4, r4, r5
  408a24:	10a4      	asrs	r4, r4, #2
  408a26:	d00a      	beq.n	408a3e <__libc_fini_array+0x22>
  408a28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408a2c:	3b01      	subs	r3, #1
  408a2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408a32:	3c01      	subs	r4, #1
  408a34:	f855 3904 	ldr.w	r3, [r5], #-4
  408a38:	4798      	blx	r3
  408a3a:	2c00      	cmp	r4, #0
  408a3c:	d1f9      	bne.n	408a32 <__libc_fini_array+0x16>
  408a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408a42:	f002 bc8d 	b.w	40b360 <_fini>
  408a46:	bf00      	nop
  408a48:	0040b370 	.word	0x0040b370
  408a4c:	0040b36c 	.word	0x0040b36c

00408a50 <__fputwc>:
  408a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a54:	b082      	sub	sp, #8
  408a56:	4680      	mov	r8, r0
  408a58:	4689      	mov	r9, r1
  408a5a:	4614      	mov	r4, r2
  408a5c:	f000 fb54 	bl	409108 <__locale_mb_cur_max>
  408a60:	2801      	cmp	r0, #1
  408a62:	d036      	beq.n	408ad2 <__fputwc+0x82>
  408a64:	464a      	mov	r2, r9
  408a66:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408a6a:	a901      	add	r1, sp, #4
  408a6c:	4640      	mov	r0, r8
  408a6e:	f001 f9bb 	bl	409de8 <_wcrtomb_r>
  408a72:	1c42      	adds	r2, r0, #1
  408a74:	4606      	mov	r6, r0
  408a76:	d025      	beq.n	408ac4 <__fputwc+0x74>
  408a78:	b3a8      	cbz	r0, 408ae6 <__fputwc+0x96>
  408a7a:	f89d e004 	ldrb.w	lr, [sp, #4]
  408a7e:	2500      	movs	r5, #0
  408a80:	f10d 0a04 	add.w	sl, sp, #4
  408a84:	e009      	b.n	408a9a <__fputwc+0x4a>
  408a86:	6823      	ldr	r3, [r4, #0]
  408a88:	1c5a      	adds	r2, r3, #1
  408a8a:	6022      	str	r2, [r4, #0]
  408a8c:	f883 e000 	strb.w	lr, [r3]
  408a90:	3501      	adds	r5, #1
  408a92:	42b5      	cmp	r5, r6
  408a94:	d227      	bcs.n	408ae6 <__fputwc+0x96>
  408a96:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408a9a:	68a3      	ldr	r3, [r4, #8]
  408a9c:	3b01      	subs	r3, #1
  408a9e:	2b00      	cmp	r3, #0
  408aa0:	60a3      	str	r3, [r4, #8]
  408aa2:	daf0      	bge.n	408a86 <__fputwc+0x36>
  408aa4:	69a7      	ldr	r7, [r4, #24]
  408aa6:	42bb      	cmp	r3, r7
  408aa8:	4671      	mov	r1, lr
  408aaa:	4622      	mov	r2, r4
  408aac:	4640      	mov	r0, r8
  408aae:	db02      	blt.n	408ab6 <__fputwc+0x66>
  408ab0:	f1be 0f0a 	cmp.w	lr, #10
  408ab4:	d1e7      	bne.n	408a86 <__fputwc+0x36>
  408ab6:	f001 f93f 	bl	409d38 <__swbuf_r>
  408aba:	1c43      	adds	r3, r0, #1
  408abc:	d1e8      	bne.n	408a90 <__fputwc+0x40>
  408abe:	b002      	add	sp, #8
  408ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ac4:	89a3      	ldrh	r3, [r4, #12]
  408ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408aca:	81a3      	strh	r3, [r4, #12]
  408acc:	b002      	add	sp, #8
  408ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ad2:	f109 33ff 	add.w	r3, r9, #4294967295
  408ad6:	2bfe      	cmp	r3, #254	; 0xfe
  408ad8:	d8c4      	bhi.n	408a64 <__fputwc+0x14>
  408ada:	fa5f fe89 	uxtb.w	lr, r9
  408ade:	4606      	mov	r6, r0
  408ae0:	f88d e004 	strb.w	lr, [sp, #4]
  408ae4:	e7cb      	b.n	408a7e <__fputwc+0x2e>
  408ae6:	4648      	mov	r0, r9
  408ae8:	b002      	add	sp, #8
  408aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408aee:	bf00      	nop

00408af0 <_fputwc_r>:
  408af0:	b530      	push	{r4, r5, lr}
  408af2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408af4:	f013 0f01 	tst.w	r3, #1
  408af8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408afc:	4614      	mov	r4, r2
  408afe:	b083      	sub	sp, #12
  408b00:	4605      	mov	r5, r0
  408b02:	b29a      	uxth	r2, r3
  408b04:	d101      	bne.n	408b0a <_fputwc_r+0x1a>
  408b06:	0590      	lsls	r0, r2, #22
  408b08:	d51c      	bpl.n	408b44 <_fputwc_r+0x54>
  408b0a:	0490      	lsls	r0, r2, #18
  408b0c:	d406      	bmi.n	408b1c <_fputwc_r+0x2c>
  408b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408b18:	81a3      	strh	r3, [r4, #12]
  408b1a:	6662      	str	r2, [r4, #100]	; 0x64
  408b1c:	4628      	mov	r0, r5
  408b1e:	4622      	mov	r2, r4
  408b20:	f7ff ff96 	bl	408a50 <__fputwc>
  408b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408b26:	07da      	lsls	r2, r3, #31
  408b28:	4605      	mov	r5, r0
  408b2a:	d402      	bmi.n	408b32 <_fputwc_r+0x42>
  408b2c:	89a3      	ldrh	r3, [r4, #12]
  408b2e:	059b      	lsls	r3, r3, #22
  408b30:	d502      	bpl.n	408b38 <_fputwc_r+0x48>
  408b32:	4628      	mov	r0, r5
  408b34:	b003      	add	sp, #12
  408b36:	bd30      	pop	{r4, r5, pc}
  408b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b3a:	f000 faf9 	bl	409130 <__retarget_lock_release_recursive>
  408b3e:	4628      	mov	r0, r5
  408b40:	b003      	add	sp, #12
  408b42:	bd30      	pop	{r4, r5, pc}
  408b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b46:	9101      	str	r1, [sp, #4]
  408b48:	f000 faf0 	bl	40912c <__retarget_lock_acquire_recursive>
  408b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b50:	9901      	ldr	r1, [sp, #4]
  408b52:	b29a      	uxth	r2, r3
  408b54:	e7d9      	b.n	408b0a <_fputwc_r+0x1a>
  408b56:	bf00      	nop

00408b58 <_malloc_trim_r>:
  408b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b5a:	4f24      	ldr	r7, [pc, #144]	; (408bec <_malloc_trim_r+0x94>)
  408b5c:	460c      	mov	r4, r1
  408b5e:	4606      	mov	r6, r0
  408b60:	f000 fee2 	bl	409928 <__malloc_lock>
  408b64:	68bb      	ldr	r3, [r7, #8]
  408b66:	685d      	ldr	r5, [r3, #4]
  408b68:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408b6c:	310f      	adds	r1, #15
  408b6e:	f025 0503 	bic.w	r5, r5, #3
  408b72:	4429      	add	r1, r5
  408b74:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408b78:	f021 010f 	bic.w	r1, r1, #15
  408b7c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408b80:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408b84:	db07      	blt.n	408b96 <_malloc_trim_r+0x3e>
  408b86:	2100      	movs	r1, #0
  408b88:	4630      	mov	r0, r6
  408b8a:	f001 f87f 	bl	409c8c <_sbrk_r>
  408b8e:	68bb      	ldr	r3, [r7, #8]
  408b90:	442b      	add	r3, r5
  408b92:	4298      	cmp	r0, r3
  408b94:	d004      	beq.n	408ba0 <_malloc_trim_r+0x48>
  408b96:	4630      	mov	r0, r6
  408b98:	f000 fecc 	bl	409934 <__malloc_unlock>
  408b9c:	2000      	movs	r0, #0
  408b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408ba0:	4261      	negs	r1, r4
  408ba2:	4630      	mov	r0, r6
  408ba4:	f001 f872 	bl	409c8c <_sbrk_r>
  408ba8:	3001      	adds	r0, #1
  408baa:	d00d      	beq.n	408bc8 <_malloc_trim_r+0x70>
  408bac:	4b10      	ldr	r3, [pc, #64]	; (408bf0 <_malloc_trim_r+0x98>)
  408bae:	68ba      	ldr	r2, [r7, #8]
  408bb0:	6819      	ldr	r1, [r3, #0]
  408bb2:	1b2d      	subs	r5, r5, r4
  408bb4:	f045 0501 	orr.w	r5, r5, #1
  408bb8:	4630      	mov	r0, r6
  408bba:	1b09      	subs	r1, r1, r4
  408bbc:	6055      	str	r5, [r2, #4]
  408bbe:	6019      	str	r1, [r3, #0]
  408bc0:	f000 feb8 	bl	409934 <__malloc_unlock>
  408bc4:	2001      	movs	r0, #1
  408bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408bc8:	2100      	movs	r1, #0
  408bca:	4630      	mov	r0, r6
  408bcc:	f001 f85e 	bl	409c8c <_sbrk_r>
  408bd0:	68ba      	ldr	r2, [r7, #8]
  408bd2:	1a83      	subs	r3, r0, r2
  408bd4:	2b0f      	cmp	r3, #15
  408bd6:	ddde      	ble.n	408b96 <_malloc_trim_r+0x3e>
  408bd8:	4c06      	ldr	r4, [pc, #24]	; (408bf4 <_malloc_trim_r+0x9c>)
  408bda:	4905      	ldr	r1, [pc, #20]	; (408bf0 <_malloc_trim_r+0x98>)
  408bdc:	6824      	ldr	r4, [r4, #0]
  408bde:	f043 0301 	orr.w	r3, r3, #1
  408be2:	1b00      	subs	r0, r0, r4
  408be4:	6053      	str	r3, [r2, #4]
  408be6:	6008      	str	r0, [r1, #0]
  408be8:	e7d5      	b.n	408b96 <_malloc_trim_r+0x3e>
  408bea:	bf00      	nop
  408bec:	204005d0 	.word	0x204005d0
  408bf0:	20401e28 	.word	0x20401e28
  408bf4:	204009d8 	.word	0x204009d8

00408bf8 <_free_r>:
  408bf8:	2900      	cmp	r1, #0
  408bfa:	d044      	beq.n	408c86 <_free_r+0x8e>
  408bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408c00:	460d      	mov	r5, r1
  408c02:	4680      	mov	r8, r0
  408c04:	f000 fe90 	bl	409928 <__malloc_lock>
  408c08:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408c0c:	4969      	ldr	r1, [pc, #420]	; (408db4 <_free_r+0x1bc>)
  408c0e:	f027 0301 	bic.w	r3, r7, #1
  408c12:	f1a5 0408 	sub.w	r4, r5, #8
  408c16:	18e2      	adds	r2, r4, r3
  408c18:	688e      	ldr	r6, [r1, #8]
  408c1a:	6850      	ldr	r0, [r2, #4]
  408c1c:	42b2      	cmp	r2, r6
  408c1e:	f020 0003 	bic.w	r0, r0, #3
  408c22:	d05e      	beq.n	408ce2 <_free_r+0xea>
  408c24:	07fe      	lsls	r6, r7, #31
  408c26:	6050      	str	r0, [r2, #4]
  408c28:	d40b      	bmi.n	408c42 <_free_r+0x4a>
  408c2a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408c2e:	1be4      	subs	r4, r4, r7
  408c30:	f101 0e08 	add.w	lr, r1, #8
  408c34:	68a5      	ldr	r5, [r4, #8]
  408c36:	4575      	cmp	r5, lr
  408c38:	443b      	add	r3, r7
  408c3a:	d06d      	beq.n	408d18 <_free_r+0x120>
  408c3c:	68e7      	ldr	r7, [r4, #12]
  408c3e:	60ef      	str	r7, [r5, #12]
  408c40:	60bd      	str	r5, [r7, #8]
  408c42:	1815      	adds	r5, r2, r0
  408c44:	686d      	ldr	r5, [r5, #4]
  408c46:	07ed      	lsls	r5, r5, #31
  408c48:	d53e      	bpl.n	408cc8 <_free_r+0xd0>
  408c4a:	f043 0201 	orr.w	r2, r3, #1
  408c4e:	6062      	str	r2, [r4, #4]
  408c50:	50e3      	str	r3, [r4, r3]
  408c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c56:	d217      	bcs.n	408c88 <_free_r+0x90>
  408c58:	08db      	lsrs	r3, r3, #3
  408c5a:	1c58      	adds	r0, r3, #1
  408c5c:	109a      	asrs	r2, r3, #2
  408c5e:	684d      	ldr	r5, [r1, #4]
  408c60:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408c64:	60a7      	str	r7, [r4, #8]
  408c66:	2301      	movs	r3, #1
  408c68:	4093      	lsls	r3, r2
  408c6a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408c6e:	432b      	orrs	r3, r5
  408c70:	3a08      	subs	r2, #8
  408c72:	60e2      	str	r2, [r4, #12]
  408c74:	604b      	str	r3, [r1, #4]
  408c76:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408c7a:	60fc      	str	r4, [r7, #12]
  408c7c:	4640      	mov	r0, r8
  408c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408c82:	f000 be57 	b.w	409934 <__malloc_unlock>
  408c86:	4770      	bx	lr
  408c88:	0a5a      	lsrs	r2, r3, #9
  408c8a:	2a04      	cmp	r2, #4
  408c8c:	d852      	bhi.n	408d34 <_free_r+0x13c>
  408c8e:	099a      	lsrs	r2, r3, #6
  408c90:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408c94:	00ff      	lsls	r7, r7, #3
  408c96:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408c9a:	19c8      	adds	r0, r1, r7
  408c9c:	59ca      	ldr	r2, [r1, r7]
  408c9e:	3808      	subs	r0, #8
  408ca0:	4290      	cmp	r0, r2
  408ca2:	d04f      	beq.n	408d44 <_free_r+0x14c>
  408ca4:	6851      	ldr	r1, [r2, #4]
  408ca6:	f021 0103 	bic.w	r1, r1, #3
  408caa:	428b      	cmp	r3, r1
  408cac:	d232      	bcs.n	408d14 <_free_r+0x11c>
  408cae:	6892      	ldr	r2, [r2, #8]
  408cb0:	4290      	cmp	r0, r2
  408cb2:	d1f7      	bne.n	408ca4 <_free_r+0xac>
  408cb4:	68c3      	ldr	r3, [r0, #12]
  408cb6:	60a0      	str	r0, [r4, #8]
  408cb8:	60e3      	str	r3, [r4, #12]
  408cba:	609c      	str	r4, [r3, #8]
  408cbc:	60c4      	str	r4, [r0, #12]
  408cbe:	4640      	mov	r0, r8
  408cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408cc4:	f000 be36 	b.w	409934 <__malloc_unlock>
  408cc8:	6895      	ldr	r5, [r2, #8]
  408cca:	4f3b      	ldr	r7, [pc, #236]	; (408db8 <_free_r+0x1c0>)
  408ccc:	42bd      	cmp	r5, r7
  408cce:	4403      	add	r3, r0
  408cd0:	d040      	beq.n	408d54 <_free_r+0x15c>
  408cd2:	68d0      	ldr	r0, [r2, #12]
  408cd4:	60e8      	str	r0, [r5, #12]
  408cd6:	f043 0201 	orr.w	r2, r3, #1
  408cda:	6085      	str	r5, [r0, #8]
  408cdc:	6062      	str	r2, [r4, #4]
  408cde:	50e3      	str	r3, [r4, r3]
  408ce0:	e7b7      	b.n	408c52 <_free_r+0x5a>
  408ce2:	07ff      	lsls	r7, r7, #31
  408ce4:	4403      	add	r3, r0
  408ce6:	d407      	bmi.n	408cf8 <_free_r+0x100>
  408ce8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408cec:	1aa4      	subs	r4, r4, r2
  408cee:	4413      	add	r3, r2
  408cf0:	68a0      	ldr	r0, [r4, #8]
  408cf2:	68e2      	ldr	r2, [r4, #12]
  408cf4:	60c2      	str	r2, [r0, #12]
  408cf6:	6090      	str	r0, [r2, #8]
  408cf8:	4a30      	ldr	r2, [pc, #192]	; (408dbc <_free_r+0x1c4>)
  408cfa:	6812      	ldr	r2, [r2, #0]
  408cfc:	f043 0001 	orr.w	r0, r3, #1
  408d00:	4293      	cmp	r3, r2
  408d02:	6060      	str	r0, [r4, #4]
  408d04:	608c      	str	r4, [r1, #8]
  408d06:	d3b9      	bcc.n	408c7c <_free_r+0x84>
  408d08:	4b2d      	ldr	r3, [pc, #180]	; (408dc0 <_free_r+0x1c8>)
  408d0a:	4640      	mov	r0, r8
  408d0c:	6819      	ldr	r1, [r3, #0]
  408d0e:	f7ff ff23 	bl	408b58 <_malloc_trim_r>
  408d12:	e7b3      	b.n	408c7c <_free_r+0x84>
  408d14:	4610      	mov	r0, r2
  408d16:	e7cd      	b.n	408cb4 <_free_r+0xbc>
  408d18:	1811      	adds	r1, r2, r0
  408d1a:	6849      	ldr	r1, [r1, #4]
  408d1c:	07c9      	lsls	r1, r1, #31
  408d1e:	d444      	bmi.n	408daa <_free_r+0x1b2>
  408d20:	6891      	ldr	r1, [r2, #8]
  408d22:	68d2      	ldr	r2, [r2, #12]
  408d24:	60ca      	str	r2, [r1, #12]
  408d26:	4403      	add	r3, r0
  408d28:	f043 0001 	orr.w	r0, r3, #1
  408d2c:	6091      	str	r1, [r2, #8]
  408d2e:	6060      	str	r0, [r4, #4]
  408d30:	50e3      	str	r3, [r4, r3]
  408d32:	e7a3      	b.n	408c7c <_free_r+0x84>
  408d34:	2a14      	cmp	r2, #20
  408d36:	d816      	bhi.n	408d66 <_free_r+0x16e>
  408d38:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408d3c:	00ff      	lsls	r7, r7, #3
  408d3e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408d42:	e7aa      	b.n	408c9a <_free_r+0xa2>
  408d44:	10aa      	asrs	r2, r5, #2
  408d46:	2301      	movs	r3, #1
  408d48:	684d      	ldr	r5, [r1, #4]
  408d4a:	4093      	lsls	r3, r2
  408d4c:	432b      	orrs	r3, r5
  408d4e:	604b      	str	r3, [r1, #4]
  408d50:	4603      	mov	r3, r0
  408d52:	e7b0      	b.n	408cb6 <_free_r+0xbe>
  408d54:	f043 0201 	orr.w	r2, r3, #1
  408d58:	614c      	str	r4, [r1, #20]
  408d5a:	610c      	str	r4, [r1, #16]
  408d5c:	60e5      	str	r5, [r4, #12]
  408d5e:	60a5      	str	r5, [r4, #8]
  408d60:	6062      	str	r2, [r4, #4]
  408d62:	50e3      	str	r3, [r4, r3]
  408d64:	e78a      	b.n	408c7c <_free_r+0x84>
  408d66:	2a54      	cmp	r2, #84	; 0x54
  408d68:	d806      	bhi.n	408d78 <_free_r+0x180>
  408d6a:	0b1a      	lsrs	r2, r3, #12
  408d6c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408d70:	00ff      	lsls	r7, r7, #3
  408d72:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408d76:	e790      	b.n	408c9a <_free_r+0xa2>
  408d78:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408d7c:	d806      	bhi.n	408d8c <_free_r+0x194>
  408d7e:	0bda      	lsrs	r2, r3, #15
  408d80:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408d84:	00ff      	lsls	r7, r7, #3
  408d86:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408d8a:	e786      	b.n	408c9a <_free_r+0xa2>
  408d8c:	f240 5054 	movw	r0, #1364	; 0x554
  408d90:	4282      	cmp	r2, r0
  408d92:	d806      	bhi.n	408da2 <_free_r+0x1aa>
  408d94:	0c9a      	lsrs	r2, r3, #18
  408d96:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408d9a:	00ff      	lsls	r7, r7, #3
  408d9c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408da0:	e77b      	b.n	408c9a <_free_r+0xa2>
  408da2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408da6:	257e      	movs	r5, #126	; 0x7e
  408da8:	e777      	b.n	408c9a <_free_r+0xa2>
  408daa:	f043 0101 	orr.w	r1, r3, #1
  408dae:	6061      	str	r1, [r4, #4]
  408db0:	6013      	str	r3, [r2, #0]
  408db2:	e763      	b.n	408c7c <_free_r+0x84>
  408db4:	204005d0 	.word	0x204005d0
  408db8:	204005d8 	.word	0x204005d8
  408dbc:	204009dc 	.word	0x204009dc
  408dc0:	20401e58 	.word	0x20401e58

00408dc4 <__sfvwrite_r>:
  408dc4:	6893      	ldr	r3, [r2, #8]
  408dc6:	2b00      	cmp	r3, #0
  408dc8:	d073      	beq.n	408eb2 <__sfvwrite_r+0xee>
  408dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dce:	898b      	ldrh	r3, [r1, #12]
  408dd0:	b083      	sub	sp, #12
  408dd2:	460c      	mov	r4, r1
  408dd4:	0719      	lsls	r1, r3, #28
  408dd6:	9000      	str	r0, [sp, #0]
  408dd8:	4616      	mov	r6, r2
  408dda:	d526      	bpl.n	408e2a <__sfvwrite_r+0x66>
  408ddc:	6922      	ldr	r2, [r4, #16]
  408dde:	b322      	cbz	r2, 408e2a <__sfvwrite_r+0x66>
  408de0:	f013 0002 	ands.w	r0, r3, #2
  408de4:	6835      	ldr	r5, [r6, #0]
  408de6:	d02c      	beq.n	408e42 <__sfvwrite_r+0x7e>
  408de8:	f04f 0900 	mov.w	r9, #0
  408dec:	4fb0      	ldr	r7, [pc, #704]	; (4090b0 <__sfvwrite_r+0x2ec>)
  408dee:	46c8      	mov	r8, r9
  408df0:	46b2      	mov	sl, r6
  408df2:	45b8      	cmp	r8, r7
  408df4:	4643      	mov	r3, r8
  408df6:	464a      	mov	r2, r9
  408df8:	bf28      	it	cs
  408dfa:	463b      	movcs	r3, r7
  408dfc:	9800      	ldr	r0, [sp, #0]
  408dfe:	f1b8 0f00 	cmp.w	r8, #0
  408e02:	d050      	beq.n	408ea6 <__sfvwrite_r+0xe2>
  408e04:	69e1      	ldr	r1, [r4, #28]
  408e06:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408e08:	47b0      	blx	r6
  408e0a:	2800      	cmp	r0, #0
  408e0c:	dd58      	ble.n	408ec0 <__sfvwrite_r+0xfc>
  408e0e:	f8da 3008 	ldr.w	r3, [sl, #8]
  408e12:	1a1b      	subs	r3, r3, r0
  408e14:	4481      	add	r9, r0
  408e16:	eba8 0800 	sub.w	r8, r8, r0
  408e1a:	f8ca 3008 	str.w	r3, [sl, #8]
  408e1e:	2b00      	cmp	r3, #0
  408e20:	d1e7      	bne.n	408df2 <__sfvwrite_r+0x2e>
  408e22:	2000      	movs	r0, #0
  408e24:	b003      	add	sp, #12
  408e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e2a:	4621      	mov	r1, r4
  408e2c:	9800      	ldr	r0, [sp, #0]
  408e2e:	f7ff fc51 	bl	4086d4 <__swsetup_r>
  408e32:	2800      	cmp	r0, #0
  408e34:	f040 8133 	bne.w	40909e <__sfvwrite_r+0x2da>
  408e38:	89a3      	ldrh	r3, [r4, #12]
  408e3a:	6835      	ldr	r5, [r6, #0]
  408e3c:	f013 0002 	ands.w	r0, r3, #2
  408e40:	d1d2      	bne.n	408de8 <__sfvwrite_r+0x24>
  408e42:	f013 0901 	ands.w	r9, r3, #1
  408e46:	d145      	bne.n	408ed4 <__sfvwrite_r+0x110>
  408e48:	464f      	mov	r7, r9
  408e4a:	9601      	str	r6, [sp, #4]
  408e4c:	b337      	cbz	r7, 408e9c <__sfvwrite_r+0xd8>
  408e4e:	059a      	lsls	r2, r3, #22
  408e50:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408e54:	f140 8083 	bpl.w	408f5e <__sfvwrite_r+0x19a>
  408e58:	4547      	cmp	r7, r8
  408e5a:	46c3      	mov	fp, r8
  408e5c:	f0c0 80ab 	bcc.w	408fb6 <__sfvwrite_r+0x1f2>
  408e60:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408e64:	f040 80ac 	bne.w	408fc0 <__sfvwrite_r+0x1fc>
  408e68:	6820      	ldr	r0, [r4, #0]
  408e6a:	46ba      	mov	sl, r7
  408e6c:	465a      	mov	r2, fp
  408e6e:	4649      	mov	r1, r9
  408e70:	f000 fcf6 	bl	409860 <memmove>
  408e74:	68a2      	ldr	r2, [r4, #8]
  408e76:	6823      	ldr	r3, [r4, #0]
  408e78:	eba2 0208 	sub.w	r2, r2, r8
  408e7c:	445b      	add	r3, fp
  408e7e:	60a2      	str	r2, [r4, #8]
  408e80:	6023      	str	r3, [r4, #0]
  408e82:	9a01      	ldr	r2, [sp, #4]
  408e84:	6893      	ldr	r3, [r2, #8]
  408e86:	eba3 030a 	sub.w	r3, r3, sl
  408e8a:	44d1      	add	r9, sl
  408e8c:	eba7 070a 	sub.w	r7, r7, sl
  408e90:	6093      	str	r3, [r2, #8]
  408e92:	2b00      	cmp	r3, #0
  408e94:	d0c5      	beq.n	408e22 <__sfvwrite_r+0x5e>
  408e96:	89a3      	ldrh	r3, [r4, #12]
  408e98:	2f00      	cmp	r7, #0
  408e9a:	d1d8      	bne.n	408e4e <__sfvwrite_r+0x8a>
  408e9c:	f8d5 9000 	ldr.w	r9, [r5]
  408ea0:	686f      	ldr	r7, [r5, #4]
  408ea2:	3508      	adds	r5, #8
  408ea4:	e7d2      	b.n	408e4c <__sfvwrite_r+0x88>
  408ea6:	f8d5 9000 	ldr.w	r9, [r5]
  408eaa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408eae:	3508      	adds	r5, #8
  408eb0:	e79f      	b.n	408df2 <__sfvwrite_r+0x2e>
  408eb2:	2000      	movs	r0, #0
  408eb4:	4770      	bx	lr
  408eb6:	4621      	mov	r1, r4
  408eb8:	9800      	ldr	r0, [sp, #0]
  408eba:	f7ff fd1f 	bl	4088fc <_fflush_r>
  408ebe:	b370      	cbz	r0, 408f1e <__sfvwrite_r+0x15a>
  408ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ec8:	f04f 30ff 	mov.w	r0, #4294967295
  408ecc:	81a3      	strh	r3, [r4, #12]
  408ece:	b003      	add	sp, #12
  408ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ed4:	4681      	mov	r9, r0
  408ed6:	4633      	mov	r3, r6
  408ed8:	464e      	mov	r6, r9
  408eda:	46a8      	mov	r8, r5
  408edc:	469a      	mov	sl, r3
  408ede:	464d      	mov	r5, r9
  408ee0:	b34e      	cbz	r6, 408f36 <__sfvwrite_r+0x172>
  408ee2:	b380      	cbz	r0, 408f46 <__sfvwrite_r+0x182>
  408ee4:	6820      	ldr	r0, [r4, #0]
  408ee6:	6923      	ldr	r3, [r4, #16]
  408ee8:	6962      	ldr	r2, [r4, #20]
  408eea:	45b1      	cmp	r9, r6
  408eec:	46cb      	mov	fp, r9
  408eee:	bf28      	it	cs
  408ef0:	46b3      	movcs	fp, r6
  408ef2:	4298      	cmp	r0, r3
  408ef4:	465f      	mov	r7, fp
  408ef6:	d904      	bls.n	408f02 <__sfvwrite_r+0x13e>
  408ef8:	68a3      	ldr	r3, [r4, #8]
  408efa:	4413      	add	r3, r2
  408efc:	459b      	cmp	fp, r3
  408efe:	f300 80a6 	bgt.w	40904e <__sfvwrite_r+0x28a>
  408f02:	4593      	cmp	fp, r2
  408f04:	db4b      	blt.n	408f9e <__sfvwrite_r+0x1da>
  408f06:	4613      	mov	r3, r2
  408f08:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408f0a:	69e1      	ldr	r1, [r4, #28]
  408f0c:	9800      	ldr	r0, [sp, #0]
  408f0e:	462a      	mov	r2, r5
  408f10:	47b8      	blx	r7
  408f12:	1e07      	subs	r7, r0, #0
  408f14:	ddd4      	ble.n	408ec0 <__sfvwrite_r+0xfc>
  408f16:	ebb9 0907 	subs.w	r9, r9, r7
  408f1a:	d0cc      	beq.n	408eb6 <__sfvwrite_r+0xf2>
  408f1c:	2001      	movs	r0, #1
  408f1e:	f8da 3008 	ldr.w	r3, [sl, #8]
  408f22:	1bdb      	subs	r3, r3, r7
  408f24:	443d      	add	r5, r7
  408f26:	1bf6      	subs	r6, r6, r7
  408f28:	f8ca 3008 	str.w	r3, [sl, #8]
  408f2c:	2b00      	cmp	r3, #0
  408f2e:	f43f af78 	beq.w	408e22 <__sfvwrite_r+0x5e>
  408f32:	2e00      	cmp	r6, #0
  408f34:	d1d5      	bne.n	408ee2 <__sfvwrite_r+0x11e>
  408f36:	f108 0308 	add.w	r3, r8, #8
  408f3a:	e913 0060 	ldmdb	r3, {r5, r6}
  408f3e:	4698      	mov	r8, r3
  408f40:	3308      	adds	r3, #8
  408f42:	2e00      	cmp	r6, #0
  408f44:	d0f9      	beq.n	408f3a <__sfvwrite_r+0x176>
  408f46:	4632      	mov	r2, r6
  408f48:	210a      	movs	r1, #10
  408f4a:	4628      	mov	r0, r5
  408f4c:	f000 fc38 	bl	4097c0 <memchr>
  408f50:	2800      	cmp	r0, #0
  408f52:	f000 80a1 	beq.w	409098 <__sfvwrite_r+0x2d4>
  408f56:	3001      	adds	r0, #1
  408f58:	eba0 0905 	sub.w	r9, r0, r5
  408f5c:	e7c2      	b.n	408ee4 <__sfvwrite_r+0x120>
  408f5e:	6820      	ldr	r0, [r4, #0]
  408f60:	6923      	ldr	r3, [r4, #16]
  408f62:	4298      	cmp	r0, r3
  408f64:	d802      	bhi.n	408f6c <__sfvwrite_r+0x1a8>
  408f66:	6963      	ldr	r3, [r4, #20]
  408f68:	429f      	cmp	r7, r3
  408f6a:	d25d      	bcs.n	409028 <__sfvwrite_r+0x264>
  408f6c:	45b8      	cmp	r8, r7
  408f6e:	bf28      	it	cs
  408f70:	46b8      	movcs	r8, r7
  408f72:	4642      	mov	r2, r8
  408f74:	4649      	mov	r1, r9
  408f76:	f000 fc73 	bl	409860 <memmove>
  408f7a:	68a3      	ldr	r3, [r4, #8]
  408f7c:	6822      	ldr	r2, [r4, #0]
  408f7e:	eba3 0308 	sub.w	r3, r3, r8
  408f82:	4442      	add	r2, r8
  408f84:	60a3      	str	r3, [r4, #8]
  408f86:	6022      	str	r2, [r4, #0]
  408f88:	b10b      	cbz	r3, 408f8e <__sfvwrite_r+0x1ca>
  408f8a:	46c2      	mov	sl, r8
  408f8c:	e779      	b.n	408e82 <__sfvwrite_r+0xbe>
  408f8e:	4621      	mov	r1, r4
  408f90:	9800      	ldr	r0, [sp, #0]
  408f92:	f7ff fcb3 	bl	4088fc <_fflush_r>
  408f96:	2800      	cmp	r0, #0
  408f98:	d192      	bne.n	408ec0 <__sfvwrite_r+0xfc>
  408f9a:	46c2      	mov	sl, r8
  408f9c:	e771      	b.n	408e82 <__sfvwrite_r+0xbe>
  408f9e:	465a      	mov	r2, fp
  408fa0:	4629      	mov	r1, r5
  408fa2:	f000 fc5d 	bl	409860 <memmove>
  408fa6:	68a2      	ldr	r2, [r4, #8]
  408fa8:	6823      	ldr	r3, [r4, #0]
  408faa:	eba2 020b 	sub.w	r2, r2, fp
  408fae:	445b      	add	r3, fp
  408fb0:	60a2      	str	r2, [r4, #8]
  408fb2:	6023      	str	r3, [r4, #0]
  408fb4:	e7af      	b.n	408f16 <__sfvwrite_r+0x152>
  408fb6:	6820      	ldr	r0, [r4, #0]
  408fb8:	46b8      	mov	r8, r7
  408fba:	46ba      	mov	sl, r7
  408fbc:	46bb      	mov	fp, r7
  408fbe:	e755      	b.n	408e6c <__sfvwrite_r+0xa8>
  408fc0:	6962      	ldr	r2, [r4, #20]
  408fc2:	6820      	ldr	r0, [r4, #0]
  408fc4:	6921      	ldr	r1, [r4, #16]
  408fc6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408fca:	eba0 0a01 	sub.w	sl, r0, r1
  408fce:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408fd2:	f10a 0001 	add.w	r0, sl, #1
  408fd6:	ea4f 0868 	mov.w	r8, r8, asr #1
  408fda:	4438      	add	r0, r7
  408fdc:	4540      	cmp	r0, r8
  408fde:	4642      	mov	r2, r8
  408fe0:	bf84      	itt	hi
  408fe2:	4680      	movhi	r8, r0
  408fe4:	4642      	movhi	r2, r8
  408fe6:	055b      	lsls	r3, r3, #21
  408fe8:	d544      	bpl.n	409074 <__sfvwrite_r+0x2b0>
  408fea:	4611      	mov	r1, r2
  408fec:	9800      	ldr	r0, [sp, #0]
  408fee:	f000 f921 	bl	409234 <_malloc_r>
  408ff2:	4683      	mov	fp, r0
  408ff4:	2800      	cmp	r0, #0
  408ff6:	d055      	beq.n	4090a4 <__sfvwrite_r+0x2e0>
  408ff8:	4652      	mov	r2, sl
  408ffa:	6921      	ldr	r1, [r4, #16]
  408ffc:	f7fd ffe0 	bl	406fc0 <memcpy>
  409000:	89a3      	ldrh	r3, [r4, #12]
  409002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  409006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40900a:	81a3      	strh	r3, [r4, #12]
  40900c:	eb0b 000a 	add.w	r0, fp, sl
  409010:	eba8 030a 	sub.w	r3, r8, sl
  409014:	f8c4 b010 	str.w	fp, [r4, #16]
  409018:	f8c4 8014 	str.w	r8, [r4, #20]
  40901c:	6020      	str	r0, [r4, #0]
  40901e:	60a3      	str	r3, [r4, #8]
  409020:	46b8      	mov	r8, r7
  409022:	46ba      	mov	sl, r7
  409024:	46bb      	mov	fp, r7
  409026:	e721      	b.n	408e6c <__sfvwrite_r+0xa8>
  409028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40902c:	42b9      	cmp	r1, r7
  40902e:	bf28      	it	cs
  409030:	4639      	movcs	r1, r7
  409032:	464a      	mov	r2, r9
  409034:	fb91 f1f3 	sdiv	r1, r1, r3
  409038:	9800      	ldr	r0, [sp, #0]
  40903a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40903c:	fb03 f301 	mul.w	r3, r3, r1
  409040:	69e1      	ldr	r1, [r4, #28]
  409042:	47b0      	blx	r6
  409044:	f1b0 0a00 	subs.w	sl, r0, #0
  409048:	f73f af1b 	bgt.w	408e82 <__sfvwrite_r+0xbe>
  40904c:	e738      	b.n	408ec0 <__sfvwrite_r+0xfc>
  40904e:	461a      	mov	r2, r3
  409050:	4629      	mov	r1, r5
  409052:	9301      	str	r3, [sp, #4]
  409054:	f000 fc04 	bl	409860 <memmove>
  409058:	6822      	ldr	r2, [r4, #0]
  40905a:	9b01      	ldr	r3, [sp, #4]
  40905c:	9800      	ldr	r0, [sp, #0]
  40905e:	441a      	add	r2, r3
  409060:	6022      	str	r2, [r4, #0]
  409062:	4621      	mov	r1, r4
  409064:	f7ff fc4a 	bl	4088fc <_fflush_r>
  409068:	9b01      	ldr	r3, [sp, #4]
  40906a:	2800      	cmp	r0, #0
  40906c:	f47f af28 	bne.w	408ec0 <__sfvwrite_r+0xfc>
  409070:	461f      	mov	r7, r3
  409072:	e750      	b.n	408f16 <__sfvwrite_r+0x152>
  409074:	9800      	ldr	r0, [sp, #0]
  409076:	f000 fc63 	bl	409940 <_realloc_r>
  40907a:	4683      	mov	fp, r0
  40907c:	2800      	cmp	r0, #0
  40907e:	d1c5      	bne.n	40900c <__sfvwrite_r+0x248>
  409080:	9d00      	ldr	r5, [sp, #0]
  409082:	6921      	ldr	r1, [r4, #16]
  409084:	4628      	mov	r0, r5
  409086:	f7ff fdb7 	bl	408bf8 <_free_r>
  40908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40908e:	220c      	movs	r2, #12
  409090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  409094:	602a      	str	r2, [r5, #0]
  409096:	e715      	b.n	408ec4 <__sfvwrite_r+0x100>
  409098:	f106 0901 	add.w	r9, r6, #1
  40909c:	e722      	b.n	408ee4 <__sfvwrite_r+0x120>
  40909e:	f04f 30ff 	mov.w	r0, #4294967295
  4090a2:	e6bf      	b.n	408e24 <__sfvwrite_r+0x60>
  4090a4:	9a00      	ldr	r2, [sp, #0]
  4090a6:	230c      	movs	r3, #12
  4090a8:	6013      	str	r3, [r2, #0]
  4090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4090ae:	e709      	b.n	408ec4 <__sfvwrite_r+0x100>
  4090b0:	7ffffc00 	.word	0x7ffffc00

004090b4 <_fwalk_reent>:
  4090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4090b8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4090bc:	d01f      	beq.n	4090fe <_fwalk_reent+0x4a>
  4090be:	4688      	mov	r8, r1
  4090c0:	4606      	mov	r6, r0
  4090c2:	f04f 0900 	mov.w	r9, #0
  4090c6:	687d      	ldr	r5, [r7, #4]
  4090c8:	68bc      	ldr	r4, [r7, #8]
  4090ca:	3d01      	subs	r5, #1
  4090cc:	d411      	bmi.n	4090f2 <_fwalk_reent+0x3e>
  4090ce:	89a3      	ldrh	r3, [r4, #12]
  4090d0:	2b01      	cmp	r3, #1
  4090d2:	f105 35ff 	add.w	r5, r5, #4294967295
  4090d6:	d908      	bls.n	4090ea <_fwalk_reent+0x36>
  4090d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4090dc:	3301      	adds	r3, #1
  4090de:	4621      	mov	r1, r4
  4090e0:	4630      	mov	r0, r6
  4090e2:	d002      	beq.n	4090ea <_fwalk_reent+0x36>
  4090e4:	47c0      	blx	r8
  4090e6:	ea49 0900 	orr.w	r9, r9, r0
  4090ea:	1c6b      	adds	r3, r5, #1
  4090ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4090f0:	d1ed      	bne.n	4090ce <_fwalk_reent+0x1a>
  4090f2:	683f      	ldr	r7, [r7, #0]
  4090f4:	2f00      	cmp	r7, #0
  4090f6:	d1e6      	bne.n	4090c6 <_fwalk_reent+0x12>
  4090f8:	4648      	mov	r0, r9
  4090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090fe:	46b9      	mov	r9, r7
  409100:	4648      	mov	r0, r9
  409102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409106:	bf00      	nop

00409108 <__locale_mb_cur_max>:
  409108:	4b04      	ldr	r3, [pc, #16]	; (40911c <__locale_mb_cur_max+0x14>)
  40910a:	4a05      	ldr	r2, [pc, #20]	; (409120 <__locale_mb_cur_max+0x18>)
  40910c:	681b      	ldr	r3, [r3, #0]
  40910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  409110:	2b00      	cmp	r3, #0
  409112:	bf08      	it	eq
  409114:	4613      	moveq	r3, r2
  409116:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40911a:	4770      	bx	lr
  40911c:	20400034 	.word	0x20400034
  409120:	20400464 	.word	0x20400464

00409124 <__retarget_lock_init_recursive>:
  409124:	4770      	bx	lr
  409126:	bf00      	nop

00409128 <__retarget_lock_close_recursive>:
  409128:	4770      	bx	lr
  40912a:	bf00      	nop

0040912c <__retarget_lock_acquire_recursive>:
  40912c:	4770      	bx	lr
  40912e:	bf00      	nop

00409130 <__retarget_lock_release_recursive>:
  409130:	4770      	bx	lr
  409132:	bf00      	nop

00409134 <__swhatbuf_r>:
  409134:	b570      	push	{r4, r5, r6, lr}
  409136:	460c      	mov	r4, r1
  409138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40913c:	2900      	cmp	r1, #0
  40913e:	b090      	sub	sp, #64	; 0x40
  409140:	4615      	mov	r5, r2
  409142:	461e      	mov	r6, r3
  409144:	db14      	blt.n	409170 <__swhatbuf_r+0x3c>
  409146:	aa01      	add	r2, sp, #4
  409148:	f000 ff72 	bl	40a030 <_fstat_r>
  40914c:	2800      	cmp	r0, #0
  40914e:	db0f      	blt.n	409170 <__swhatbuf_r+0x3c>
  409150:	9a02      	ldr	r2, [sp, #8]
  409152:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  409156:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40915a:	fab2 f282 	clz	r2, r2
  40915e:	0952      	lsrs	r2, r2, #5
  409160:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409164:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409168:	6032      	str	r2, [r6, #0]
  40916a:	602b      	str	r3, [r5, #0]
  40916c:	b010      	add	sp, #64	; 0x40
  40916e:	bd70      	pop	{r4, r5, r6, pc}
  409170:	89a2      	ldrh	r2, [r4, #12]
  409172:	2300      	movs	r3, #0
  409174:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409178:	6033      	str	r3, [r6, #0]
  40917a:	d004      	beq.n	409186 <__swhatbuf_r+0x52>
  40917c:	2240      	movs	r2, #64	; 0x40
  40917e:	4618      	mov	r0, r3
  409180:	602a      	str	r2, [r5, #0]
  409182:	b010      	add	sp, #64	; 0x40
  409184:	bd70      	pop	{r4, r5, r6, pc}
  409186:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40918a:	602b      	str	r3, [r5, #0]
  40918c:	b010      	add	sp, #64	; 0x40
  40918e:	bd70      	pop	{r4, r5, r6, pc}

00409190 <__smakebuf_r>:
  409190:	898a      	ldrh	r2, [r1, #12]
  409192:	0792      	lsls	r2, r2, #30
  409194:	460b      	mov	r3, r1
  409196:	d506      	bpl.n	4091a6 <__smakebuf_r+0x16>
  409198:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40919c:	2101      	movs	r1, #1
  40919e:	601a      	str	r2, [r3, #0]
  4091a0:	611a      	str	r2, [r3, #16]
  4091a2:	6159      	str	r1, [r3, #20]
  4091a4:	4770      	bx	lr
  4091a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4091a8:	b083      	sub	sp, #12
  4091aa:	ab01      	add	r3, sp, #4
  4091ac:	466a      	mov	r2, sp
  4091ae:	460c      	mov	r4, r1
  4091b0:	4606      	mov	r6, r0
  4091b2:	f7ff ffbf 	bl	409134 <__swhatbuf_r>
  4091b6:	9900      	ldr	r1, [sp, #0]
  4091b8:	4605      	mov	r5, r0
  4091ba:	4630      	mov	r0, r6
  4091bc:	f000 f83a 	bl	409234 <_malloc_r>
  4091c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4091c4:	b1d8      	cbz	r0, 4091fe <__smakebuf_r+0x6e>
  4091c6:	9a01      	ldr	r2, [sp, #4]
  4091c8:	4f15      	ldr	r7, [pc, #84]	; (409220 <__smakebuf_r+0x90>)
  4091ca:	9900      	ldr	r1, [sp, #0]
  4091cc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4091d2:	81a3      	strh	r3, [r4, #12]
  4091d4:	6020      	str	r0, [r4, #0]
  4091d6:	6120      	str	r0, [r4, #16]
  4091d8:	6161      	str	r1, [r4, #20]
  4091da:	b91a      	cbnz	r2, 4091e4 <__smakebuf_r+0x54>
  4091dc:	432b      	orrs	r3, r5
  4091de:	81a3      	strh	r3, [r4, #12]
  4091e0:	b003      	add	sp, #12
  4091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4091e4:	4630      	mov	r0, r6
  4091e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4091ea:	f000 ff35 	bl	40a058 <_isatty_r>
  4091ee:	b1a0      	cbz	r0, 40921a <__smakebuf_r+0x8a>
  4091f0:	89a3      	ldrh	r3, [r4, #12]
  4091f2:	f023 0303 	bic.w	r3, r3, #3
  4091f6:	f043 0301 	orr.w	r3, r3, #1
  4091fa:	b21b      	sxth	r3, r3
  4091fc:	e7ee      	b.n	4091dc <__smakebuf_r+0x4c>
  4091fe:	059a      	lsls	r2, r3, #22
  409200:	d4ee      	bmi.n	4091e0 <__smakebuf_r+0x50>
  409202:	f023 0303 	bic.w	r3, r3, #3
  409206:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40920a:	f043 0302 	orr.w	r3, r3, #2
  40920e:	2101      	movs	r1, #1
  409210:	81a3      	strh	r3, [r4, #12]
  409212:	6022      	str	r2, [r4, #0]
  409214:	6122      	str	r2, [r4, #16]
  409216:	6161      	str	r1, [r4, #20]
  409218:	e7e2      	b.n	4091e0 <__smakebuf_r+0x50>
  40921a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40921e:	e7dd      	b.n	4091dc <__smakebuf_r+0x4c>
  409220:	00408951 	.word	0x00408951

00409224 <malloc>:
  409224:	4b02      	ldr	r3, [pc, #8]	; (409230 <malloc+0xc>)
  409226:	4601      	mov	r1, r0
  409228:	6818      	ldr	r0, [r3, #0]
  40922a:	f000 b803 	b.w	409234 <_malloc_r>
  40922e:	bf00      	nop
  409230:	20400034 	.word	0x20400034

00409234 <_malloc_r>:
  409234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409238:	f101 060b 	add.w	r6, r1, #11
  40923c:	2e16      	cmp	r6, #22
  40923e:	b083      	sub	sp, #12
  409240:	4605      	mov	r5, r0
  409242:	f240 809e 	bls.w	409382 <_malloc_r+0x14e>
  409246:	f036 0607 	bics.w	r6, r6, #7
  40924a:	f100 80bd 	bmi.w	4093c8 <_malloc_r+0x194>
  40924e:	42b1      	cmp	r1, r6
  409250:	f200 80ba 	bhi.w	4093c8 <_malloc_r+0x194>
  409254:	f000 fb68 	bl	409928 <__malloc_lock>
  409258:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40925c:	f0c0 8293 	bcc.w	409786 <_malloc_r+0x552>
  409260:	0a73      	lsrs	r3, r6, #9
  409262:	f000 80b8 	beq.w	4093d6 <_malloc_r+0x1a2>
  409266:	2b04      	cmp	r3, #4
  409268:	f200 8179 	bhi.w	40955e <_malloc_r+0x32a>
  40926c:	09b3      	lsrs	r3, r6, #6
  40926e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  409272:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  409276:	00c3      	lsls	r3, r0, #3
  409278:	4fbf      	ldr	r7, [pc, #764]	; (409578 <_malloc_r+0x344>)
  40927a:	443b      	add	r3, r7
  40927c:	f1a3 0108 	sub.w	r1, r3, #8
  409280:	685c      	ldr	r4, [r3, #4]
  409282:	42a1      	cmp	r1, r4
  409284:	d106      	bne.n	409294 <_malloc_r+0x60>
  409286:	e00c      	b.n	4092a2 <_malloc_r+0x6e>
  409288:	2a00      	cmp	r2, #0
  40928a:	f280 80aa 	bge.w	4093e2 <_malloc_r+0x1ae>
  40928e:	68e4      	ldr	r4, [r4, #12]
  409290:	42a1      	cmp	r1, r4
  409292:	d006      	beq.n	4092a2 <_malloc_r+0x6e>
  409294:	6863      	ldr	r3, [r4, #4]
  409296:	f023 0303 	bic.w	r3, r3, #3
  40929a:	1b9a      	subs	r2, r3, r6
  40929c:	2a0f      	cmp	r2, #15
  40929e:	ddf3      	ble.n	409288 <_malloc_r+0x54>
  4092a0:	4670      	mov	r0, lr
  4092a2:	693c      	ldr	r4, [r7, #16]
  4092a4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40958c <_malloc_r+0x358>
  4092a8:	4574      	cmp	r4, lr
  4092aa:	f000 81ab 	beq.w	409604 <_malloc_r+0x3d0>
  4092ae:	6863      	ldr	r3, [r4, #4]
  4092b0:	f023 0303 	bic.w	r3, r3, #3
  4092b4:	1b9a      	subs	r2, r3, r6
  4092b6:	2a0f      	cmp	r2, #15
  4092b8:	f300 8190 	bgt.w	4095dc <_malloc_r+0x3a8>
  4092bc:	2a00      	cmp	r2, #0
  4092be:	f8c7 e014 	str.w	lr, [r7, #20]
  4092c2:	f8c7 e010 	str.w	lr, [r7, #16]
  4092c6:	f280 809d 	bge.w	409404 <_malloc_r+0x1d0>
  4092ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4092ce:	f080 8161 	bcs.w	409594 <_malloc_r+0x360>
  4092d2:	08db      	lsrs	r3, r3, #3
  4092d4:	f103 0c01 	add.w	ip, r3, #1
  4092d8:	1099      	asrs	r1, r3, #2
  4092da:	687a      	ldr	r2, [r7, #4]
  4092dc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4092e0:	f8c4 8008 	str.w	r8, [r4, #8]
  4092e4:	2301      	movs	r3, #1
  4092e6:	408b      	lsls	r3, r1
  4092e8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4092ec:	4313      	orrs	r3, r2
  4092ee:	3908      	subs	r1, #8
  4092f0:	60e1      	str	r1, [r4, #12]
  4092f2:	607b      	str	r3, [r7, #4]
  4092f4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4092f8:	f8c8 400c 	str.w	r4, [r8, #12]
  4092fc:	1082      	asrs	r2, r0, #2
  4092fe:	2401      	movs	r4, #1
  409300:	4094      	lsls	r4, r2
  409302:	429c      	cmp	r4, r3
  409304:	f200 808b 	bhi.w	40941e <_malloc_r+0x1ea>
  409308:	421c      	tst	r4, r3
  40930a:	d106      	bne.n	40931a <_malloc_r+0xe6>
  40930c:	f020 0003 	bic.w	r0, r0, #3
  409310:	0064      	lsls	r4, r4, #1
  409312:	421c      	tst	r4, r3
  409314:	f100 0004 	add.w	r0, r0, #4
  409318:	d0fa      	beq.n	409310 <_malloc_r+0xdc>
  40931a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40931e:	46cc      	mov	ip, r9
  409320:	4680      	mov	r8, r0
  409322:	f8dc 300c 	ldr.w	r3, [ip, #12]
  409326:	459c      	cmp	ip, r3
  409328:	d107      	bne.n	40933a <_malloc_r+0x106>
  40932a:	e16d      	b.n	409608 <_malloc_r+0x3d4>
  40932c:	2a00      	cmp	r2, #0
  40932e:	f280 817b 	bge.w	409628 <_malloc_r+0x3f4>
  409332:	68db      	ldr	r3, [r3, #12]
  409334:	459c      	cmp	ip, r3
  409336:	f000 8167 	beq.w	409608 <_malloc_r+0x3d4>
  40933a:	6859      	ldr	r1, [r3, #4]
  40933c:	f021 0103 	bic.w	r1, r1, #3
  409340:	1b8a      	subs	r2, r1, r6
  409342:	2a0f      	cmp	r2, #15
  409344:	ddf2      	ble.n	40932c <_malloc_r+0xf8>
  409346:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40934a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40934e:	9300      	str	r3, [sp, #0]
  409350:	199c      	adds	r4, r3, r6
  409352:	4628      	mov	r0, r5
  409354:	f046 0601 	orr.w	r6, r6, #1
  409358:	f042 0501 	orr.w	r5, r2, #1
  40935c:	605e      	str	r6, [r3, #4]
  40935e:	f8c8 c00c 	str.w	ip, [r8, #12]
  409362:	f8cc 8008 	str.w	r8, [ip, #8]
  409366:	617c      	str	r4, [r7, #20]
  409368:	613c      	str	r4, [r7, #16]
  40936a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40936e:	f8c4 e008 	str.w	lr, [r4, #8]
  409372:	6065      	str	r5, [r4, #4]
  409374:	505a      	str	r2, [r3, r1]
  409376:	f000 fadd 	bl	409934 <__malloc_unlock>
  40937a:	9b00      	ldr	r3, [sp, #0]
  40937c:	f103 0408 	add.w	r4, r3, #8
  409380:	e01e      	b.n	4093c0 <_malloc_r+0x18c>
  409382:	2910      	cmp	r1, #16
  409384:	d820      	bhi.n	4093c8 <_malloc_r+0x194>
  409386:	f000 facf 	bl	409928 <__malloc_lock>
  40938a:	2610      	movs	r6, #16
  40938c:	2318      	movs	r3, #24
  40938e:	2002      	movs	r0, #2
  409390:	4f79      	ldr	r7, [pc, #484]	; (409578 <_malloc_r+0x344>)
  409392:	443b      	add	r3, r7
  409394:	f1a3 0208 	sub.w	r2, r3, #8
  409398:	685c      	ldr	r4, [r3, #4]
  40939a:	4294      	cmp	r4, r2
  40939c:	f000 813d 	beq.w	40961a <_malloc_r+0x3e6>
  4093a0:	6863      	ldr	r3, [r4, #4]
  4093a2:	68e1      	ldr	r1, [r4, #12]
  4093a4:	68a6      	ldr	r6, [r4, #8]
  4093a6:	f023 0303 	bic.w	r3, r3, #3
  4093aa:	4423      	add	r3, r4
  4093ac:	4628      	mov	r0, r5
  4093ae:	685a      	ldr	r2, [r3, #4]
  4093b0:	60f1      	str	r1, [r6, #12]
  4093b2:	f042 0201 	orr.w	r2, r2, #1
  4093b6:	608e      	str	r6, [r1, #8]
  4093b8:	605a      	str	r2, [r3, #4]
  4093ba:	f000 fabb 	bl	409934 <__malloc_unlock>
  4093be:	3408      	adds	r4, #8
  4093c0:	4620      	mov	r0, r4
  4093c2:	b003      	add	sp, #12
  4093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093c8:	2400      	movs	r4, #0
  4093ca:	230c      	movs	r3, #12
  4093cc:	4620      	mov	r0, r4
  4093ce:	602b      	str	r3, [r5, #0]
  4093d0:	b003      	add	sp, #12
  4093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093d6:	2040      	movs	r0, #64	; 0x40
  4093d8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4093dc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4093e0:	e74a      	b.n	409278 <_malloc_r+0x44>
  4093e2:	4423      	add	r3, r4
  4093e4:	68e1      	ldr	r1, [r4, #12]
  4093e6:	685a      	ldr	r2, [r3, #4]
  4093e8:	68a6      	ldr	r6, [r4, #8]
  4093ea:	f042 0201 	orr.w	r2, r2, #1
  4093ee:	60f1      	str	r1, [r6, #12]
  4093f0:	4628      	mov	r0, r5
  4093f2:	608e      	str	r6, [r1, #8]
  4093f4:	605a      	str	r2, [r3, #4]
  4093f6:	f000 fa9d 	bl	409934 <__malloc_unlock>
  4093fa:	3408      	adds	r4, #8
  4093fc:	4620      	mov	r0, r4
  4093fe:	b003      	add	sp, #12
  409400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409404:	4423      	add	r3, r4
  409406:	4628      	mov	r0, r5
  409408:	685a      	ldr	r2, [r3, #4]
  40940a:	f042 0201 	orr.w	r2, r2, #1
  40940e:	605a      	str	r2, [r3, #4]
  409410:	f000 fa90 	bl	409934 <__malloc_unlock>
  409414:	3408      	adds	r4, #8
  409416:	4620      	mov	r0, r4
  409418:	b003      	add	sp, #12
  40941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40941e:	68bc      	ldr	r4, [r7, #8]
  409420:	6863      	ldr	r3, [r4, #4]
  409422:	f023 0803 	bic.w	r8, r3, #3
  409426:	45b0      	cmp	r8, r6
  409428:	d304      	bcc.n	409434 <_malloc_r+0x200>
  40942a:	eba8 0306 	sub.w	r3, r8, r6
  40942e:	2b0f      	cmp	r3, #15
  409430:	f300 8085 	bgt.w	40953e <_malloc_r+0x30a>
  409434:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409590 <_malloc_r+0x35c>
  409438:	4b50      	ldr	r3, [pc, #320]	; (40957c <_malloc_r+0x348>)
  40943a:	f8d9 2000 	ldr.w	r2, [r9]
  40943e:	681b      	ldr	r3, [r3, #0]
  409440:	3201      	adds	r2, #1
  409442:	4433      	add	r3, r6
  409444:	eb04 0a08 	add.w	sl, r4, r8
  409448:	f000 8155 	beq.w	4096f6 <_malloc_r+0x4c2>
  40944c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  409450:	330f      	adds	r3, #15
  409452:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  409456:	f02b 0b0f 	bic.w	fp, fp, #15
  40945a:	4659      	mov	r1, fp
  40945c:	4628      	mov	r0, r5
  40945e:	f000 fc15 	bl	409c8c <_sbrk_r>
  409462:	1c41      	adds	r1, r0, #1
  409464:	4602      	mov	r2, r0
  409466:	f000 80fc 	beq.w	409662 <_malloc_r+0x42e>
  40946a:	4582      	cmp	sl, r0
  40946c:	f200 80f7 	bhi.w	40965e <_malloc_r+0x42a>
  409470:	4b43      	ldr	r3, [pc, #268]	; (409580 <_malloc_r+0x34c>)
  409472:	6819      	ldr	r1, [r3, #0]
  409474:	4459      	add	r1, fp
  409476:	6019      	str	r1, [r3, #0]
  409478:	f000 814d 	beq.w	409716 <_malloc_r+0x4e2>
  40947c:	f8d9 0000 	ldr.w	r0, [r9]
  409480:	3001      	adds	r0, #1
  409482:	bf1b      	ittet	ne
  409484:	eba2 0a0a 	subne.w	sl, r2, sl
  409488:	4451      	addne	r1, sl
  40948a:	f8c9 2000 	streq.w	r2, [r9]
  40948e:	6019      	strne	r1, [r3, #0]
  409490:	f012 0107 	ands.w	r1, r2, #7
  409494:	f000 8115 	beq.w	4096c2 <_malloc_r+0x48e>
  409498:	f1c1 0008 	rsb	r0, r1, #8
  40949c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4094a0:	4402      	add	r2, r0
  4094a2:	3108      	adds	r1, #8
  4094a4:	eb02 090b 	add.w	r9, r2, fp
  4094a8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4094ac:	eba1 0909 	sub.w	r9, r1, r9
  4094b0:	4649      	mov	r1, r9
  4094b2:	4628      	mov	r0, r5
  4094b4:	9301      	str	r3, [sp, #4]
  4094b6:	9200      	str	r2, [sp, #0]
  4094b8:	f000 fbe8 	bl	409c8c <_sbrk_r>
  4094bc:	1c43      	adds	r3, r0, #1
  4094be:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4094c2:	f000 8143 	beq.w	40974c <_malloc_r+0x518>
  4094c6:	1a80      	subs	r0, r0, r2
  4094c8:	4448      	add	r0, r9
  4094ca:	f040 0001 	orr.w	r0, r0, #1
  4094ce:	6819      	ldr	r1, [r3, #0]
  4094d0:	60ba      	str	r2, [r7, #8]
  4094d2:	4449      	add	r1, r9
  4094d4:	42bc      	cmp	r4, r7
  4094d6:	6050      	str	r0, [r2, #4]
  4094d8:	6019      	str	r1, [r3, #0]
  4094da:	d017      	beq.n	40950c <_malloc_r+0x2d8>
  4094dc:	f1b8 0f0f 	cmp.w	r8, #15
  4094e0:	f240 80fb 	bls.w	4096da <_malloc_r+0x4a6>
  4094e4:	6860      	ldr	r0, [r4, #4]
  4094e6:	f1a8 020c 	sub.w	r2, r8, #12
  4094ea:	f022 0207 	bic.w	r2, r2, #7
  4094ee:	eb04 0e02 	add.w	lr, r4, r2
  4094f2:	f000 0001 	and.w	r0, r0, #1
  4094f6:	f04f 0c05 	mov.w	ip, #5
  4094fa:	4310      	orrs	r0, r2
  4094fc:	2a0f      	cmp	r2, #15
  4094fe:	6060      	str	r0, [r4, #4]
  409500:	f8ce c004 	str.w	ip, [lr, #4]
  409504:	f8ce c008 	str.w	ip, [lr, #8]
  409508:	f200 8117 	bhi.w	40973a <_malloc_r+0x506>
  40950c:	4b1d      	ldr	r3, [pc, #116]	; (409584 <_malloc_r+0x350>)
  40950e:	68bc      	ldr	r4, [r7, #8]
  409510:	681a      	ldr	r2, [r3, #0]
  409512:	4291      	cmp	r1, r2
  409514:	bf88      	it	hi
  409516:	6019      	strhi	r1, [r3, #0]
  409518:	4b1b      	ldr	r3, [pc, #108]	; (409588 <_malloc_r+0x354>)
  40951a:	681a      	ldr	r2, [r3, #0]
  40951c:	4291      	cmp	r1, r2
  40951e:	6862      	ldr	r2, [r4, #4]
  409520:	bf88      	it	hi
  409522:	6019      	strhi	r1, [r3, #0]
  409524:	f022 0203 	bic.w	r2, r2, #3
  409528:	4296      	cmp	r6, r2
  40952a:	eba2 0306 	sub.w	r3, r2, r6
  40952e:	d801      	bhi.n	409534 <_malloc_r+0x300>
  409530:	2b0f      	cmp	r3, #15
  409532:	dc04      	bgt.n	40953e <_malloc_r+0x30a>
  409534:	4628      	mov	r0, r5
  409536:	f000 f9fd 	bl	409934 <__malloc_unlock>
  40953a:	2400      	movs	r4, #0
  40953c:	e740      	b.n	4093c0 <_malloc_r+0x18c>
  40953e:	19a2      	adds	r2, r4, r6
  409540:	f043 0301 	orr.w	r3, r3, #1
  409544:	f046 0601 	orr.w	r6, r6, #1
  409548:	6066      	str	r6, [r4, #4]
  40954a:	4628      	mov	r0, r5
  40954c:	60ba      	str	r2, [r7, #8]
  40954e:	6053      	str	r3, [r2, #4]
  409550:	f000 f9f0 	bl	409934 <__malloc_unlock>
  409554:	3408      	adds	r4, #8
  409556:	4620      	mov	r0, r4
  409558:	b003      	add	sp, #12
  40955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40955e:	2b14      	cmp	r3, #20
  409560:	d971      	bls.n	409646 <_malloc_r+0x412>
  409562:	2b54      	cmp	r3, #84	; 0x54
  409564:	f200 80a3 	bhi.w	4096ae <_malloc_r+0x47a>
  409568:	0b33      	lsrs	r3, r6, #12
  40956a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40956e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  409572:	00c3      	lsls	r3, r0, #3
  409574:	e680      	b.n	409278 <_malloc_r+0x44>
  409576:	bf00      	nop
  409578:	204005d0 	.word	0x204005d0
  40957c:	20401e58 	.word	0x20401e58
  409580:	20401e28 	.word	0x20401e28
  409584:	20401e50 	.word	0x20401e50
  409588:	20401e54 	.word	0x20401e54
  40958c:	204005d8 	.word	0x204005d8
  409590:	204009d8 	.word	0x204009d8
  409594:	0a5a      	lsrs	r2, r3, #9
  409596:	2a04      	cmp	r2, #4
  409598:	d95b      	bls.n	409652 <_malloc_r+0x41e>
  40959a:	2a14      	cmp	r2, #20
  40959c:	f200 80ae 	bhi.w	4096fc <_malloc_r+0x4c8>
  4095a0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4095a4:	00c9      	lsls	r1, r1, #3
  4095a6:	325b      	adds	r2, #91	; 0x5b
  4095a8:	eb07 0c01 	add.w	ip, r7, r1
  4095ac:	5879      	ldr	r1, [r7, r1]
  4095ae:	f1ac 0c08 	sub.w	ip, ip, #8
  4095b2:	458c      	cmp	ip, r1
  4095b4:	f000 8088 	beq.w	4096c8 <_malloc_r+0x494>
  4095b8:	684a      	ldr	r2, [r1, #4]
  4095ba:	f022 0203 	bic.w	r2, r2, #3
  4095be:	4293      	cmp	r3, r2
  4095c0:	d273      	bcs.n	4096aa <_malloc_r+0x476>
  4095c2:	6889      	ldr	r1, [r1, #8]
  4095c4:	458c      	cmp	ip, r1
  4095c6:	d1f7      	bne.n	4095b8 <_malloc_r+0x384>
  4095c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4095cc:	687b      	ldr	r3, [r7, #4]
  4095ce:	60e2      	str	r2, [r4, #12]
  4095d0:	f8c4 c008 	str.w	ip, [r4, #8]
  4095d4:	6094      	str	r4, [r2, #8]
  4095d6:	f8cc 400c 	str.w	r4, [ip, #12]
  4095da:	e68f      	b.n	4092fc <_malloc_r+0xc8>
  4095dc:	19a1      	adds	r1, r4, r6
  4095de:	f046 0c01 	orr.w	ip, r6, #1
  4095e2:	f042 0601 	orr.w	r6, r2, #1
  4095e6:	f8c4 c004 	str.w	ip, [r4, #4]
  4095ea:	4628      	mov	r0, r5
  4095ec:	6179      	str	r1, [r7, #20]
  4095ee:	6139      	str	r1, [r7, #16]
  4095f0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4095f4:	f8c1 e008 	str.w	lr, [r1, #8]
  4095f8:	604e      	str	r6, [r1, #4]
  4095fa:	50e2      	str	r2, [r4, r3]
  4095fc:	f000 f99a 	bl	409934 <__malloc_unlock>
  409600:	3408      	adds	r4, #8
  409602:	e6dd      	b.n	4093c0 <_malloc_r+0x18c>
  409604:	687b      	ldr	r3, [r7, #4]
  409606:	e679      	b.n	4092fc <_malloc_r+0xc8>
  409608:	f108 0801 	add.w	r8, r8, #1
  40960c:	f018 0f03 	tst.w	r8, #3
  409610:	f10c 0c08 	add.w	ip, ip, #8
  409614:	f47f ae85 	bne.w	409322 <_malloc_r+0xee>
  409618:	e02d      	b.n	409676 <_malloc_r+0x442>
  40961a:	68dc      	ldr	r4, [r3, #12]
  40961c:	42a3      	cmp	r3, r4
  40961e:	bf08      	it	eq
  409620:	3002      	addeq	r0, #2
  409622:	f43f ae3e 	beq.w	4092a2 <_malloc_r+0x6e>
  409626:	e6bb      	b.n	4093a0 <_malloc_r+0x16c>
  409628:	4419      	add	r1, r3
  40962a:	461c      	mov	r4, r3
  40962c:	684a      	ldr	r2, [r1, #4]
  40962e:	68db      	ldr	r3, [r3, #12]
  409630:	f854 6f08 	ldr.w	r6, [r4, #8]!
  409634:	f042 0201 	orr.w	r2, r2, #1
  409638:	604a      	str	r2, [r1, #4]
  40963a:	4628      	mov	r0, r5
  40963c:	60f3      	str	r3, [r6, #12]
  40963e:	609e      	str	r6, [r3, #8]
  409640:	f000 f978 	bl	409934 <__malloc_unlock>
  409644:	e6bc      	b.n	4093c0 <_malloc_r+0x18c>
  409646:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40964a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40964e:	00c3      	lsls	r3, r0, #3
  409650:	e612      	b.n	409278 <_malloc_r+0x44>
  409652:	099a      	lsrs	r2, r3, #6
  409654:	f102 0139 	add.w	r1, r2, #57	; 0x39
  409658:	00c9      	lsls	r1, r1, #3
  40965a:	3238      	adds	r2, #56	; 0x38
  40965c:	e7a4      	b.n	4095a8 <_malloc_r+0x374>
  40965e:	42bc      	cmp	r4, r7
  409660:	d054      	beq.n	40970c <_malloc_r+0x4d8>
  409662:	68bc      	ldr	r4, [r7, #8]
  409664:	6862      	ldr	r2, [r4, #4]
  409666:	f022 0203 	bic.w	r2, r2, #3
  40966a:	e75d      	b.n	409528 <_malloc_r+0x2f4>
  40966c:	f859 3908 	ldr.w	r3, [r9], #-8
  409670:	4599      	cmp	r9, r3
  409672:	f040 8086 	bne.w	409782 <_malloc_r+0x54e>
  409676:	f010 0f03 	tst.w	r0, #3
  40967a:	f100 30ff 	add.w	r0, r0, #4294967295
  40967e:	d1f5      	bne.n	40966c <_malloc_r+0x438>
  409680:	687b      	ldr	r3, [r7, #4]
  409682:	ea23 0304 	bic.w	r3, r3, r4
  409686:	607b      	str	r3, [r7, #4]
  409688:	0064      	lsls	r4, r4, #1
  40968a:	429c      	cmp	r4, r3
  40968c:	f63f aec7 	bhi.w	40941e <_malloc_r+0x1ea>
  409690:	2c00      	cmp	r4, #0
  409692:	f43f aec4 	beq.w	40941e <_malloc_r+0x1ea>
  409696:	421c      	tst	r4, r3
  409698:	4640      	mov	r0, r8
  40969a:	f47f ae3e 	bne.w	40931a <_malloc_r+0xe6>
  40969e:	0064      	lsls	r4, r4, #1
  4096a0:	421c      	tst	r4, r3
  4096a2:	f100 0004 	add.w	r0, r0, #4
  4096a6:	d0fa      	beq.n	40969e <_malloc_r+0x46a>
  4096a8:	e637      	b.n	40931a <_malloc_r+0xe6>
  4096aa:	468c      	mov	ip, r1
  4096ac:	e78c      	b.n	4095c8 <_malloc_r+0x394>
  4096ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4096b2:	d815      	bhi.n	4096e0 <_malloc_r+0x4ac>
  4096b4:	0bf3      	lsrs	r3, r6, #15
  4096b6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4096ba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4096be:	00c3      	lsls	r3, r0, #3
  4096c0:	e5da      	b.n	409278 <_malloc_r+0x44>
  4096c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4096c6:	e6ed      	b.n	4094a4 <_malloc_r+0x270>
  4096c8:	687b      	ldr	r3, [r7, #4]
  4096ca:	1092      	asrs	r2, r2, #2
  4096cc:	2101      	movs	r1, #1
  4096ce:	fa01 f202 	lsl.w	r2, r1, r2
  4096d2:	4313      	orrs	r3, r2
  4096d4:	607b      	str	r3, [r7, #4]
  4096d6:	4662      	mov	r2, ip
  4096d8:	e779      	b.n	4095ce <_malloc_r+0x39a>
  4096da:	2301      	movs	r3, #1
  4096dc:	6053      	str	r3, [r2, #4]
  4096de:	e729      	b.n	409534 <_malloc_r+0x300>
  4096e0:	f240 5254 	movw	r2, #1364	; 0x554
  4096e4:	4293      	cmp	r3, r2
  4096e6:	d822      	bhi.n	40972e <_malloc_r+0x4fa>
  4096e8:	0cb3      	lsrs	r3, r6, #18
  4096ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4096ee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4096f2:	00c3      	lsls	r3, r0, #3
  4096f4:	e5c0      	b.n	409278 <_malloc_r+0x44>
  4096f6:	f103 0b10 	add.w	fp, r3, #16
  4096fa:	e6ae      	b.n	40945a <_malloc_r+0x226>
  4096fc:	2a54      	cmp	r2, #84	; 0x54
  4096fe:	d829      	bhi.n	409754 <_malloc_r+0x520>
  409700:	0b1a      	lsrs	r2, r3, #12
  409702:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  409706:	00c9      	lsls	r1, r1, #3
  409708:	326e      	adds	r2, #110	; 0x6e
  40970a:	e74d      	b.n	4095a8 <_malloc_r+0x374>
  40970c:	4b20      	ldr	r3, [pc, #128]	; (409790 <_malloc_r+0x55c>)
  40970e:	6819      	ldr	r1, [r3, #0]
  409710:	4459      	add	r1, fp
  409712:	6019      	str	r1, [r3, #0]
  409714:	e6b2      	b.n	40947c <_malloc_r+0x248>
  409716:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40971a:	2800      	cmp	r0, #0
  40971c:	f47f aeae 	bne.w	40947c <_malloc_r+0x248>
  409720:	eb08 030b 	add.w	r3, r8, fp
  409724:	68ba      	ldr	r2, [r7, #8]
  409726:	f043 0301 	orr.w	r3, r3, #1
  40972a:	6053      	str	r3, [r2, #4]
  40972c:	e6ee      	b.n	40950c <_malloc_r+0x2d8>
  40972e:	207f      	movs	r0, #127	; 0x7f
  409730:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409734:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409738:	e59e      	b.n	409278 <_malloc_r+0x44>
  40973a:	f104 0108 	add.w	r1, r4, #8
  40973e:	4628      	mov	r0, r5
  409740:	9300      	str	r3, [sp, #0]
  409742:	f7ff fa59 	bl	408bf8 <_free_r>
  409746:	9b00      	ldr	r3, [sp, #0]
  409748:	6819      	ldr	r1, [r3, #0]
  40974a:	e6df      	b.n	40950c <_malloc_r+0x2d8>
  40974c:	2001      	movs	r0, #1
  40974e:	f04f 0900 	mov.w	r9, #0
  409752:	e6bc      	b.n	4094ce <_malloc_r+0x29a>
  409754:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409758:	d805      	bhi.n	409766 <_malloc_r+0x532>
  40975a:	0bda      	lsrs	r2, r3, #15
  40975c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409760:	00c9      	lsls	r1, r1, #3
  409762:	3277      	adds	r2, #119	; 0x77
  409764:	e720      	b.n	4095a8 <_malloc_r+0x374>
  409766:	f240 5154 	movw	r1, #1364	; 0x554
  40976a:	428a      	cmp	r2, r1
  40976c:	d805      	bhi.n	40977a <_malloc_r+0x546>
  40976e:	0c9a      	lsrs	r2, r3, #18
  409770:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409774:	00c9      	lsls	r1, r1, #3
  409776:	327c      	adds	r2, #124	; 0x7c
  409778:	e716      	b.n	4095a8 <_malloc_r+0x374>
  40977a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40977e:	227e      	movs	r2, #126	; 0x7e
  409780:	e712      	b.n	4095a8 <_malloc_r+0x374>
  409782:	687b      	ldr	r3, [r7, #4]
  409784:	e780      	b.n	409688 <_malloc_r+0x454>
  409786:	08f0      	lsrs	r0, r6, #3
  409788:	f106 0308 	add.w	r3, r6, #8
  40978c:	e600      	b.n	409390 <_malloc_r+0x15c>
  40978e:	bf00      	nop
  409790:	20401e28 	.word	0x20401e28

00409794 <__ascii_mbtowc>:
  409794:	b082      	sub	sp, #8
  409796:	b149      	cbz	r1, 4097ac <__ascii_mbtowc+0x18>
  409798:	b15a      	cbz	r2, 4097b2 <__ascii_mbtowc+0x1e>
  40979a:	b16b      	cbz	r3, 4097b8 <__ascii_mbtowc+0x24>
  40979c:	7813      	ldrb	r3, [r2, #0]
  40979e:	600b      	str	r3, [r1, #0]
  4097a0:	7812      	ldrb	r2, [r2, #0]
  4097a2:	1c10      	adds	r0, r2, #0
  4097a4:	bf18      	it	ne
  4097a6:	2001      	movne	r0, #1
  4097a8:	b002      	add	sp, #8
  4097aa:	4770      	bx	lr
  4097ac:	a901      	add	r1, sp, #4
  4097ae:	2a00      	cmp	r2, #0
  4097b0:	d1f3      	bne.n	40979a <__ascii_mbtowc+0x6>
  4097b2:	4610      	mov	r0, r2
  4097b4:	b002      	add	sp, #8
  4097b6:	4770      	bx	lr
  4097b8:	f06f 0001 	mvn.w	r0, #1
  4097bc:	e7f4      	b.n	4097a8 <__ascii_mbtowc+0x14>
  4097be:	bf00      	nop

004097c0 <memchr>:
  4097c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4097c4:	2a10      	cmp	r2, #16
  4097c6:	db2b      	blt.n	409820 <memchr+0x60>
  4097c8:	f010 0f07 	tst.w	r0, #7
  4097cc:	d008      	beq.n	4097e0 <memchr+0x20>
  4097ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4097d2:	3a01      	subs	r2, #1
  4097d4:	428b      	cmp	r3, r1
  4097d6:	d02d      	beq.n	409834 <memchr+0x74>
  4097d8:	f010 0f07 	tst.w	r0, #7
  4097dc:	b342      	cbz	r2, 409830 <memchr+0x70>
  4097de:	d1f6      	bne.n	4097ce <memchr+0xe>
  4097e0:	b4f0      	push	{r4, r5, r6, r7}
  4097e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4097e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4097ea:	f022 0407 	bic.w	r4, r2, #7
  4097ee:	f07f 0700 	mvns.w	r7, #0
  4097f2:	2300      	movs	r3, #0
  4097f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4097f8:	3c08      	subs	r4, #8
  4097fa:	ea85 0501 	eor.w	r5, r5, r1
  4097fe:	ea86 0601 	eor.w	r6, r6, r1
  409802:	fa85 f547 	uadd8	r5, r5, r7
  409806:	faa3 f587 	sel	r5, r3, r7
  40980a:	fa86 f647 	uadd8	r6, r6, r7
  40980e:	faa5 f687 	sel	r6, r5, r7
  409812:	b98e      	cbnz	r6, 409838 <memchr+0x78>
  409814:	d1ee      	bne.n	4097f4 <memchr+0x34>
  409816:	bcf0      	pop	{r4, r5, r6, r7}
  409818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40981c:	f002 0207 	and.w	r2, r2, #7
  409820:	b132      	cbz	r2, 409830 <memchr+0x70>
  409822:	f810 3b01 	ldrb.w	r3, [r0], #1
  409826:	3a01      	subs	r2, #1
  409828:	ea83 0301 	eor.w	r3, r3, r1
  40982c:	b113      	cbz	r3, 409834 <memchr+0x74>
  40982e:	d1f8      	bne.n	409822 <memchr+0x62>
  409830:	2000      	movs	r0, #0
  409832:	4770      	bx	lr
  409834:	3801      	subs	r0, #1
  409836:	4770      	bx	lr
  409838:	2d00      	cmp	r5, #0
  40983a:	bf06      	itte	eq
  40983c:	4635      	moveq	r5, r6
  40983e:	3803      	subeq	r0, #3
  409840:	3807      	subne	r0, #7
  409842:	f015 0f01 	tst.w	r5, #1
  409846:	d107      	bne.n	409858 <memchr+0x98>
  409848:	3001      	adds	r0, #1
  40984a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40984e:	bf02      	ittt	eq
  409850:	3001      	addeq	r0, #1
  409852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409856:	3001      	addeq	r0, #1
  409858:	bcf0      	pop	{r4, r5, r6, r7}
  40985a:	3801      	subs	r0, #1
  40985c:	4770      	bx	lr
  40985e:	bf00      	nop

00409860 <memmove>:
  409860:	4288      	cmp	r0, r1
  409862:	b5f0      	push	{r4, r5, r6, r7, lr}
  409864:	d90d      	bls.n	409882 <memmove+0x22>
  409866:	188b      	adds	r3, r1, r2
  409868:	4298      	cmp	r0, r3
  40986a:	d20a      	bcs.n	409882 <memmove+0x22>
  40986c:	1884      	adds	r4, r0, r2
  40986e:	2a00      	cmp	r2, #0
  409870:	d051      	beq.n	409916 <memmove+0xb6>
  409872:	4622      	mov	r2, r4
  409874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409878:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40987c:	4299      	cmp	r1, r3
  40987e:	d1f9      	bne.n	409874 <memmove+0x14>
  409880:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409882:	2a0f      	cmp	r2, #15
  409884:	d948      	bls.n	409918 <memmove+0xb8>
  409886:	ea41 0300 	orr.w	r3, r1, r0
  40988a:	079b      	lsls	r3, r3, #30
  40988c:	d146      	bne.n	40991c <memmove+0xbc>
  40988e:	f100 0410 	add.w	r4, r0, #16
  409892:	f101 0310 	add.w	r3, r1, #16
  409896:	4615      	mov	r5, r2
  409898:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40989c:	f844 6c10 	str.w	r6, [r4, #-16]
  4098a0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4098a4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4098a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4098ac:	f844 6c08 	str.w	r6, [r4, #-8]
  4098b0:	3d10      	subs	r5, #16
  4098b2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4098b6:	f844 6c04 	str.w	r6, [r4, #-4]
  4098ba:	2d0f      	cmp	r5, #15
  4098bc:	f103 0310 	add.w	r3, r3, #16
  4098c0:	f104 0410 	add.w	r4, r4, #16
  4098c4:	d8e8      	bhi.n	409898 <memmove+0x38>
  4098c6:	f1a2 0310 	sub.w	r3, r2, #16
  4098ca:	f023 030f 	bic.w	r3, r3, #15
  4098ce:	f002 0e0f 	and.w	lr, r2, #15
  4098d2:	3310      	adds	r3, #16
  4098d4:	f1be 0f03 	cmp.w	lr, #3
  4098d8:	4419      	add	r1, r3
  4098da:	4403      	add	r3, r0
  4098dc:	d921      	bls.n	409922 <memmove+0xc2>
  4098de:	1f1e      	subs	r6, r3, #4
  4098e0:	460d      	mov	r5, r1
  4098e2:	4674      	mov	r4, lr
  4098e4:	3c04      	subs	r4, #4
  4098e6:	f855 7b04 	ldr.w	r7, [r5], #4
  4098ea:	f846 7f04 	str.w	r7, [r6, #4]!
  4098ee:	2c03      	cmp	r4, #3
  4098f0:	d8f8      	bhi.n	4098e4 <memmove+0x84>
  4098f2:	f1ae 0404 	sub.w	r4, lr, #4
  4098f6:	f024 0403 	bic.w	r4, r4, #3
  4098fa:	3404      	adds	r4, #4
  4098fc:	4421      	add	r1, r4
  4098fe:	4423      	add	r3, r4
  409900:	f002 0203 	and.w	r2, r2, #3
  409904:	b162      	cbz	r2, 409920 <memmove+0xc0>
  409906:	3b01      	subs	r3, #1
  409908:	440a      	add	r2, r1
  40990a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40990e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409912:	428a      	cmp	r2, r1
  409914:	d1f9      	bne.n	40990a <memmove+0xaa>
  409916:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409918:	4603      	mov	r3, r0
  40991a:	e7f3      	b.n	409904 <memmove+0xa4>
  40991c:	4603      	mov	r3, r0
  40991e:	e7f2      	b.n	409906 <memmove+0xa6>
  409920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409922:	4672      	mov	r2, lr
  409924:	e7ee      	b.n	409904 <memmove+0xa4>
  409926:	bf00      	nop

00409928 <__malloc_lock>:
  409928:	4801      	ldr	r0, [pc, #4]	; (409930 <__malloc_lock+0x8>)
  40992a:	f7ff bbff 	b.w	40912c <__retarget_lock_acquire_recursive>
  40992e:	bf00      	nop
  409930:	204049e0 	.word	0x204049e0

00409934 <__malloc_unlock>:
  409934:	4801      	ldr	r0, [pc, #4]	; (40993c <__malloc_unlock+0x8>)
  409936:	f7ff bbfb 	b.w	409130 <__retarget_lock_release_recursive>
  40993a:	bf00      	nop
  40993c:	204049e0 	.word	0x204049e0

00409940 <_realloc_r>:
  409940:	2900      	cmp	r1, #0
  409942:	f000 8095 	beq.w	409a70 <_realloc_r+0x130>
  409946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40994a:	460d      	mov	r5, r1
  40994c:	4616      	mov	r6, r2
  40994e:	b083      	sub	sp, #12
  409950:	4680      	mov	r8, r0
  409952:	f106 070b 	add.w	r7, r6, #11
  409956:	f7ff ffe7 	bl	409928 <__malloc_lock>
  40995a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40995e:	2f16      	cmp	r7, #22
  409960:	f02e 0403 	bic.w	r4, lr, #3
  409964:	f1a5 0908 	sub.w	r9, r5, #8
  409968:	d83c      	bhi.n	4099e4 <_realloc_r+0xa4>
  40996a:	2210      	movs	r2, #16
  40996c:	4617      	mov	r7, r2
  40996e:	42be      	cmp	r6, r7
  409970:	d83d      	bhi.n	4099ee <_realloc_r+0xae>
  409972:	4294      	cmp	r4, r2
  409974:	da43      	bge.n	4099fe <_realloc_r+0xbe>
  409976:	4bc4      	ldr	r3, [pc, #784]	; (409c88 <_realloc_r+0x348>)
  409978:	6899      	ldr	r1, [r3, #8]
  40997a:	eb09 0004 	add.w	r0, r9, r4
  40997e:	4288      	cmp	r0, r1
  409980:	f000 80b4 	beq.w	409aec <_realloc_r+0x1ac>
  409984:	6843      	ldr	r3, [r0, #4]
  409986:	f023 0101 	bic.w	r1, r3, #1
  40998a:	4401      	add	r1, r0
  40998c:	6849      	ldr	r1, [r1, #4]
  40998e:	07c9      	lsls	r1, r1, #31
  409990:	d54c      	bpl.n	409a2c <_realloc_r+0xec>
  409992:	f01e 0f01 	tst.w	lr, #1
  409996:	f000 809b 	beq.w	409ad0 <_realloc_r+0x190>
  40999a:	4631      	mov	r1, r6
  40999c:	4640      	mov	r0, r8
  40999e:	f7ff fc49 	bl	409234 <_malloc_r>
  4099a2:	4606      	mov	r6, r0
  4099a4:	2800      	cmp	r0, #0
  4099a6:	d03a      	beq.n	409a1e <_realloc_r+0xde>
  4099a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4099ac:	f023 0301 	bic.w	r3, r3, #1
  4099b0:	444b      	add	r3, r9
  4099b2:	f1a0 0208 	sub.w	r2, r0, #8
  4099b6:	429a      	cmp	r2, r3
  4099b8:	f000 8121 	beq.w	409bfe <_realloc_r+0x2be>
  4099bc:	1f22      	subs	r2, r4, #4
  4099be:	2a24      	cmp	r2, #36	; 0x24
  4099c0:	f200 8107 	bhi.w	409bd2 <_realloc_r+0x292>
  4099c4:	2a13      	cmp	r2, #19
  4099c6:	f200 80db 	bhi.w	409b80 <_realloc_r+0x240>
  4099ca:	4603      	mov	r3, r0
  4099cc:	462a      	mov	r2, r5
  4099ce:	6811      	ldr	r1, [r2, #0]
  4099d0:	6019      	str	r1, [r3, #0]
  4099d2:	6851      	ldr	r1, [r2, #4]
  4099d4:	6059      	str	r1, [r3, #4]
  4099d6:	6892      	ldr	r2, [r2, #8]
  4099d8:	609a      	str	r2, [r3, #8]
  4099da:	4629      	mov	r1, r5
  4099dc:	4640      	mov	r0, r8
  4099de:	f7ff f90b 	bl	408bf8 <_free_r>
  4099e2:	e01c      	b.n	409a1e <_realloc_r+0xde>
  4099e4:	f027 0707 	bic.w	r7, r7, #7
  4099e8:	2f00      	cmp	r7, #0
  4099ea:	463a      	mov	r2, r7
  4099ec:	dabf      	bge.n	40996e <_realloc_r+0x2e>
  4099ee:	2600      	movs	r6, #0
  4099f0:	230c      	movs	r3, #12
  4099f2:	4630      	mov	r0, r6
  4099f4:	f8c8 3000 	str.w	r3, [r8]
  4099f8:	b003      	add	sp, #12
  4099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099fe:	462e      	mov	r6, r5
  409a00:	1be3      	subs	r3, r4, r7
  409a02:	2b0f      	cmp	r3, #15
  409a04:	d81e      	bhi.n	409a44 <_realloc_r+0x104>
  409a06:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409a0a:	f003 0301 	and.w	r3, r3, #1
  409a0e:	4323      	orrs	r3, r4
  409a10:	444c      	add	r4, r9
  409a12:	f8c9 3004 	str.w	r3, [r9, #4]
  409a16:	6863      	ldr	r3, [r4, #4]
  409a18:	f043 0301 	orr.w	r3, r3, #1
  409a1c:	6063      	str	r3, [r4, #4]
  409a1e:	4640      	mov	r0, r8
  409a20:	f7ff ff88 	bl	409934 <__malloc_unlock>
  409a24:	4630      	mov	r0, r6
  409a26:	b003      	add	sp, #12
  409a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a2c:	f023 0303 	bic.w	r3, r3, #3
  409a30:	18e1      	adds	r1, r4, r3
  409a32:	4291      	cmp	r1, r2
  409a34:	db1f      	blt.n	409a76 <_realloc_r+0x136>
  409a36:	68c3      	ldr	r3, [r0, #12]
  409a38:	6882      	ldr	r2, [r0, #8]
  409a3a:	462e      	mov	r6, r5
  409a3c:	60d3      	str	r3, [r2, #12]
  409a3e:	460c      	mov	r4, r1
  409a40:	609a      	str	r2, [r3, #8]
  409a42:	e7dd      	b.n	409a00 <_realloc_r+0xc0>
  409a44:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409a48:	eb09 0107 	add.w	r1, r9, r7
  409a4c:	f002 0201 	and.w	r2, r2, #1
  409a50:	444c      	add	r4, r9
  409a52:	f043 0301 	orr.w	r3, r3, #1
  409a56:	4317      	orrs	r7, r2
  409a58:	f8c9 7004 	str.w	r7, [r9, #4]
  409a5c:	604b      	str	r3, [r1, #4]
  409a5e:	6863      	ldr	r3, [r4, #4]
  409a60:	f043 0301 	orr.w	r3, r3, #1
  409a64:	3108      	adds	r1, #8
  409a66:	6063      	str	r3, [r4, #4]
  409a68:	4640      	mov	r0, r8
  409a6a:	f7ff f8c5 	bl	408bf8 <_free_r>
  409a6e:	e7d6      	b.n	409a1e <_realloc_r+0xde>
  409a70:	4611      	mov	r1, r2
  409a72:	f7ff bbdf 	b.w	409234 <_malloc_r>
  409a76:	f01e 0f01 	tst.w	lr, #1
  409a7a:	d18e      	bne.n	40999a <_realloc_r+0x5a>
  409a7c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409a80:	eba9 0a01 	sub.w	sl, r9, r1
  409a84:	f8da 1004 	ldr.w	r1, [sl, #4]
  409a88:	f021 0103 	bic.w	r1, r1, #3
  409a8c:	440b      	add	r3, r1
  409a8e:	4423      	add	r3, r4
  409a90:	4293      	cmp	r3, r2
  409a92:	db25      	blt.n	409ae0 <_realloc_r+0x1a0>
  409a94:	68c2      	ldr	r2, [r0, #12]
  409a96:	6881      	ldr	r1, [r0, #8]
  409a98:	4656      	mov	r6, sl
  409a9a:	60ca      	str	r2, [r1, #12]
  409a9c:	6091      	str	r1, [r2, #8]
  409a9e:	f8da 100c 	ldr.w	r1, [sl, #12]
  409aa2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409aa6:	1f22      	subs	r2, r4, #4
  409aa8:	2a24      	cmp	r2, #36	; 0x24
  409aaa:	60c1      	str	r1, [r0, #12]
  409aac:	6088      	str	r0, [r1, #8]
  409aae:	f200 8094 	bhi.w	409bda <_realloc_r+0x29a>
  409ab2:	2a13      	cmp	r2, #19
  409ab4:	d96f      	bls.n	409b96 <_realloc_r+0x256>
  409ab6:	6829      	ldr	r1, [r5, #0]
  409ab8:	f8ca 1008 	str.w	r1, [sl, #8]
  409abc:	6869      	ldr	r1, [r5, #4]
  409abe:	f8ca 100c 	str.w	r1, [sl, #12]
  409ac2:	2a1b      	cmp	r2, #27
  409ac4:	f200 80a2 	bhi.w	409c0c <_realloc_r+0x2cc>
  409ac8:	3508      	adds	r5, #8
  409aca:	f10a 0210 	add.w	r2, sl, #16
  409ace:	e063      	b.n	409b98 <_realloc_r+0x258>
  409ad0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409ad4:	eba9 0a03 	sub.w	sl, r9, r3
  409ad8:	f8da 1004 	ldr.w	r1, [sl, #4]
  409adc:	f021 0103 	bic.w	r1, r1, #3
  409ae0:	1863      	adds	r3, r4, r1
  409ae2:	4293      	cmp	r3, r2
  409ae4:	f6ff af59 	blt.w	40999a <_realloc_r+0x5a>
  409ae8:	4656      	mov	r6, sl
  409aea:	e7d8      	b.n	409a9e <_realloc_r+0x15e>
  409aec:	6841      	ldr	r1, [r0, #4]
  409aee:	f021 0b03 	bic.w	fp, r1, #3
  409af2:	44a3      	add	fp, r4
  409af4:	f107 0010 	add.w	r0, r7, #16
  409af8:	4583      	cmp	fp, r0
  409afa:	da56      	bge.n	409baa <_realloc_r+0x26a>
  409afc:	f01e 0f01 	tst.w	lr, #1
  409b00:	f47f af4b 	bne.w	40999a <_realloc_r+0x5a>
  409b04:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409b08:	eba9 0a01 	sub.w	sl, r9, r1
  409b0c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409b10:	f021 0103 	bic.w	r1, r1, #3
  409b14:	448b      	add	fp, r1
  409b16:	4558      	cmp	r0, fp
  409b18:	dce2      	bgt.n	409ae0 <_realloc_r+0x1a0>
  409b1a:	4656      	mov	r6, sl
  409b1c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409b20:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409b24:	1f22      	subs	r2, r4, #4
  409b26:	2a24      	cmp	r2, #36	; 0x24
  409b28:	60c1      	str	r1, [r0, #12]
  409b2a:	6088      	str	r0, [r1, #8]
  409b2c:	f200 808f 	bhi.w	409c4e <_realloc_r+0x30e>
  409b30:	2a13      	cmp	r2, #19
  409b32:	f240 808a 	bls.w	409c4a <_realloc_r+0x30a>
  409b36:	6829      	ldr	r1, [r5, #0]
  409b38:	f8ca 1008 	str.w	r1, [sl, #8]
  409b3c:	6869      	ldr	r1, [r5, #4]
  409b3e:	f8ca 100c 	str.w	r1, [sl, #12]
  409b42:	2a1b      	cmp	r2, #27
  409b44:	f200 808a 	bhi.w	409c5c <_realloc_r+0x31c>
  409b48:	3508      	adds	r5, #8
  409b4a:	f10a 0210 	add.w	r2, sl, #16
  409b4e:	6829      	ldr	r1, [r5, #0]
  409b50:	6011      	str	r1, [r2, #0]
  409b52:	6869      	ldr	r1, [r5, #4]
  409b54:	6051      	str	r1, [r2, #4]
  409b56:	68a9      	ldr	r1, [r5, #8]
  409b58:	6091      	str	r1, [r2, #8]
  409b5a:	eb0a 0107 	add.w	r1, sl, r7
  409b5e:	ebab 0207 	sub.w	r2, fp, r7
  409b62:	f042 0201 	orr.w	r2, r2, #1
  409b66:	6099      	str	r1, [r3, #8]
  409b68:	604a      	str	r2, [r1, #4]
  409b6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  409b6e:	f003 0301 	and.w	r3, r3, #1
  409b72:	431f      	orrs	r7, r3
  409b74:	4640      	mov	r0, r8
  409b76:	f8ca 7004 	str.w	r7, [sl, #4]
  409b7a:	f7ff fedb 	bl	409934 <__malloc_unlock>
  409b7e:	e751      	b.n	409a24 <_realloc_r+0xe4>
  409b80:	682b      	ldr	r3, [r5, #0]
  409b82:	6003      	str	r3, [r0, #0]
  409b84:	686b      	ldr	r3, [r5, #4]
  409b86:	6043      	str	r3, [r0, #4]
  409b88:	2a1b      	cmp	r2, #27
  409b8a:	d82d      	bhi.n	409be8 <_realloc_r+0x2a8>
  409b8c:	f100 0308 	add.w	r3, r0, #8
  409b90:	f105 0208 	add.w	r2, r5, #8
  409b94:	e71b      	b.n	4099ce <_realloc_r+0x8e>
  409b96:	4632      	mov	r2, r6
  409b98:	6829      	ldr	r1, [r5, #0]
  409b9a:	6011      	str	r1, [r2, #0]
  409b9c:	6869      	ldr	r1, [r5, #4]
  409b9e:	6051      	str	r1, [r2, #4]
  409ba0:	68a9      	ldr	r1, [r5, #8]
  409ba2:	6091      	str	r1, [r2, #8]
  409ba4:	461c      	mov	r4, r3
  409ba6:	46d1      	mov	r9, sl
  409ba8:	e72a      	b.n	409a00 <_realloc_r+0xc0>
  409baa:	eb09 0107 	add.w	r1, r9, r7
  409bae:	ebab 0b07 	sub.w	fp, fp, r7
  409bb2:	f04b 0201 	orr.w	r2, fp, #1
  409bb6:	6099      	str	r1, [r3, #8]
  409bb8:	604a      	str	r2, [r1, #4]
  409bba:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409bbe:	f003 0301 	and.w	r3, r3, #1
  409bc2:	431f      	orrs	r7, r3
  409bc4:	4640      	mov	r0, r8
  409bc6:	f845 7c04 	str.w	r7, [r5, #-4]
  409bca:	f7ff feb3 	bl	409934 <__malloc_unlock>
  409bce:	462e      	mov	r6, r5
  409bd0:	e728      	b.n	409a24 <_realloc_r+0xe4>
  409bd2:	4629      	mov	r1, r5
  409bd4:	f7ff fe44 	bl	409860 <memmove>
  409bd8:	e6ff      	b.n	4099da <_realloc_r+0x9a>
  409bda:	4629      	mov	r1, r5
  409bdc:	4630      	mov	r0, r6
  409bde:	461c      	mov	r4, r3
  409be0:	46d1      	mov	r9, sl
  409be2:	f7ff fe3d 	bl	409860 <memmove>
  409be6:	e70b      	b.n	409a00 <_realloc_r+0xc0>
  409be8:	68ab      	ldr	r3, [r5, #8]
  409bea:	6083      	str	r3, [r0, #8]
  409bec:	68eb      	ldr	r3, [r5, #12]
  409bee:	60c3      	str	r3, [r0, #12]
  409bf0:	2a24      	cmp	r2, #36	; 0x24
  409bf2:	d017      	beq.n	409c24 <_realloc_r+0x2e4>
  409bf4:	f100 0310 	add.w	r3, r0, #16
  409bf8:	f105 0210 	add.w	r2, r5, #16
  409bfc:	e6e7      	b.n	4099ce <_realloc_r+0x8e>
  409bfe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409c02:	f023 0303 	bic.w	r3, r3, #3
  409c06:	441c      	add	r4, r3
  409c08:	462e      	mov	r6, r5
  409c0a:	e6f9      	b.n	409a00 <_realloc_r+0xc0>
  409c0c:	68a9      	ldr	r1, [r5, #8]
  409c0e:	f8ca 1010 	str.w	r1, [sl, #16]
  409c12:	68e9      	ldr	r1, [r5, #12]
  409c14:	f8ca 1014 	str.w	r1, [sl, #20]
  409c18:	2a24      	cmp	r2, #36	; 0x24
  409c1a:	d00c      	beq.n	409c36 <_realloc_r+0x2f6>
  409c1c:	3510      	adds	r5, #16
  409c1e:	f10a 0218 	add.w	r2, sl, #24
  409c22:	e7b9      	b.n	409b98 <_realloc_r+0x258>
  409c24:	692b      	ldr	r3, [r5, #16]
  409c26:	6103      	str	r3, [r0, #16]
  409c28:	696b      	ldr	r3, [r5, #20]
  409c2a:	6143      	str	r3, [r0, #20]
  409c2c:	f105 0218 	add.w	r2, r5, #24
  409c30:	f100 0318 	add.w	r3, r0, #24
  409c34:	e6cb      	b.n	4099ce <_realloc_r+0x8e>
  409c36:	692a      	ldr	r2, [r5, #16]
  409c38:	f8ca 2018 	str.w	r2, [sl, #24]
  409c3c:	696a      	ldr	r2, [r5, #20]
  409c3e:	f8ca 201c 	str.w	r2, [sl, #28]
  409c42:	3518      	adds	r5, #24
  409c44:	f10a 0220 	add.w	r2, sl, #32
  409c48:	e7a6      	b.n	409b98 <_realloc_r+0x258>
  409c4a:	4632      	mov	r2, r6
  409c4c:	e77f      	b.n	409b4e <_realloc_r+0x20e>
  409c4e:	4629      	mov	r1, r5
  409c50:	4630      	mov	r0, r6
  409c52:	9301      	str	r3, [sp, #4]
  409c54:	f7ff fe04 	bl	409860 <memmove>
  409c58:	9b01      	ldr	r3, [sp, #4]
  409c5a:	e77e      	b.n	409b5a <_realloc_r+0x21a>
  409c5c:	68a9      	ldr	r1, [r5, #8]
  409c5e:	f8ca 1010 	str.w	r1, [sl, #16]
  409c62:	68e9      	ldr	r1, [r5, #12]
  409c64:	f8ca 1014 	str.w	r1, [sl, #20]
  409c68:	2a24      	cmp	r2, #36	; 0x24
  409c6a:	d003      	beq.n	409c74 <_realloc_r+0x334>
  409c6c:	3510      	adds	r5, #16
  409c6e:	f10a 0218 	add.w	r2, sl, #24
  409c72:	e76c      	b.n	409b4e <_realloc_r+0x20e>
  409c74:	692a      	ldr	r2, [r5, #16]
  409c76:	f8ca 2018 	str.w	r2, [sl, #24]
  409c7a:	696a      	ldr	r2, [r5, #20]
  409c7c:	f8ca 201c 	str.w	r2, [sl, #28]
  409c80:	3518      	adds	r5, #24
  409c82:	f10a 0220 	add.w	r2, sl, #32
  409c86:	e762      	b.n	409b4e <_realloc_r+0x20e>
  409c88:	204005d0 	.word	0x204005d0

00409c8c <_sbrk_r>:
  409c8c:	b538      	push	{r3, r4, r5, lr}
  409c8e:	4c07      	ldr	r4, [pc, #28]	; (409cac <_sbrk_r+0x20>)
  409c90:	2300      	movs	r3, #0
  409c92:	4605      	mov	r5, r0
  409c94:	4608      	mov	r0, r1
  409c96:	6023      	str	r3, [r4, #0]
  409c98:	f7f7 f9b6 	bl	401008 <_sbrk>
  409c9c:	1c43      	adds	r3, r0, #1
  409c9e:	d000      	beq.n	409ca2 <_sbrk_r+0x16>
  409ca0:	bd38      	pop	{r3, r4, r5, pc}
  409ca2:	6823      	ldr	r3, [r4, #0]
  409ca4:	2b00      	cmp	r3, #0
  409ca6:	d0fb      	beq.n	409ca0 <_sbrk_r+0x14>
  409ca8:	602b      	str	r3, [r5, #0]
  409caa:	bd38      	pop	{r3, r4, r5, pc}
  409cac:	204049f4 	.word	0x204049f4

00409cb0 <__sread>:
  409cb0:	b510      	push	{r4, lr}
  409cb2:	460c      	mov	r4, r1
  409cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409cb8:	f000 f9f6 	bl	40a0a8 <_read_r>
  409cbc:	2800      	cmp	r0, #0
  409cbe:	db03      	blt.n	409cc8 <__sread+0x18>
  409cc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409cc2:	4403      	add	r3, r0
  409cc4:	6523      	str	r3, [r4, #80]	; 0x50
  409cc6:	bd10      	pop	{r4, pc}
  409cc8:	89a3      	ldrh	r3, [r4, #12]
  409cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409cce:	81a3      	strh	r3, [r4, #12]
  409cd0:	bd10      	pop	{r4, pc}
  409cd2:	bf00      	nop

00409cd4 <__swrite>:
  409cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cd8:	4616      	mov	r6, r2
  409cda:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409cde:	461f      	mov	r7, r3
  409ce0:	05d3      	lsls	r3, r2, #23
  409ce2:	460c      	mov	r4, r1
  409ce4:	4605      	mov	r5, r0
  409ce6:	d507      	bpl.n	409cf8 <__swrite+0x24>
  409ce8:	2200      	movs	r2, #0
  409cea:	2302      	movs	r3, #2
  409cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409cf0:	f000 f9c4 	bl	40a07c <_lseek_r>
  409cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409cfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409d00:	81a2      	strh	r2, [r4, #12]
  409d02:	463b      	mov	r3, r7
  409d04:	4632      	mov	r2, r6
  409d06:	4628      	mov	r0, r5
  409d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409d0c:	f000 b8a4 	b.w	409e58 <_write_r>

00409d10 <__sseek>:
  409d10:	b510      	push	{r4, lr}
  409d12:	460c      	mov	r4, r1
  409d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d18:	f000 f9b0 	bl	40a07c <_lseek_r>
  409d1c:	89a3      	ldrh	r3, [r4, #12]
  409d1e:	1c42      	adds	r2, r0, #1
  409d20:	bf0e      	itee	eq
  409d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409d2a:	6520      	strne	r0, [r4, #80]	; 0x50
  409d2c:	81a3      	strh	r3, [r4, #12]
  409d2e:	bd10      	pop	{r4, pc}

00409d30 <__sclose>:
  409d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409d34:	f000 b908 	b.w	409f48 <_close_r>

00409d38 <__swbuf_r>:
  409d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d3a:	460d      	mov	r5, r1
  409d3c:	4614      	mov	r4, r2
  409d3e:	4606      	mov	r6, r0
  409d40:	b110      	cbz	r0, 409d48 <__swbuf_r+0x10>
  409d42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409d44:	2b00      	cmp	r3, #0
  409d46:	d04b      	beq.n	409de0 <__swbuf_r+0xa8>
  409d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409d4c:	69a3      	ldr	r3, [r4, #24]
  409d4e:	60a3      	str	r3, [r4, #8]
  409d50:	b291      	uxth	r1, r2
  409d52:	0708      	lsls	r0, r1, #28
  409d54:	d539      	bpl.n	409dca <__swbuf_r+0x92>
  409d56:	6923      	ldr	r3, [r4, #16]
  409d58:	2b00      	cmp	r3, #0
  409d5a:	d036      	beq.n	409dca <__swbuf_r+0x92>
  409d5c:	b2ed      	uxtb	r5, r5
  409d5e:	0489      	lsls	r1, r1, #18
  409d60:	462f      	mov	r7, r5
  409d62:	d515      	bpl.n	409d90 <__swbuf_r+0x58>
  409d64:	6822      	ldr	r2, [r4, #0]
  409d66:	6961      	ldr	r1, [r4, #20]
  409d68:	1ad3      	subs	r3, r2, r3
  409d6a:	428b      	cmp	r3, r1
  409d6c:	da1c      	bge.n	409da8 <__swbuf_r+0x70>
  409d6e:	3301      	adds	r3, #1
  409d70:	68a1      	ldr	r1, [r4, #8]
  409d72:	1c50      	adds	r0, r2, #1
  409d74:	3901      	subs	r1, #1
  409d76:	60a1      	str	r1, [r4, #8]
  409d78:	6020      	str	r0, [r4, #0]
  409d7a:	7015      	strb	r5, [r2, #0]
  409d7c:	6962      	ldr	r2, [r4, #20]
  409d7e:	429a      	cmp	r2, r3
  409d80:	d01a      	beq.n	409db8 <__swbuf_r+0x80>
  409d82:	89a3      	ldrh	r3, [r4, #12]
  409d84:	07db      	lsls	r3, r3, #31
  409d86:	d501      	bpl.n	409d8c <__swbuf_r+0x54>
  409d88:	2d0a      	cmp	r5, #10
  409d8a:	d015      	beq.n	409db8 <__swbuf_r+0x80>
  409d8c:	4638      	mov	r0, r7
  409d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409d90:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409d96:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409d9a:	81a2      	strh	r2, [r4, #12]
  409d9c:	6822      	ldr	r2, [r4, #0]
  409d9e:	6661      	str	r1, [r4, #100]	; 0x64
  409da0:	6961      	ldr	r1, [r4, #20]
  409da2:	1ad3      	subs	r3, r2, r3
  409da4:	428b      	cmp	r3, r1
  409da6:	dbe2      	blt.n	409d6e <__swbuf_r+0x36>
  409da8:	4621      	mov	r1, r4
  409daa:	4630      	mov	r0, r6
  409dac:	f7fe fda6 	bl	4088fc <_fflush_r>
  409db0:	b940      	cbnz	r0, 409dc4 <__swbuf_r+0x8c>
  409db2:	6822      	ldr	r2, [r4, #0]
  409db4:	2301      	movs	r3, #1
  409db6:	e7db      	b.n	409d70 <__swbuf_r+0x38>
  409db8:	4621      	mov	r1, r4
  409dba:	4630      	mov	r0, r6
  409dbc:	f7fe fd9e 	bl	4088fc <_fflush_r>
  409dc0:	2800      	cmp	r0, #0
  409dc2:	d0e3      	beq.n	409d8c <__swbuf_r+0x54>
  409dc4:	f04f 37ff 	mov.w	r7, #4294967295
  409dc8:	e7e0      	b.n	409d8c <__swbuf_r+0x54>
  409dca:	4621      	mov	r1, r4
  409dcc:	4630      	mov	r0, r6
  409dce:	f7fe fc81 	bl	4086d4 <__swsetup_r>
  409dd2:	2800      	cmp	r0, #0
  409dd4:	d1f6      	bne.n	409dc4 <__swbuf_r+0x8c>
  409dd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409dda:	6923      	ldr	r3, [r4, #16]
  409ddc:	b291      	uxth	r1, r2
  409dde:	e7bd      	b.n	409d5c <__swbuf_r+0x24>
  409de0:	f7fe fde4 	bl	4089ac <__sinit>
  409de4:	e7b0      	b.n	409d48 <__swbuf_r+0x10>
  409de6:	bf00      	nop

00409de8 <_wcrtomb_r>:
  409de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  409dea:	4606      	mov	r6, r0
  409dec:	b085      	sub	sp, #20
  409dee:	461f      	mov	r7, r3
  409df0:	b189      	cbz	r1, 409e16 <_wcrtomb_r+0x2e>
  409df2:	4c10      	ldr	r4, [pc, #64]	; (409e34 <_wcrtomb_r+0x4c>)
  409df4:	4d10      	ldr	r5, [pc, #64]	; (409e38 <_wcrtomb_r+0x50>)
  409df6:	6824      	ldr	r4, [r4, #0]
  409df8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  409dfa:	2c00      	cmp	r4, #0
  409dfc:	bf08      	it	eq
  409dfe:	462c      	moveq	r4, r5
  409e00:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409e04:	47a0      	blx	r4
  409e06:	1c43      	adds	r3, r0, #1
  409e08:	d103      	bne.n	409e12 <_wcrtomb_r+0x2a>
  409e0a:	2200      	movs	r2, #0
  409e0c:	238a      	movs	r3, #138	; 0x8a
  409e0e:	603a      	str	r2, [r7, #0]
  409e10:	6033      	str	r3, [r6, #0]
  409e12:	b005      	add	sp, #20
  409e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e16:	460c      	mov	r4, r1
  409e18:	4906      	ldr	r1, [pc, #24]	; (409e34 <_wcrtomb_r+0x4c>)
  409e1a:	4a07      	ldr	r2, [pc, #28]	; (409e38 <_wcrtomb_r+0x50>)
  409e1c:	6809      	ldr	r1, [r1, #0]
  409e1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409e20:	2900      	cmp	r1, #0
  409e22:	bf08      	it	eq
  409e24:	4611      	moveq	r1, r2
  409e26:	4622      	mov	r2, r4
  409e28:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409e2c:	a901      	add	r1, sp, #4
  409e2e:	47a0      	blx	r4
  409e30:	e7e9      	b.n	409e06 <_wcrtomb_r+0x1e>
  409e32:	bf00      	nop
  409e34:	20400034 	.word	0x20400034
  409e38:	20400464 	.word	0x20400464

00409e3c <__ascii_wctomb>:
  409e3c:	b121      	cbz	r1, 409e48 <__ascii_wctomb+0xc>
  409e3e:	2aff      	cmp	r2, #255	; 0xff
  409e40:	d804      	bhi.n	409e4c <__ascii_wctomb+0x10>
  409e42:	700a      	strb	r2, [r1, #0]
  409e44:	2001      	movs	r0, #1
  409e46:	4770      	bx	lr
  409e48:	4608      	mov	r0, r1
  409e4a:	4770      	bx	lr
  409e4c:	238a      	movs	r3, #138	; 0x8a
  409e4e:	6003      	str	r3, [r0, #0]
  409e50:	f04f 30ff 	mov.w	r0, #4294967295
  409e54:	4770      	bx	lr
  409e56:	bf00      	nop

00409e58 <_write_r>:
  409e58:	b570      	push	{r4, r5, r6, lr}
  409e5a:	460d      	mov	r5, r1
  409e5c:	4c08      	ldr	r4, [pc, #32]	; (409e80 <_write_r+0x28>)
  409e5e:	4611      	mov	r1, r2
  409e60:	4606      	mov	r6, r0
  409e62:	461a      	mov	r2, r3
  409e64:	4628      	mov	r0, r5
  409e66:	2300      	movs	r3, #0
  409e68:	6023      	str	r3, [r4, #0]
  409e6a:	f7f6 fa05 	bl	400278 <_write>
  409e6e:	1c43      	adds	r3, r0, #1
  409e70:	d000      	beq.n	409e74 <_write_r+0x1c>
  409e72:	bd70      	pop	{r4, r5, r6, pc}
  409e74:	6823      	ldr	r3, [r4, #0]
  409e76:	2b00      	cmp	r3, #0
  409e78:	d0fb      	beq.n	409e72 <_write_r+0x1a>
  409e7a:	6033      	str	r3, [r6, #0]
  409e7c:	bd70      	pop	{r4, r5, r6, pc}
  409e7e:	bf00      	nop
  409e80:	204049f4 	.word	0x204049f4

00409e84 <__register_exitproc>:
  409e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409e88:	4d2c      	ldr	r5, [pc, #176]	; (409f3c <__register_exitproc+0xb8>)
  409e8a:	4606      	mov	r6, r0
  409e8c:	6828      	ldr	r0, [r5, #0]
  409e8e:	4698      	mov	r8, r3
  409e90:	460f      	mov	r7, r1
  409e92:	4691      	mov	r9, r2
  409e94:	f7ff f94a 	bl	40912c <__retarget_lock_acquire_recursive>
  409e98:	4b29      	ldr	r3, [pc, #164]	; (409f40 <__register_exitproc+0xbc>)
  409e9a:	681c      	ldr	r4, [r3, #0]
  409e9c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409ea0:	2b00      	cmp	r3, #0
  409ea2:	d03e      	beq.n	409f22 <__register_exitproc+0x9e>
  409ea4:	685a      	ldr	r2, [r3, #4]
  409ea6:	2a1f      	cmp	r2, #31
  409ea8:	dc1c      	bgt.n	409ee4 <__register_exitproc+0x60>
  409eaa:	f102 0e01 	add.w	lr, r2, #1
  409eae:	b176      	cbz	r6, 409ece <__register_exitproc+0x4a>
  409eb0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409eb4:	2401      	movs	r4, #1
  409eb6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409eba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409ebe:	4094      	lsls	r4, r2
  409ec0:	4320      	orrs	r0, r4
  409ec2:	2e02      	cmp	r6, #2
  409ec4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409ec8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409ecc:	d023      	beq.n	409f16 <__register_exitproc+0x92>
  409ece:	3202      	adds	r2, #2
  409ed0:	f8c3 e004 	str.w	lr, [r3, #4]
  409ed4:	6828      	ldr	r0, [r5, #0]
  409ed6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409eda:	f7ff f929 	bl	409130 <__retarget_lock_release_recursive>
  409ede:	2000      	movs	r0, #0
  409ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409ee4:	4b17      	ldr	r3, [pc, #92]	; (409f44 <__register_exitproc+0xc0>)
  409ee6:	b30b      	cbz	r3, 409f2c <__register_exitproc+0xa8>
  409ee8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409eec:	f7ff f99a 	bl	409224 <malloc>
  409ef0:	4603      	mov	r3, r0
  409ef2:	b1d8      	cbz	r0, 409f2c <__register_exitproc+0xa8>
  409ef4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409ef8:	6002      	str	r2, [r0, #0]
  409efa:	2100      	movs	r1, #0
  409efc:	6041      	str	r1, [r0, #4]
  409efe:	460a      	mov	r2, r1
  409f00:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409f04:	f04f 0e01 	mov.w	lr, #1
  409f08:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409f0c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409f10:	2e00      	cmp	r6, #0
  409f12:	d0dc      	beq.n	409ece <__register_exitproc+0x4a>
  409f14:	e7cc      	b.n	409eb0 <__register_exitproc+0x2c>
  409f16:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409f1a:	430c      	orrs	r4, r1
  409f1c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409f20:	e7d5      	b.n	409ece <__register_exitproc+0x4a>
  409f22:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409f26:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409f2a:	e7bb      	b.n	409ea4 <__register_exitproc+0x20>
  409f2c:	6828      	ldr	r0, [r5, #0]
  409f2e:	f7ff f8ff 	bl	409130 <__retarget_lock_release_recursive>
  409f32:	f04f 30ff 	mov.w	r0, #4294967295
  409f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409f3a:	bf00      	nop
  409f3c:	20400460 	.word	0x20400460
  409f40:	0040b1e0 	.word	0x0040b1e0
  409f44:	00409225 	.word	0x00409225

00409f48 <_close_r>:
  409f48:	b538      	push	{r3, r4, r5, lr}
  409f4a:	4c07      	ldr	r4, [pc, #28]	; (409f68 <_close_r+0x20>)
  409f4c:	2300      	movs	r3, #0
  409f4e:	4605      	mov	r5, r0
  409f50:	4608      	mov	r0, r1
  409f52:	6023      	str	r3, [r4, #0]
  409f54:	f7f7 f874 	bl	401040 <_close>
  409f58:	1c43      	adds	r3, r0, #1
  409f5a:	d000      	beq.n	409f5e <_close_r+0x16>
  409f5c:	bd38      	pop	{r3, r4, r5, pc}
  409f5e:	6823      	ldr	r3, [r4, #0]
  409f60:	2b00      	cmp	r3, #0
  409f62:	d0fb      	beq.n	409f5c <_close_r+0x14>
  409f64:	602b      	str	r3, [r5, #0]
  409f66:	bd38      	pop	{r3, r4, r5, pc}
  409f68:	204049f4 	.word	0x204049f4

00409f6c <_fclose_r>:
  409f6c:	b570      	push	{r4, r5, r6, lr}
  409f6e:	b159      	cbz	r1, 409f88 <_fclose_r+0x1c>
  409f70:	4605      	mov	r5, r0
  409f72:	460c      	mov	r4, r1
  409f74:	b110      	cbz	r0, 409f7c <_fclose_r+0x10>
  409f76:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409f78:	2b00      	cmp	r3, #0
  409f7a:	d03c      	beq.n	409ff6 <_fclose_r+0x8a>
  409f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409f7e:	07d8      	lsls	r0, r3, #31
  409f80:	d505      	bpl.n	409f8e <_fclose_r+0x22>
  409f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409f86:	b92b      	cbnz	r3, 409f94 <_fclose_r+0x28>
  409f88:	2600      	movs	r6, #0
  409f8a:	4630      	mov	r0, r6
  409f8c:	bd70      	pop	{r4, r5, r6, pc}
  409f8e:	89a3      	ldrh	r3, [r4, #12]
  409f90:	0599      	lsls	r1, r3, #22
  409f92:	d53c      	bpl.n	40a00e <_fclose_r+0xa2>
  409f94:	4621      	mov	r1, r4
  409f96:	4628      	mov	r0, r5
  409f98:	f7fe fc10 	bl	4087bc <__sflush_r>
  409f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409f9e:	4606      	mov	r6, r0
  409fa0:	b133      	cbz	r3, 409fb0 <_fclose_r+0x44>
  409fa2:	69e1      	ldr	r1, [r4, #28]
  409fa4:	4628      	mov	r0, r5
  409fa6:	4798      	blx	r3
  409fa8:	2800      	cmp	r0, #0
  409faa:	bfb8      	it	lt
  409fac:	f04f 36ff 	movlt.w	r6, #4294967295
  409fb0:	89a3      	ldrh	r3, [r4, #12]
  409fb2:	061a      	lsls	r2, r3, #24
  409fb4:	d422      	bmi.n	409ffc <_fclose_r+0x90>
  409fb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409fb8:	b141      	cbz	r1, 409fcc <_fclose_r+0x60>
  409fba:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409fbe:	4299      	cmp	r1, r3
  409fc0:	d002      	beq.n	409fc8 <_fclose_r+0x5c>
  409fc2:	4628      	mov	r0, r5
  409fc4:	f7fe fe18 	bl	408bf8 <_free_r>
  409fc8:	2300      	movs	r3, #0
  409fca:	6323      	str	r3, [r4, #48]	; 0x30
  409fcc:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409fce:	b121      	cbz	r1, 409fda <_fclose_r+0x6e>
  409fd0:	4628      	mov	r0, r5
  409fd2:	f7fe fe11 	bl	408bf8 <_free_r>
  409fd6:	2300      	movs	r3, #0
  409fd8:	6463      	str	r3, [r4, #68]	; 0x44
  409fda:	f7fe fd13 	bl	408a04 <__sfp_lock_acquire>
  409fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409fe0:	2200      	movs	r2, #0
  409fe2:	07db      	lsls	r3, r3, #31
  409fe4:	81a2      	strh	r2, [r4, #12]
  409fe6:	d50e      	bpl.n	40a006 <_fclose_r+0x9a>
  409fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409fea:	f7ff f89d 	bl	409128 <__retarget_lock_close_recursive>
  409fee:	f7fe fd0f 	bl	408a10 <__sfp_lock_release>
  409ff2:	4630      	mov	r0, r6
  409ff4:	bd70      	pop	{r4, r5, r6, pc}
  409ff6:	f7fe fcd9 	bl	4089ac <__sinit>
  409ffa:	e7bf      	b.n	409f7c <_fclose_r+0x10>
  409ffc:	6921      	ldr	r1, [r4, #16]
  409ffe:	4628      	mov	r0, r5
  40a000:	f7fe fdfa 	bl	408bf8 <_free_r>
  40a004:	e7d7      	b.n	409fb6 <_fclose_r+0x4a>
  40a006:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a008:	f7ff f892 	bl	409130 <__retarget_lock_release_recursive>
  40a00c:	e7ec      	b.n	409fe8 <_fclose_r+0x7c>
  40a00e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a010:	f7ff f88c 	bl	40912c <__retarget_lock_acquire_recursive>
  40a014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a018:	2b00      	cmp	r3, #0
  40a01a:	d1bb      	bne.n	409f94 <_fclose_r+0x28>
  40a01c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a01e:	f016 0601 	ands.w	r6, r6, #1
  40a022:	d1b1      	bne.n	409f88 <_fclose_r+0x1c>
  40a024:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a026:	f7ff f883 	bl	409130 <__retarget_lock_release_recursive>
  40a02a:	4630      	mov	r0, r6
  40a02c:	bd70      	pop	{r4, r5, r6, pc}
  40a02e:	bf00      	nop

0040a030 <_fstat_r>:
  40a030:	b538      	push	{r3, r4, r5, lr}
  40a032:	460b      	mov	r3, r1
  40a034:	4c07      	ldr	r4, [pc, #28]	; (40a054 <_fstat_r+0x24>)
  40a036:	4605      	mov	r5, r0
  40a038:	4611      	mov	r1, r2
  40a03a:	4618      	mov	r0, r3
  40a03c:	2300      	movs	r3, #0
  40a03e:	6023      	str	r3, [r4, #0]
  40a040:	f7f7 f801 	bl	401046 <_fstat>
  40a044:	1c43      	adds	r3, r0, #1
  40a046:	d000      	beq.n	40a04a <_fstat_r+0x1a>
  40a048:	bd38      	pop	{r3, r4, r5, pc}
  40a04a:	6823      	ldr	r3, [r4, #0]
  40a04c:	2b00      	cmp	r3, #0
  40a04e:	d0fb      	beq.n	40a048 <_fstat_r+0x18>
  40a050:	602b      	str	r3, [r5, #0]
  40a052:	bd38      	pop	{r3, r4, r5, pc}
  40a054:	204049f4 	.word	0x204049f4

0040a058 <_isatty_r>:
  40a058:	b538      	push	{r3, r4, r5, lr}
  40a05a:	4c07      	ldr	r4, [pc, #28]	; (40a078 <_isatty_r+0x20>)
  40a05c:	2300      	movs	r3, #0
  40a05e:	4605      	mov	r5, r0
  40a060:	4608      	mov	r0, r1
  40a062:	6023      	str	r3, [r4, #0]
  40a064:	f7f6 fff4 	bl	401050 <_isatty>
  40a068:	1c43      	adds	r3, r0, #1
  40a06a:	d000      	beq.n	40a06e <_isatty_r+0x16>
  40a06c:	bd38      	pop	{r3, r4, r5, pc}
  40a06e:	6823      	ldr	r3, [r4, #0]
  40a070:	2b00      	cmp	r3, #0
  40a072:	d0fb      	beq.n	40a06c <_isatty_r+0x14>
  40a074:	602b      	str	r3, [r5, #0]
  40a076:	bd38      	pop	{r3, r4, r5, pc}
  40a078:	204049f4 	.word	0x204049f4

0040a07c <_lseek_r>:
  40a07c:	b570      	push	{r4, r5, r6, lr}
  40a07e:	460d      	mov	r5, r1
  40a080:	4c08      	ldr	r4, [pc, #32]	; (40a0a4 <_lseek_r+0x28>)
  40a082:	4611      	mov	r1, r2
  40a084:	4606      	mov	r6, r0
  40a086:	461a      	mov	r2, r3
  40a088:	4628      	mov	r0, r5
  40a08a:	2300      	movs	r3, #0
  40a08c:	6023      	str	r3, [r4, #0]
  40a08e:	f7f6 ffe1 	bl	401054 <_lseek>
  40a092:	1c43      	adds	r3, r0, #1
  40a094:	d000      	beq.n	40a098 <_lseek_r+0x1c>
  40a096:	bd70      	pop	{r4, r5, r6, pc}
  40a098:	6823      	ldr	r3, [r4, #0]
  40a09a:	2b00      	cmp	r3, #0
  40a09c:	d0fb      	beq.n	40a096 <_lseek_r+0x1a>
  40a09e:	6033      	str	r3, [r6, #0]
  40a0a0:	bd70      	pop	{r4, r5, r6, pc}
  40a0a2:	bf00      	nop
  40a0a4:	204049f4 	.word	0x204049f4

0040a0a8 <_read_r>:
  40a0a8:	b570      	push	{r4, r5, r6, lr}
  40a0aa:	460d      	mov	r5, r1
  40a0ac:	4c08      	ldr	r4, [pc, #32]	; (40a0d0 <_read_r+0x28>)
  40a0ae:	4611      	mov	r1, r2
  40a0b0:	4606      	mov	r6, r0
  40a0b2:	461a      	mov	r2, r3
  40a0b4:	4628      	mov	r0, r5
  40a0b6:	2300      	movs	r3, #0
  40a0b8:	6023      	str	r3, [r4, #0]
  40a0ba:	f7f6 f8bf 	bl	40023c <_read>
  40a0be:	1c43      	adds	r3, r0, #1
  40a0c0:	d000      	beq.n	40a0c4 <_read_r+0x1c>
  40a0c2:	bd70      	pop	{r4, r5, r6, pc}
  40a0c4:	6823      	ldr	r3, [r4, #0]
  40a0c6:	2b00      	cmp	r3, #0
  40a0c8:	d0fb      	beq.n	40a0c2 <_read_r+0x1a>
  40a0ca:	6033      	str	r3, [r6, #0]
  40a0cc:	bd70      	pop	{r4, r5, r6, pc}
  40a0ce:	bf00      	nop
  40a0d0:	204049f4 	.word	0x204049f4

0040a0d4 <__aeabi_uldivmod>:
  40a0d4:	b953      	cbnz	r3, 40a0ec <__aeabi_uldivmod+0x18>
  40a0d6:	b94a      	cbnz	r2, 40a0ec <__aeabi_uldivmod+0x18>
  40a0d8:	2900      	cmp	r1, #0
  40a0da:	bf08      	it	eq
  40a0dc:	2800      	cmpeq	r0, #0
  40a0de:	bf1c      	itt	ne
  40a0e0:	f04f 31ff 	movne.w	r1, #4294967295
  40a0e4:	f04f 30ff 	movne.w	r0, #4294967295
  40a0e8:	f000 b97a 	b.w	40a3e0 <__aeabi_idiv0>
  40a0ec:	f1ad 0c08 	sub.w	ip, sp, #8
  40a0f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a0f4:	f000 f806 	bl	40a104 <__udivmoddi4>
  40a0f8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a0fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a100:	b004      	add	sp, #16
  40a102:	4770      	bx	lr

0040a104 <__udivmoddi4>:
  40a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a108:	468c      	mov	ip, r1
  40a10a:	460d      	mov	r5, r1
  40a10c:	4604      	mov	r4, r0
  40a10e:	9e08      	ldr	r6, [sp, #32]
  40a110:	2b00      	cmp	r3, #0
  40a112:	d151      	bne.n	40a1b8 <__udivmoddi4+0xb4>
  40a114:	428a      	cmp	r2, r1
  40a116:	4617      	mov	r7, r2
  40a118:	d96d      	bls.n	40a1f6 <__udivmoddi4+0xf2>
  40a11a:	fab2 fe82 	clz	lr, r2
  40a11e:	f1be 0f00 	cmp.w	lr, #0
  40a122:	d00b      	beq.n	40a13c <__udivmoddi4+0x38>
  40a124:	f1ce 0c20 	rsb	ip, lr, #32
  40a128:	fa01 f50e 	lsl.w	r5, r1, lr
  40a12c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a130:	fa02 f70e 	lsl.w	r7, r2, lr
  40a134:	ea4c 0c05 	orr.w	ip, ip, r5
  40a138:	fa00 f40e 	lsl.w	r4, r0, lr
  40a13c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a140:	0c25      	lsrs	r5, r4, #16
  40a142:	fbbc f8fa 	udiv	r8, ip, sl
  40a146:	fa1f f987 	uxth.w	r9, r7
  40a14a:	fb0a cc18 	mls	ip, sl, r8, ip
  40a14e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a152:	fb08 f309 	mul.w	r3, r8, r9
  40a156:	42ab      	cmp	r3, r5
  40a158:	d90a      	bls.n	40a170 <__udivmoddi4+0x6c>
  40a15a:	19ed      	adds	r5, r5, r7
  40a15c:	f108 32ff 	add.w	r2, r8, #4294967295
  40a160:	f080 8123 	bcs.w	40a3aa <__udivmoddi4+0x2a6>
  40a164:	42ab      	cmp	r3, r5
  40a166:	f240 8120 	bls.w	40a3aa <__udivmoddi4+0x2a6>
  40a16a:	f1a8 0802 	sub.w	r8, r8, #2
  40a16e:	443d      	add	r5, r7
  40a170:	1aed      	subs	r5, r5, r3
  40a172:	b2a4      	uxth	r4, r4
  40a174:	fbb5 f0fa 	udiv	r0, r5, sl
  40a178:	fb0a 5510 	mls	r5, sl, r0, r5
  40a17c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a180:	fb00 f909 	mul.w	r9, r0, r9
  40a184:	45a1      	cmp	r9, r4
  40a186:	d909      	bls.n	40a19c <__udivmoddi4+0x98>
  40a188:	19e4      	adds	r4, r4, r7
  40a18a:	f100 33ff 	add.w	r3, r0, #4294967295
  40a18e:	f080 810a 	bcs.w	40a3a6 <__udivmoddi4+0x2a2>
  40a192:	45a1      	cmp	r9, r4
  40a194:	f240 8107 	bls.w	40a3a6 <__udivmoddi4+0x2a2>
  40a198:	3802      	subs	r0, #2
  40a19a:	443c      	add	r4, r7
  40a19c:	eba4 0409 	sub.w	r4, r4, r9
  40a1a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a1a4:	2100      	movs	r1, #0
  40a1a6:	2e00      	cmp	r6, #0
  40a1a8:	d061      	beq.n	40a26e <__udivmoddi4+0x16a>
  40a1aa:	fa24 f40e 	lsr.w	r4, r4, lr
  40a1ae:	2300      	movs	r3, #0
  40a1b0:	6034      	str	r4, [r6, #0]
  40a1b2:	6073      	str	r3, [r6, #4]
  40a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1b8:	428b      	cmp	r3, r1
  40a1ba:	d907      	bls.n	40a1cc <__udivmoddi4+0xc8>
  40a1bc:	2e00      	cmp	r6, #0
  40a1be:	d054      	beq.n	40a26a <__udivmoddi4+0x166>
  40a1c0:	2100      	movs	r1, #0
  40a1c2:	e886 0021 	stmia.w	r6, {r0, r5}
  40a1c6:	4608      	mov	r0, r1
  40a1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1cc:	fab3 f183 	clz	r1, r3
  40a1d0:	2900      	cmp	r1, #0
  40a1d2:	f040 808e 	bne.w	40a2f2 <__udivmoddi4+0x1ee>
  40a1d6:	42ab      	cmp	r3, r5
  40a1d8:	d302      	bcc.n	40a1e0 <__udivmoddi4+0xdc>
  40a1da:	4282      	cmp	r2, r0
  40a1dc:	f200 80fa 	bhi.w	40a3d4 <__udivmoddi4+0x2d0>
  40a1e0:	1a84      	subs	r4, r0, r2
  40a1e2:	eb65 0503 	sbc.w	r5, r5, r3
  40a1e6:	2001      	movs	r0, #1
  40a1e8:	46ac      	mov	ip, r5
  40a1ea:	2e00      	cmp	r6, #0
  40a1ec:	d03f      	beq.n	40a26e <__udivmoddi4+0x16a>
  40a1ee:	e886 1010 	stmia.w	r6, {r4, ip}
  40a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1f6:	b912      	cbnz	r2, 40a1fe <__udivmoddi4+0xfa>
  40a1f8:	2701      	movs	r7, #1
  40a1fa:	fbb7 f7f2 	udiv	r7, r7, r2
  40a1fe:	fab7 fe87 	clz	lr, r7
  40a202:	f1be 0f00 	cmp.w	lr, #0
  40a206:	d134      	bne.n	40a272 <__udivmoddi4+0x16e>
  40a208:	1beb      	subs	r3, r5, r7
  40a20a:	0c3a      	lsrs	r2, r7, #16
  40a20c:	fa1f fc87 	uxth.w	ip, r7
  40a210:	2101      	movs	r1, #1
  40a212:	fbb3 f8f2 	udiv	r8, r3, r2
  40a216:	0c25      	lsrs	r5, r4, #16
  40a218:	fb02 3318 	mls	r3, r2, r8, r3
  40a21c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a220:	fb0c f308 	mul.w	r3, ip, r8
  40a224:	42ab      	cmp	r3, r5
  40a226:	d907      	bls.n	40a238 <__udivmoddi4+0x134>
  40a228:	19ed      	adds	r5, r5, r7
  40a22a:	f108 30ff 	add.w	r0, r8, #4294967295
  40a22e:	d202      	bcs.n	40a236 <__udivmoddi4+0x132>
  40a230:	42ab      	cmp	r3, r5
  40a232:	f200 80d1 	bhi.w	40a3d8 <__udivmoddi4+0x2d4>
  40a236:	4680      	mov	r8, r0
  40a238:	1aed      	subs	r5, r5, r3
  40a23a:	b2a3      	uxth	r3, r4
  40a23c:	fbb5 f0f2 	udiv	r0, r5, r2
  40a240:	fb02 5510 	mls	r5, r2, r0, r5
  40a244:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a248:	fb0c fc00 	mul.w	ip, ip, r0
  40a24c:	45a4      	cmp	ip, r4
  40a24e:	d907      	bls.n	40a260 <__udivmoddi4+0x15c>
  40a250:	19e4      	adds	r4, r4, r7
  40a252:	f100 33ff 	add.w	r3, r0, #4294967295
  40a256:	d202      	bcs.n	40a25e <__udivmoddi4+0x15a>
  40a258:	45a4      	cmp	ip, r4
  40a25a:	f200 80b8 	bhi.w	40a3ce <__udivmoddi4+0x2ca>
  40a25e:	4618      	mov	r0, r3
  40a260:	eba4 040c 	sub.w	r4, r4, ip
  40a264:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a268:	e79d      	b.n	40a1a6 <__udivmoddi4+0xa2>
  40a26a:	4631      	mov	r1, r6
  40a26c:	4630      	mov	r0, r6
  40a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a272:	f1ce 0420 	rsb	r4, lr, #32
  40a276:	fa05 f30e 	lsl.w	r3, r5, lr
  40a27a:	fa07 f70e 	lsl.w	r7, r7, lr
  40a27e:	fa20 f804 	lsr.w	r8, r0, r4
  40a282:	0c3a      	lsrs	r2, r7, #16
  40a284:	fa25 f404 	lsr.w	r4, r5, r4
  40a288:	ea48 0803 	orr.w	r8, r8, r3
  40a28c:	fbb4 f1f2 	udiv	r1, r4, r2
  40a290:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a294:	fb02 4411 	mls	r4, r2, r1, r4
  40a298:	fa1f fc87 	uxth.w	ip, r7
  40a29c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a2a0:	fb01 f30c 	mul.w	r3, r1, ip
  40a2a4:	42ab      	cmp	r3, r5
  40a2a6:	fa00 f40e 	lsl.w	r4, r0, lr
  40a2aa:	d909      	bls.n	40a2c0 <__udivmoddi4+0x1bc>
  40a2ac:	19ed      	adds	r5, r5, r7
  40a2ae:	f101 30ff 	add.w	r0, r1, #4294967295
  40a2b2:	f080 808a 	bcs.w	40a3ca <__udivmoddi4+0x2c6>
  40a2b6:	42ab      	cmp	r3, r5
  40a2b8:	f240 8087 	bls.w	40a3ca <__udivmoddi4+0x2c6>
  40a2bc:	3902      	subs	r1, #2
  40a2be:	443d      	add	r5, r7
  40a2c0:	1aeb      	subs	r3, r5, r3
  40a2c2:	fa1f f588 	uxth.w	r5, r8
  40a2c6:	fbb3 f0f2 	udiv	r0, r3, r2
  40a2ca:	fb02 3310 	mls	r3, r2, r0, r3
  40a2ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a2d2:	fb00 f30c 	mul.w	r3, r0, ip
  40a2d6:	42ab      	cmp	r3, r5
  40a2d8:	d907      	bls.n	40a2ea <__udivmoddi4+0x1e6>
  40a2da:	19ed      	adds	r5, r5, r7
  40a2dc:	f100 38ff 	add.w	r8, r0, #4294967295
  40a2e0:	d26f      	bcs.n	40a3c2 <__udivmoddi4+0x2be>
  40a2e2:	42ab      	cmp	r3, r5
  40a2e4:	d96d      	bls.n	40a3c2 <__udivmoddi4+0x2be>
  40a2e6:	3802      	subs	r0, #2
  40a2e8:	443d      	add	r5, r7
  40a2ea:	1aeb      	subs	r3, r5, r3
  40a2ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a2f0:	e78f      	b.n	40a212 <__udivmoddi4+0x10e>
  40a2f2:	f1c1 0720 	rsb	r7, r1, #32
  40a2f6:	fa22 f807 	lsr.w	r8, r2, r7
  40a2fa:	408b      	lsls	r3, r1
  40a2fc:	fa05 f401 	lsl.w	r4, r5, r1
  40a300:	ea48 0303 	orr.w	r3, r8, r3
  40a304:	fa20 fe07 	lsr.w	lr, r0, r7
  40a308:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a30c:	40fd      	lsrs	r5, r7
  40a30e:	ea4e 0e04 	orr.w	lr, lr, r4
  40a312:	fbb5 f9fc 	udiv	r9, r5, ip
  40a316:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a31a:	fb0c 5519 	mls	r5, ip, r9, r5
  40a31e:	fa1f f883 	uxth.w	r8, r3
  40a322:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a326:	fb09 f408 	mul.w	r4, r9, r8
  40a32a:	42ac      	cmp	r4, r5
  40a32c:	fa02 f201 	lsl.w	r2, r2, r1
  40a330:	fa00 fa01 	lsl.w	sl, r0, r1
  40a334:	d908      	bls.n	40a348 <__udivmoddi4+0x244>
  40a336:	18ed      	adds	r5, r5, r3
  40a338:	f109 30ff 	add.w	r0, r9, #4294967295
  40a33c:	d243      	bcs.n	40a3c6 <__udivmoddi4+0x2c2>
  40a33e:	42ac      	cmp	r4, r5
  40a340:	d941      	bls.n	40a3c6 <__udivmoddi4+0x2c2>
  40a342:	f1a9 0902 	sub.w	r9, r9, #2
  40a346:	441d      	add	r5, r3
  40a348:	1b2d      	subs	r5, r5, r4
  40a34a:	fa1f fe8e 	uxth.w	lr, lr
  40a34e:	fbb5 f0fc 	udiv	r0, r5, ip
  40a352:	fb0c 5510 	mls	r5, ip, r0, r5
  40a356:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a35a:	fb00 f808 	mul.w	r8, r0, r8
  40a35e:	45a0      	cmp	r8, r4
  40a360:	d907      	bls.n	40a372 <__udivmoddi4+0x26e>
  40a362:	18e4      	adds	r4, r4, r3
  40a364:	f100 35ff 	add.w	r5, r0, #4294967295
  40a368:	d229      	bcs.n	40a3be <__udivmoddi4+0x2ba>
  40a36a:	45a0      	cmp	r8, r4
  40a36c:	d927      	bls.n	40a3be <__udivmoddi4+0x2ba>
  40a36e:	3802      	subs	r0, #2
  40a370:	441c      	add	r4, r3
  40a372:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a376:	eba4 0408 	sub.w	r4, r4, r8
  40a37a:	fba0 8902 	umull	r8, r9, r0, r2
  40a37e:	454c      	cmp	r4, r9
  40a380:	46c6      	mov	lr, r8
  40a382:	464d      	mov	r5, r9
  40a384:	d315      	bcc.n	40a3b2 <__udivmoddi4+0x2ae>
  40a386:	d012      	beq.n	40a3ae <__udivmoddi4+0x2aa>
  40a388:	b156      	cbz	r6, 40a3a0 <__udivmoddi4+0x29c>
  40a38a:	ebba 030e 	subs.w	r3, sl, lr
  40a38e:	eb64 0405 	sbc.w	r4, r4, r5
  40a392:	fa04 f707 	lsl.w	r7, r4, r7
  40a396:	40cb      	lsrs	r3, r1
  40a398:	431f      	orrs	r7, r3
  40a39a:	40cc      	lsrs	r4, r1
  40a39c:	6037      	str	r7, [r6, #0]
  40a39e:	6074      	str	r4, [r6, #4]
  40a3a0:	2100      	movs	r1, #0
  40a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a3a6:	4618      	mov	r0, r3
  40a3a8:	e6f8      	b.n	40a19c <__udivmoddi4+0x98>
  40a3aa:	4690      	mov	r8, r2
  40a3ac:	e6e0      	b.n	40a170 <__udivmoddi4+0x6c>
  40a3ae:	45c2      	cmp	sl, r8
  40a3b0:	d2ea      	bcs.n	40a388 <__udivmoddi4+0x284>
  40a3b2:	ebb8 0e02 	subs.w	lr, r8, r2
  40a3b6:	eb69 0503 	sbc.w	r5, r9, r3
  40a3ba:	3801      	subs	r0, #1
  40a3bc:	e7e4      	b.n	40a388 <__udivmoddi4+0x284>
  40a3be:	4628      	mov	r0, r5
  40a3c0:	e7d7      	b.n	40a372 <__udivmoddi4+0x26e>
  40a3c2:	4640      	mov	r0, r8
  40a3c4:	e791      	b.n	40a2ea <__udivmoddi4+0x1e6>
  40a3c6:	4681      	mov	r9, r0
  40a3c8:	e7be      	b.n	40a348 <__udivmoddi4+0x244>
  40a3ca:	4601      	mov	r1, r0
  40a3cc:	e778      	b.n	40a2c0 <__udivmoddi4+0x1bc>
  40a3ce:	3802      	subs	r0, #2
  40a3d0:	443c      	add	r4, r7
  40a3d2:	e745      	b.n	40a260 <__udivmoddi4+0x15c>
  40a3d4:	4608      	mov	r0, r1
  40a3d6:	e708      	b.n	40a1ea <__udivmoddi4+0xe6>
  40a3d8:	f1a8 0802 	sub.w	r8, r8, #2
  40a3dc:	443d      	add	r5, r7
  40a3de:	e72b      	b.n	40a238 <__udivmoddi4+0x134>

0040a3e0 <__aeabi_idiv0>:
  40a3e0:	4770      	bx	lr
  40a3e2:	bf00      	nop

0040a3e4 <ip_addr_any>:
  40a3e4:	0000 0000                                   ....

0040a3e8 <memp_PBUF>:
  40a3e8:	0010 0002 475c 2040 0b8c 2040               ....\G@ ..@ 

0040a3f4 <memp_PBUF_POOL>:
  40a3f4:	0610 0004 2f18 2040 0b90 2040               ...../@ ..@ 

0040a400 <memp_REASSDATA>:
  40a400:	0020 0002 47a0 2040 0b94 2040                ....G@ ..@ 

0040a40c <memp_SYS_TIMEOUT>:
  40a40c:	0010 0003 493c 2040 0b98 2040               ....<I@ ..@ 

0040a418 <memp_TCP_PCB>:
  40a418:	0098 0002 4808 2040 0b9c 2040               .....H@ ..@ 

0040a424 <memp_TCP_PCB_LISTEN>:
  40a424:	001c 0001 4780 2040 0ba0 2040               .....G@ ..@ 

0040a430 <memp_TCP_SEG>:
  40a430:	0010 0008 2e94 2040 0ba4 2040               ......@ ..@ 

0040a43c <memp_UDP_PCB>:
  40a43c:	0020 0001 47e4 2040 0ba8 2040                ....G@ ..@ 

0040a448 <memp_pools>:
  40a448:	a43c 0040 a418 0040 a424 0040 a430 0040     <.@...@.$.@.0.@.
  40a458:	a400 0040 a40c 0040 a3e8 0040 a3f4 0040     ..@...@...@...@.

0040a468 <tcp_backoff>:
  40a468:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0040a478 <tcp_pcb_lists>:
  40a478:	4988 2040 498c 2040 4980 2040 4990 2040     .I@ .I@ .I@ .I@ 

0040a488 <tcp_persist_backoff>:
  40a488:	0603 180c 6030 0078                         ....0`x.

0040a490 <lwip_cyclic_timers>:
  40a490:	00fa 0000 3a61 0040 03e8 0000 2129 0040     ....a:@.....)!@.
  40a4a0:	03e8 0000 1579 0040                         ....y.@.

0040a4a8 <ethbroadcast>:
  40a4a8:	ffff ffff ffff 0000                         ........

0040a4b0 <ethzero>:
	...
  40a4b8:	7453 7461 6369 4920 2050 6441 7264 7365     Static IP Addres
  40a4c8:	2073 7341 6973 6e67 6465 0a0d 0000 0000     s Assigned......
  40a4d8:	654e 7774 726f 206b 7075 2520 0d73 000a     Network up %s...
  40a4e8:	654e 7774 726f 206b 6f64 6e77 0a0d 0000     Network down....

0040a4f8 <data_404_html>:
  40a4f8:	5448 5054 312f 302e 3420 3430 4620 6c69     HTTP/1.0 404 Fil
  40a508:	2065 6f6e 2074 6f66 6e75 0d64 530a 7265     e not found..Ser
  40a518:	6576 3a72 6c20 4977 2f50 7270 2d65 2e30     ver: lwIP/pre-0.
  40a528:	2036 6828 7474 3a70 2f2f 7777 2e77 6973     6 (http://www.si
  40a538:	7363 732e 2f65 617e 6164 2f6d 776c 7069     cs.se/~adam/lwip
  40a548:	292f 0a0d 6f43 746e 6e65 2d74 7974 6570     /)..Content-type
  40a558:	203a 6574 7478 682f 6d74 0d6c 0d0a 3c0a     : text/html....<
  40a568:	7468 6c6d 0a3e 683c 6165 3e64 743c 7469     html>.<head><tit
  40a578:	656c 6c3e 4977 2050 202d 2041 694c 6867     le>lwIP - A Ligh
  40a588:	7774 6965 6867 2074 4354 2f50 5049 5320     tweight TCP/IP S
  40a598:	6174 6b63 2f3c 6974 6c74 3e65 2f3c 6568     tack</title></he
  40a5a8:	6461 0a3e 623c 646f 2079 6762 6f63 6f6c     ad>.<body bgcolo
  40a5b8:	3d72 7722 6968 6574 2022 6574 7478 223d     r="white" text="
  40a5c8:	6c62 6361 226b 0a3e 200a 2020 3c20 6174     black">..    <ta
  40a5d8:	6c62 2065 6977 7464 3d68 3122 3030 2225     ble width="100%"
  40a5e8:	0a3e 2020 2020 2020 743c 2072 6176 696c     >.      <tr vali
  40a5f8:	6e67 223d 6f74 2270 3c3e 6474 7720 6469     gn="top"><td wid
  40a608:	6874 223d 3038 3e22 2009 0a20 2009 3c20     th="80">.  ..  <
  40a618:	2061 7268 6665 223d 7468 7074 2f3a 772f     a href="http://w
  40a628:	7777 732e 6369 2e73 6573 222f 3c3e 6d69     ww.sics.se/"><im
  40a638:	2067 7273 3d63 6922 676d 732f 6369 2e73     g src="img/sics.
  40a648:	6967 2266 090a 2020 6f62 6472 7265 223d     gif"..  border="
  40a658:	2230 6120 746c 223d 4953 5343 6c20 676f     0" alt="SICS log
  40a668:	226f 7420 7469 656c 223d 4953 5343 6c20     o" title="SICS l
  40a678:	676f 226f 3c3e 612f 0a3e 3c09 742f 3e64     ogo"></a>..</td>
  40a688:	743c 2064 6977 7464 3d68 3522 3030 3e22     <td width="500">
  40a698:	2009 0a20 2009 3c20 3168 6c3e 4977 2050     .  ..  <h1>lwIP 
  40a6a8:	202d 2041 694c 6867 7774 6965 6867 2074     - A Lightweight 
  40a6b8:	4354 2f50 5049 5320 6174 6b63 2f3c 3168     TCP/IP Stack</h1
  40a6c8:	0a3e 2009 3c20 3268 343e 3430 2d20 5020     >..  <h2>404 - P
  40a6d8:	6761 2065 6f6e 2074 6f66 6e75 3c64 682f     age not found</h
  40a6e8:	3e32 090a 2020 703c 0a3e 2009 2020 5320     2>..  <p>..    S
  40a6f8:	726f 7972 202c 6874 2065 6170 6567 7920     orry, the page y
  40a708:	756f 6120 6572 7220 7165 6575 7473 6e69     ou are requestin
  40a718:	2067 6177 2073 6f6e 2074 6f66 6e75 2064     g was not found 
  40a728:	6e6f 7420 6968 0a73 2009 2020 7320 7265     on this..    ser
  40a738:	6576 2e72 0a20 2009 3c20 702f 0a3e 3c09     ver. ..  </p>..<
  40a748:	742f 3e64 743c 3e64 090a 2020 6e26 7362     /td><td>..  &nbs
  40a758:	3b70 090a 2f3c 6474 3c3e 742f 3e72 200a     p;..</td></tr>. 
  40a768:	2020 2020 3c20 742f 6261 656c 0a3e 2f3c          </table>.</
  40a778:	6f62 7964 0a3e 2f3c 7468 6c6d 0a3e 0000     body>.</html>...

0040a788 <data_img_sics_gif>:
  40a788:	5448 5054 312f 302e 3220 3030 4f20 0d4b     HTTP/1.0 200 OK.
  40a798:	530a 7265 6576 3a72 6c20 4977 2f50 7270     .Server: lwIP/pr
  40a7a8:	2d65 2e30 2036 6828 7474 3a70 2f2f 7777     e-0.6 (http://ww
  40a7b8:	2e77 6973 7363 732e 2f65 617e 6164 2f6d     w.sics.se/~adam/
  40a7c8:	776c 7069 292f 0a0d 6f43 746e 6e65 2d74     lwip/)..Content-
  40a7d8:	7974 6570 203a 6d69 6761 2f65 6967 0d66     type: image/gif.
  40a7e8:	0d0a 470a 4649 3938 4661 2200 a500 0000     ...GIF89aF."....
  40a7f8:	2bd9 6a39 6a6a bfbf 93bf 9393 0f0f b00f     .+9jjj..........
  40a808:	b0b0 a6a6 80a6 8080 7676 1e76 1e1e 9d9d     ........vvv.....
  40a818:	2e9d 2e2e 4949 5449 5454 8a8a 608a 6060     ....IIITTT...```
  40a828:	a6c6 bd99 b2b5 abc2 d9a1 4041 67d5 c055     ..........A@.gU.
  40a838:	aab0 5ed5 d64e 4550 93cc c87d 90a1 8bce     ...^N.PE..}.....
  40a848:	d276 657b 84d1 c96d 8699 3a3a 003a 0000     v.{e..m...:::...
  40a858:	b8b8 ffb8 ffff ffff ffff ffff ffff ffff     ................
  40a868:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40a878:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40a888:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40a898:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40a8a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  40a8b8:	002c 0000 4600 2200 0000 fe06 9040 4870     ,....F."....@.pH
  40a8c8:	1a2c c88f 72a4 6cc9 9f3a a8d0 4a74 5aad     ,....r.l:...tJ.Z
  40a8d8:	d8af 76ac 40a9 be04 e283 3c60 2050 8e0d     ...v.@....`<P ..
  40a8e8:	006f 2831 0d1c b507 60c3 2475 f83e 87fc     o.1(.....`u$>...
  40a8f8:	0611 3de9 0746 7a0b 7c7a 0643 841e 0b78     ...=F..zz|C...x.
  40a908:	6e07 0151 848a 7e08 8079 8987 7a91 0a93     .nQ....~y....z..
  40a918:	9904 9678 034f 799e 9401 439f a39c 05a4     ..x.O..y...C....
  40a928:	a377 4ea0 7998 1e0b a483 1fa6 0596 aa9d     w..N.y..........
  40a938:	0178 8407 1e04 bb1e 51b8 0e84 0543 7707     x........Q..C..w
  40a948:	7fa5 b142 01b2 0863 bb0d 0c01 0d7a 0e44     ..B...c.....z.D.
  40a958:	afd8 054c 047a 0747 b707 a280 7de1 0544     ..L.z.G......}D.
  40a968:	0401 d001 87ea 4f93 9ae0 ce49 79d8 6604     .......O..I..y.f
  40a978:	1520 1010 9211 8029 c0b6 1591 1e45 1990      .....).....E...
  40a988:	4671 5ca8 0e04 2200 e84e 2440 3e9f 0604     qF.\..."N.@$.>..
  40a998:	58a7 93d4 1ca0 3f91 f0e8 0388 21b1 49a2     .X.....?.....!.I
  40a9a8:	1900 fc86 4452 01e0 299d 1521 5025 67f7     ....RD...)!.%P.g
  40a9b8:	1e25 fd06 9a4e 90b4 15ac cbfa 5352 8c1e     %...N.......RS..
  40a9c8:	f8f2 9207 082d 4d3a 4912 4995 14db c404     ....-.:M.I.I....
  40a9d8:	8514 aa29 01e7 a408 0149 5114 53e0 d591     ..).....I..Q.S..
  40a9e8:	0629 641a f402 81c7 059e 2220 a564 ae30     )..d...... "d.0.
  40a9f8:	9eab 5397 b9d8 50fd 93ef 4202 3474 9ce8     ...S...P...Bt4..
  40aa08:	2120 01c9 7868 55e6 2029 4f56 404c 7151      !..hx.U) VOL@Qq
  40aa18:	c082 2170 8522 4bbe 441c ea05 01a4 22bf     ..p!"..K.D....."
  40aa28:	f0b5 061c 3851 e08f ec22 ac18 2239 d6d4     ....Q8.."...9"..
  40aa38:	4493 3201 c882 61fc 01b3 0c45 832e d030     .D.2...a..E...0.
  40aa48:	170e 0f24 8570 ee94 0505 4b53 1b32 983f     ..$.p.....SK2.?.
  40aa58:	1dd3 8129 aeb0 8c1e 687e 60e0 545a b08f     ..).....~h.`ZT..
  40aa68:	6978 0673 00a2 576b 3dca 5011 04bd 4b30     xis...kW.=.P..0K
  40aa78:	d43a 5fab 9b1f 133d 2774 3c88 e025 be17     :.._..=.t'.<%...
  40aa88:	797a 0d45 b00c da8b ca90 0680 175d 1c60     zyE.........].`.
  40aa98:	4c22 57d8 0622 0020 0798 e408 8056 1c80     "L.W". .....V...
  40aaa8:	b7c5 82c5 360c e0e8 1083 2846 84e1 5614     .....6....F(...V
  40aab8:	a168 4110 0000 003b                         h..A..;.

0040aac0 <data_index_html>:
  40aac0:	5448 5054 312f 302e 3220 3030 4f20 0d4b     HTTP/1.0 200 OK.
  40aad0:	530a 7265 6576 3a72 6c20 4977 2f50 7270     .Server: lwIP/pr
  40aae0:	2d65 2e30 2036 6828 7474 3a70 2f2f 7777     e-0.6 (http://ww
  40aaf0:	2e77 6973 7363 732e 2f65 617e 6164 2f6d     w.sics.se/~adam/
  40ab00:	776c 7069 292f 0a0d 6f43 746e 6e65 2d74     lwip/)..Content-
  40ab10:	7974 6570 203a 6574 7478 682f 6d74 0d6c     type: text/html.
  40ab20:	0d0a 3c0a 7468 6c6d 0a3e 683c 6165 3e64     ...<html>.<head>
  40ab30:	743c 7469 656c 6c3e 4977 2050 202d 2041     <title>lwIP - A 
  40ab40:	694c 6867 7774 6965 6867 2074 4354 2f50     Lightweight TCP/
  40ab50:	5049 5320 6174 6b63 2f3c 6974 6c74 3e65     IP Stack</title>
  40ab60:	2f3c 6568 6461 0a3e 623c 646f 2079 6762     </head>.<body bg
  40ab70:	6f63 6f6c 3d72 7722 6968 6574 2022 6574     color="white" te
  40ab80:	7478 223d 6c62 6361 226b 0a3e 200a 2020     xt="black">..   
  40ab90:	3c20 6174 6c62 2065 6977 7464 3d68 3122      <table width="1
  40aba0:	3030 2225 0a3e 2020 2020 2020 743c 2072     00%">.      <tr 
  40abb0:	6176 696c 6e67 223d 6f74 2270 3c3e 6474     valign="top"><td
  40abc0:	7720 6469 6874 223d 3038 3e22 2009 0a20      width="80">.  .
  40abd0:	2009 3c20 2061 7268 6665 223d 7468 7074     .  <a href="http
  40abe0:	2f3a 772f 7777 732e 6369 2e73 6573 222f     ://www.sics.se/"
  40abf0:	3c3e 6d69 2067 7273 3d63 6922 676d 732f     ><img src="img/s
  40ac00:	6369 2e73 6967 2266 090a 2020 6f62 6472     ics.gif"..  bord
  40ac10:	7265 223d 2230 6120 746c 223d 4953 5343     er="0" alt="SICS
  40ac20:	6c20 676f 226f 7420 7469 656c 223d 4953      logo" title="SI
  40ac30:	5343 6c20 676f 226f 3c3e 612f 0a3e 3c09     CS logo"></a>..<
  40ac40:	742f 3e64 743c 2064 6977 7464 3d68 3522     /td><td width="5
  40ac50:	3030 3e22 2009 0a20 2009 3c20 3168 6c3e     00">.  ..  <h1>l
  40ac60:	4977 2050 202d 2041 694c 6867 7774 6965     wIP - A Lightwei
  40ac70:	6867 2074 4354 2f50 5049 5320 6174 6b63     ght TCP/IP Stack
  40ac80:	2f3c 3168 0a3e 2009 3c20 3e70 090a 2020     </h1>..  <p>..  
  40ac90:	2020 6854 2065 6577 2062 6170 6567 7920       The web page y
  40aca0:	756f 6120 6572 7720 7461 6863 6e69 2067     ou are watching 
  40acb0:	6177 2073 6573 7672 6465 6220 2079 2061     was served by a 
  40acc0:	6973 706d 656c 7720 6265 090a 2020 2020     simple web..    
  40acd0:	6573 7672 7265 7220 6e75 696e 676e 6f20     server running o
  40ace0:	206e 6f74 2070 666f 7420 6568 6c20 6769     n top of the lig
  40acf0:	7468 6577 6769 7468 5420 5043 492f 2050     htweight TCP/IP 
  40ad00:	7473 6361 206b 613c 090a 2020 2020 7268     stack <a..    hr
  40ad10:	6665 223d 7468 7074 2f3a 772f 7777 732e     ef="http://www.s
  40ad20:	6369 2e73 6573 7e2f 6461 6d61 6c2f 6977     ics.se/~adam/lwi
  40ad30:	2f70 3e22 776c 5049 2f3c 3e61 0a2e 2009     p/">lwIP</a>... 
  40ad40:	3c20 702f 0a3e 2009 3c20 3e70 090a 2020      </p>..  <p>..  
  40ad50:	2020 776c 5049 6920 2073 6e61 6f20 6570       lwIP is an ope
  40ad60:	206e 6f73 7275 6563 6920 706d 656c 656d     n source impleme
  40ad70:	746e 7461 6f69 206e 666f 7420 6568 5420     ntation of the T
  40ad80:	5043 492f 0a50 2009 2020 7020 6f72 6f74     CP/IP..    proto
  40ad90:	6f63 206c 7573 7469 2065 6874 7461 7720     col suite that w
  40ada0:	7361 6f20 6972 6967 616e 6c6c 2079 7277     as originally wr
  40adb0:	7469 6574 206e 7962 4120 6164 206d 7544     itten by Adam Du
  40adc0:	6b6e 6c65 0a73 2009 2020 6f20 2066 6874     nkels..    of th
  40add0:	2065 7753 6465 7369 2068 6e49 7473 7469     e Swedish Instit
  40ade0:	7475 2065 666f 4320 6d6f 7570 6574 2072     ute of Computer 
  40adf0:	6353 6569 636e 2065 7562 2074 6f6e 2077     Science but now 
  40ae00:	7369 090a 2020 2020 6562 6e69 2067 6361     is..    being ac
  40ae10:	6974 6576 796c 6420 7665 6c65 706f 6465     tively developed
  40ae20:	6220 2079 2061 6574 6d61 6f20 2066 6564      by a team of de
  40ae30:	6576 6f6c 6570 7372 090a 2020 2020 6964     velopers..    di
  40ae40:	7473 6972 7562 6574 2064 6f77 6c72 2d64     stributed world-
  40ae50:	6977 6564 202e 6953 636e 2065 7469 7327     wide. Since it's
  40ae60:	7220 6c65 6165 6573 202c 776c 5049 6820      release, lwIP h
  40ae70:	7361 090a 2020 2020 7073 7275 6572 2064     as..    spurred 
  40ae80:	2061 6f6c 2074 666f 6920 746e 7265 7365     a lot of interes
  40ae90:	2074 6e61 2064 6168 2073 6562 6e65 7020     t and has been p
  40aea0:	726f 6574 2064 6f74 7320 7665 7265 6c61     orted to several
  40aeb0:	090a 2020 2020 6c70 7461 6f66 6d72 2073     ..    platforms 
  40aec0:	6e61 2064 706f 7265 7461 6e69 2067 7973     and operating sy
  40aed0:	7473 6d65 2e73 6c20 4977 2050 6163 206e     stems. lwIP can 
  40aee0:	6562 7520 6573 2064 6965 6874 7265 090a     be used either..
  40aef0:	2020 2020 6977 6874 6f20 2072 6977 6874         with or with
  40af00:	756f 2074 6e61 7520 646e 7265 796c 6e69     out an underlyin
  40af10:	2067 534f 0a2e 2009 3c20 702f 0a3e 2009     g OS...  </p>.. 
  40af20:	3c20 3e70 090a 2020 2020 6854 2065 6f66      <p>..    The fo
  40af30:	7563 2073 666f 7420 6568 6c20 4977 2050     cus of the lwIP 
  40af40:	4354 2f50 5049 6920 706d 656c 656d 746e     TCP/IP implement
  40af50:	7461 6f69 206e 7369 7420 206f 6572 7564     ation is to redu
  40af60:	6563 090a 2020 2020 6874 2065 4152 204d     ce..    the RAM 
  40af70:	7375 6761 2065 6877 6c69 2065 7473 6c69     usage while stil
  40af80:	206c 6168 6976 676e 6120 6620 6c75 206c     l having a full 
  40af90:	6373 6c61 2065 4354 2e50 5420 6968 0a73     scale TCP. This.
  40afa0:	2009 2020 6d20 6b61 7365 6c20 4977 2050     .    makes lwIP 
  40afb0:	7573 7469 6261 656c 6620 726f 7520 6573     suitable for use
  40afc0:	6920 206e 6d65 6562 6464 6465 7320 7379      in embedded sys
  40afd0:	6574 736d 7720 7469 2068 6574 736e 090a     tems with tens..
  40afe0:	2020 2020 666f 6b20 6c69 626f 7479 7365         of kilobytes
  40aff0:	6f20 2066 7266 6565 5220 4d41 6120 646e      of free RAM and
  40b000:	7220 6f6f 206d 6f66 2072 7261 756f 646e      room for around
  40b010:	3420 2030 696b 6f6c 7962 6574 0a73 2009      40 kilobytes.. 
  40b020:	2020 6f20 2066 6f63 6564 5220 4d4f 0a2e        of code ROM..
  40b030:	2009 3c20 702f 0a3e 2009 3c20 3e70 090a     .  </p>..  <p>..
  40b040:	2020 2020 6f4d 6572 6920 666e 726f 616d         More informa
  40b050:	6974 6e6f 6120 6f62 7475 6c20 4977 2050     tion about lwIP 
  40b060:	6163 206e 6562 6620 756f 646e 6120 2074     can be found at 
  40b070:	6874 2065 776c 5049 090a 2020 2020 6f68     the lwIP..    ho
  40b080:	656d 6170 6567 6120 2074 613c 090a 2020     mepage at <a..  
  40b090:	2020 7268 6665 223d 7468 7074 2f3a 772f       href="http://w
  40b0a0:	7777 732e 6369 2e73 6573 7e2f 6461 6d61     ww.sics.se/~adam
  40b0b0:	6c2f 6977 2f70 3e22 7468 7074 2f3a 772f     /lwip/">http://w
  40b0c0:	7777 732e 6369 2e73 6573 7e2f 6461 6d61     ww.sics.se/~adam
  40b0d0:	6c2f 6977 2f70 2f3c 3e61 0a2e 2009 3c20     /lwip/</a>...  <
  40b0e0:	702f 0a3e 3c09 742f 3e64 743c 3e64 090a     /p>..</td><td>..
  40b0f0:	2020 6e26 7362 3b70 090a 2f3c 6474 3c3e       &nbsp;..</td><
  40b100:	742f 3e72 200a 2020 2020 3c20 742f 6261     /tr>.      </tab
  40b110:	656c 0a3e 2f3c 6f62 7964 0a3e 2f3c 7468     le>.</body>.</ht
  40b120:	6c6d 0a3e 000a 0000                         ml>.....

0040b128 <file_404_html>:
  40b128:	b138 0040 b164 0040 a4f8 0040 028e 0000     8.@.d.@...@.....

0040b138 <file_img_sics_gif>:
  40b138:	0000 0000 b170 0040 a788 0040 0337 0000     ....p.@...@.7...

0040b148 <file_index_html>:
  40b148:	b128 0040 b158 0040 aac0 0040 0665 0000     (.@.X.@...@.e...
  40b158:	692f 646e 7865 682e 6d74 006c 342f 3430     /index.html./404
  40b168:	682e 6d74 006c 0000 692f 676d 732f 6369     .html.../img/sic
  40b178:	2e73 6967 0066 0000 4547 2054 0000 0000     s.gif...GET ....
  40b188:	2d2d 5220 7761 4820 5454 2050 6142 6973     -- Raw HTTP Basi
  40b198:	2063 7845 6d61 6c70 2065 2d2d 0a0d 2d2d     c Example --..--
  40b1a8:	5320 4d41 3745 2d30 5058 444c 2d20 0d2d      SAME70-XPLD --.
  40b1b8:	2d0a 202d 6f43 706d 6c69 6465 203a 614d     .-- Compiled: Ma
  40b1c8:	2072 3133 3220 3130 2038 3331 313a 3a34     r 31 2018 13:14:
  40b1d8:	3634 2d20 0d2d 000a                         46 --...

0040b1e0 <_global_impure_ptr>:
  40b1e0:	0038 2040 000a 0000 3130 3332 3534 3736     8.@ ....01234567
  40b1f0:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  40b200:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  40b210:	6e28 6c75 296c 0000                         (null)..

0040b218 <blanks.7217>:
  40b218:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040b228 <zeroes.7218>:
  40b228:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40b238:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040b248 <_ctype_>:
  40b248:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40b258:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40b268:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40b278:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40b288:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40b298:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40b2a8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40b2b8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40b2c8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040b34c <_init>:
  40b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b34e:	bf00      	nop
  40b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b352:	bc08      	pop	{r3}
  40b354:	469e      	mov	lr, r3
  40b356:	4770      	bx	lr

0040b358 <__init_array_start>:
  40b358:	0040879d 	.word	0x0040879d

0040b35c <__frame_dummy_init_array_entry>:
  40b35c:	00400181                                ..@.

0040b360 <_fini>:
  40b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b362:	bf00      	nop
  40b364:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b366:	bc08      	pop	{r3}
  40b368:	469e      	mov	lr, r3
  40b36a:	4770      	bx	lr

0040b36c <__fini_array_start>:
  40b36c:	0040015d 	.word	0x0040015d
